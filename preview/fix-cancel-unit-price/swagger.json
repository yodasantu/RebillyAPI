{
  "swagger": "2.0",
  "info": {
    "version": "2.1",
    "title": "Rebilly REST API",
    "contact": {
      "name": "Rebilly API Support",
      "url": "https://www.rebilly.com/contact/",
      "email": "integrations@rebilly.com"
    },
    "license": {
      "name": "Rebilly",
      "url": "https://www.rebilly.com/api-license/"
    },
    "termsOfService": "https://www.rebilly.com/terms/",
    "x-logo": {
      "url": "https://rebilly.github.io/RebillyAPI/rb_apiLogo.svg",
      "backgroundColor": "#0033A0"
    },
    "description": "# Introduction\nThe Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable\nresource URLs.  It returns HTTP response codes to indicate errors.  It also\naccepts and returns JSON in the HTTP body.  You can use your favorite\nHTTP/REST library for your programming language to use Rebilly's API, or\nyou can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)\nand [Javascript](https://github.com/Rebilly/rebilly-js-sdk)).\n\nWe have other APIs that are also available.  Every action from our [app](https://app.rebilly.com)\nis supported by an API which is documented and available for use so that you\nmay automate any workflows necessary.  This document contains the most commonly\nintegrated resources.\n\n# Authentication\nWhen you sign up for an account, you are given your first API key.\nYou can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future). You authenticate to the\nRebilly API by providing your secret key in the request header.\n\nRebilly offers three forms of authentication:  secret key, publishable key, JSON Web Tokens, and public signature key.\n- [Secret API key](#section/Authentication/SecretApiKey): used for requests made from the server side. Never share these keys. Keep them guarded and secure\n- [Publishable API key](#section/Authentication/PublishableApiKey): used for requests from the client side. For now can only be used on the [Tokens resource](#tag/Payment-Tokens%2Fpaths%2F~1tokens%2Fpost)\n- [JWT](#section/Authentication/JWT): short lifetime tokens that can be assigned a specific expiration time\n\nNever share your secret keys. Keep them guarded and secure.\n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n# PHP SDK\nFor all PHP SDK examples provided in this spec you will need to configure `$client`.\nYou may do it like this:\n\n```php\n$client = new Rebilly\\Client([\n    'apiKey' => 'YourApiKeyHere',\n    'baseUrl' => 'https://api.rebilly.com',\n]);\n```\n\n# Using filter\nRebilly provides collections filtering. You can use `?filter` param on collection to define which records should be shown in the response.\n\nHere is filter format description:\n\n- Fields and values in filter are separated with `:`: `?filter=firstName:John`.\n\n- Fields in filter are separated with `;`: `?filter=firstName:John;lastName:Doe`.\n\n- You can use multiple values using `,` as values separator: `?filter=firstName:John,Bob`.\n\n- To negate the filter use `!`: `?filter=firstName:!John`. Note that you can negate multiple values like this: `?filter=firstName:!John,Bob`. This filter rule will exclude all Johns and Bobs from the response.\n\n- You can use range filters like this: `?filter=amount:1..10`.\n\n- You can use gte (greater than or equals) filter like this: `?filter=amount:1..`, or lte (less than or equals) than filter like this: `?filter=amount:..10`.\n\n- You can create some [predefined values lists](https://rebilly.github.io/RebillyUserAPI/#tag/Lists) and use them in filter: `?filter=firstName:@yourListName`. You can also exclude list values: `?filter=firstName:!@yourListName`\n"
  },
  "host": "api.rebilly.com",
  "basePath": "/v2.1",
  "schemes": [
    "https"
  ],
  "x-servers": [
    {
      "url": "//api.rebilly.com/v2.1",
      "description": "Live Server"
    },
    {
      "url": "//api-sandbox.rebilly.com/v2.1",
      "description": "Sandbox Server"
    }
  ],
  "produces": [
    "application/json; charset=utf-8"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "3D Secure",
      "description": "3D Secure is a way to authenticate and protect transactions.  Typically,\nit's only possible to protect the initial transaction in a subscription\nwith 3D Secure.\n"
    },
    {
      "name": "Bank Accounts",
      "description": "Bank Accounts are a type of payment instrument used to collect\nACH (echeck) payments, similar to how a payment\ncard would be used to for a credit card payment.\n"
    },
    {
      "name": "Blacklists",
      "description": "Your blacklists contains values of customerIds, email addresses,\nipAddresses, bank identification numbers, countries or payment cards that\nyou do NOT want to do business with. They are a good tool for managing\nrisk. A blacklist entry that expires after a period of time we call a\ngreylist.\n"
    },
    {
      "name": "Contacts",
      "description": "Contacts are Customer's address book.\nAll contact information used in Invoices, Subscriptions, Transacions, etc is enlisted here. Hovewer, changing a Contact won't change corresponding contact information in related resources\n"
    },
    {
      "name": "Coupons",
      "description": "Coupons allows to apply different types of discounts to Invoices, Subscriptions and Plans. Redeemed Coupons will be applied only to Invoices with the same currency.\n"
    },
    {
      "name": "Customers",
      "description": "Customers are your customers, sometimes known as accounts, clients,\nmembers, patrons, or players in other systems.\n"
    },
    {
      "name": "KYC Documents",
      "description": "Customer KYC files uploaded on behalf of a customer, tagged with a document type\nand submitted for validation.\n"
    },
    {
      "name": "Customer Authentication",
      "description": "Create authentication credentials, login, logout, and verify your customers.\n"
    },
    {
      "name": "Custom Fields",
      "description": "Create additional custom fields for particular resources.  You may name,\ndescribe, and determine the type of the schema.\n"
    },
    {
      "name": "Disputes",
      "description": "Handle disputes (chargebacks and retrievals).\n"
    },
    {
      "name": "Files",
      "description": "A File is an entity that can store a phyiscal file and some metadata. It also provides an easy access to\nits size, mime-type, user-defined tags and description thus allowing easy sorting and searching among stored\nfiles.\nThere are several methods of file uploading available: multipart/form-data encoded form, RAW POST (by sending\nfile contents as POST body), fetching from URL (by providing the file URL via 'url' param)\nAttachment is an entity that is used to link a File to one or multiple objects like Customer, Dispute, Payment,\nTransaction, Subscription, Plan, Product, Invoice, Note. That allows to quickly find and use files related to\nthose specific entities.\n"
    },
    {
      "name": "Invoices",
      "description": "Invoices leave a record for both you and your customer of the products sold.\n"
    },
    {
      "name": "Payments",
      "description": "Collect money from your customers with payments.  You can schedule a payment\nto occur in the future.  You can assign a dunning schedule to a payment to collect\nin the case of a decline.\n\nSome payments may be, what we term, suspended payments.  These types of payments\nrequire user interaction.  For example, an initial PayPal purchase, a 3D Secure\npurchase, China Union Pay, and more require the customer's interaction to\ncomplete the payment.  We call these a \"suspended\" payment flow.\n"
    },
    {
      "name": "Payment Cards",
      "description": "Payment cards are a type of payment instrument used for credit and debit card\nsales.  Rebilly securely vaults the full payment card number, and can pass it\nonward securely to any gateway account to transact business.\n"
    },
    {
      "name": "PayPal Accounts",
      "description": "PayPal Accounts are used for paying with PayPal.  We can generate a BAID (billing\nagreement id) which will allow for recurring billing.\n"
    },
    {
      "name": "Payment Tokens",
      "description": "Payment tokens are used to reduce the scope of PCI DSS compliance.  A payment\ntoken can be made using a different authentication scheme (refer to the public key\nauthentication scheme in the Authentication section), which allows you to\ncreate a payment token directly from the browser, bypassing the need to send\nsensitive cardholder info to your servers.  We recommend using this with our\nRebilly.js library, which helps you wire a form into this API resource and create\npayment tokens.\n"
    },
    {
      "name": "Plans",
      "description": "Plans are a template for making a subscription.  For example, you may have a plan\nthat has a 30-day free trial followed by a recurring charge of $19.95 per month\nuntil canceled.  The combination of the plan and a request to make a subscription\nwill apply those instructions to create the invoices according to the plan's\nschedule.\n"
    },
    {
      "name": "Products",
      "description": "Proposed:  Your product includes digital goods, services, and physical goods.\n"
    },
    {
      "name": "Reports",
      "description": "The Rebilly Reporting API is currently experimental.  You may see\nthe [Reports API Documentation here](https://rebilly.github.io/RebillyReportsAPI/).\n"
    },
    {
      "name": "Shipping Zones",
      "description": "A shipping zone contains regions and countries that you ship to. Each shipping zone has its own shipping rates.\n"
    },
    {
      "name": "Subscriptions",
      "description": "A subscription applies a plan's template to create invoices for a customer at the\nappropriate scheduled intervals.  A subscription may also determine if the payment\nis collected automatically (with autopay set true).\n"
    },
    {
      "name": "Taxes",
      "description": "You can map a product to a tax category.  The tax category is used by\ntax providers to calculate taxes for invoices.\n"
    },
    {
      "name": "Transactions",
      "description": "Get and refund transactions.\n"
    },
    {
      "name": "Users",
      "description": "The Rebilly User API is primarily for our GUI apps.  You may see\nthe [User API Documentation here](https://rebilly.github.io/RebillyUserAPI/).\nA User represents a person who can login to Rebilly, and take actions subject to\ntheir granted permissions.  It has resources less commonly integrated by\n3rd parties.\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Customers",
      "tags": [
        "Customers",
        "Customer Authentication",
        "Custom Fields",
        "Contacts",
        "Files",
        "KYC Documents"
      ]
    },
    {
      "name": "Payment Instruments",
      "tags": [
        "Bank Accounts",
        "Payment Cards",
        "Payment Tokens",
        "PayPal Accounts",
        "Payment Instrument Validation"
      ]
    },
    {
      "name": "Payments",
      "tags": [
        "3D Secure",
        "Payments",
        "Transactions",
        "Disputes",
        "Blacklists"
      ]
    },
    {
      "name": "Invoices & Subscriptions",
      "tags": [
        "Coupons",
        "Invoices",
        "Plans",
        "Products",
        "Shipping Zones",
        "Subscriptions",
        "Taxes"
      ]
    },
    {
      "name": "Misc",
      "tags": [
        "Reports",
        "Users"
      ]
    }
  ],
  "securityDefinitions": {
    "SecretApiKey": {
      "description": "When you sign up for an account, you are given your first secret API key.\nTo do so please [follow this link.](https://app.rebilly.com/signup)\nAlso you can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future).\n",
      "name": "REB-APIKEY: sk_live_xxxx",
      "type": "apiKey",
      "in": "header"
    },
    "PublishableApiKey": {
      "description": "Only for the Tokens resource.\nYou can create a Publishable API Key via our [API Keys resource](https://rebilly.github.io/RebillyUserAPI/#tag/API-Keys), by specifying the type as `publishable`.\n",
      "name": "Authorization: Bearer pk_live_xxxx",
      "type": "apiKey",
      "in": "header"
    },
    "JWT": {
      "description": "You can create a JSON Web Token (JWT) via our [Sessions resource](https://rebilly.github.io/RebillyUserAPI/#tag/Sessions%2Fpaths%2F~1signin%2Fpost).\n",
      "name": "Authorization: Bearer jwt",
      "type": "apiKey",
      "in": "header"
    }
  },
  "security": [
    {
      "SecretApiKey": []
    },
    {
      "JWT": []
    }
  ],
  "responses": {
    "AccessForbidden": {
      "description": "Access forbidden, invalid API-KEY was used",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "Resource was not found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Found": {
      "description": "Resource was moved",
      "headers": {
        "Location": {
          "type": "string"
        }
      }
    },
    "Conflict": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "InvalidDataError": {
      "description": "Invalid data was sent",
      "schema": {
        "$ref": "#/definitions/InvalidError"
      }
    }
  },
  "parameters": {
    "resourceId": {
      "name": "id",
      "in": "path",
      "description": "The resource identifier string",
      "type": "string",
      "required": true
    },
    "collectionLimit": {
      "name": "limit",
      "in": "query",
      "description": "The collection items limit",
      "type": "integer",
      "minimum": 0,
      "maximum": 1000
    },
    "collectionOffset": {
      "name": "offset",
      "in": "query",
      "description": "The collection items offset",
      "type": "integer",
      "minimum": 0
    },
    "collectionFilter": {
      "name": "filter",
      "in": "query",
      "type": "string",
      "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the [filter guide](https://rebilly.github.io/RebillyAPI/#section/Using-filter) for more options and examples about this format.\n"
    },
    "collectionQuery": {
      "name": "q",
      "in": "query",
      "type": "string",
      "description": "The partial search of the text fields."
    },
    "collectionSort": {
      "name": "sort",
      "in": "query",
      "type": "array",
      "collectionFormat": "csv",
      "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
      "items": {
        "type": "string"
      }
    },
    "collectionFields": {
      "name": "fields",
      "in": "query",
      "type": "string",
      "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned."
    },
    "collectionExpand": {
      "name": "expand",
      "in": "query",
      "type": "string",
      "description": "Expand response to get full related object intead of ID.  See the expand guide for more info."
    },
    "systemEventType": {
      "name": "eventType",
      "in": "path",
      "description": "The event type",
      "type": "string",
      "required": true
    },
    "rulesVersion": {
      "name": "version",
      "in": "path",
      "type": "integer",
      "required": true,
      "minimum": 1,
      "description": "The rule set version. Expand response to get full related object instead of ID.  See the expand guide for more info."
    },
    "hash": {
      "name": "hash",
      "in": "path",
      "description": "The token identifier string",
      "type": "string",
      "required": true
    },
    "mediaType": {
      "name": "Accept",
      "in": "header",
      "type": "string",
      "enum": [
        "application/json"
      ],
      "default": "application/json",
      "description": "The response media type"
    }
  },
  "paths": {
    "/3dsecure": {
      "get": {
        "tags": [
          "3D Secure"
        ],
        "summary": "Retrieve a list of ThreeDSecure entries",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThreeDSecure"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "3D Secure"
        ],
        "summary": "Create a ThreeDSecure entry",
        "description": "Create a ThreeDSecure entry\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "ThreeDSecure resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThreeDSecure"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ThreeDSecure entry was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ThreeDSecure"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/3dsecure/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "3D Secure"
        ],
        "summary": "Retrieve a ThreeDSecure entry",
        "description": "Retrieve a ThreeDSecure entry with specified identifier string\n",
        "responses": {
          "200": {
            "description": "ThreeDSecure entry was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ThreeDSecure"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/attachments": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve a list of Attachments",
        "description": "Retrieve a list of Attachments\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionQuery"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          },
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "collectionFormat": "csv",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "items": {
              "type": "string",
              "enum": [
                "id",
                "-id",
                "name",
                "-name",
                "relatedId",
                "-relatedId",
                "relatedType",
                "-relatedType",
                "fileId",
                "-fileId",
                "createdTime",
                "-createdTime",
                "updatedTime",
                "-updatedTime"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Attachments was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachment"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$attachments = $client->attachments()->search([\n    'filter' => 'relatedType:customer',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Create an Attachment",
        "description": "Create an Attachment\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Attachment resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Attachment was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$attachmentForm = new Rebilly\\Entities\\Attachment();\n$attachmentForm->setFileId('fileId');\n$attachmentForm->setRelatedType($attachmentForm::TYPE_CUSTOMER);\n$attachmentForm->setRelatedId('customerId');\n\ntry {\n    $attachment = $client->attachments()->create($attachmentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/attachments/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve an Attachment",
        "description": "Retrieve a Attachment with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Attachment was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$attachment = $client->attachments()->load('attachmentId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Files"
        ],
        "summary": "Update the Attachment with predefined ID",
        "description": "Update the Attachment with predefined ID\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Attachment resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attachment was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "201": {
            "description": "Attachment was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Attachment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$attachmentForm = new Rebilly\\Entities\\Attachment();\n$attachmentForm->setFileId('fileId');\n$attachmentForm->setRelatedType($attachmentForm::TYPE_CUSTOMER);\n$attachmentForm->setRelatedId('customerId');\n\ntry {\n    $attachment = $client->attachments()->update('attachmentId', $attachmentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Delete an Attachment",
        "description": "Delete the Attachment with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Attachment was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->attachments()->delete('attachmentId');\n"
          }
        ]
      }
    },
    "/authentication-options": {
      "get": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Read current authentication options",
        "description": "Read current authentication options\n",
        "responses": {
          "200": {
            "description": "Current authentication options was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuthenticationOptions"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$authenticationOptions = $client->authenticationOptions()->load();\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Change authentication options",
        "description": "Change options\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Authentication Options resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthenticationOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication Options were updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/AuthenticationOptions"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$authenticationOptionsForm = new Rebilly\\Entities\\AuthenticationOptions();\n// Regular expression below matches any password with 6+ length that contains alphabet symbols and/or numbers.\n$authenticationOptionsForm->setPasswordPattern('/^[a-zA-Z0-9]{6,}$/');\n\ntry {\n    $authenticationOptions = $client->authenticationOptions()->update($authenticationOptionsForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/authentication-tokens": {
      "get": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Retrieve a list of auth tokens",
        "description": "Retrieve a list of auth tokens\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of auth tokens was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuthenticationToken"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$authenticationTokens = $client->authenticationTokens()->search([\n    'filter' => 'customerId:testCustomer',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Login",
        "description": "Login a user (customer)\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "AuthenticationToken resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthenticationToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Login successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/AuthenticationToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$authenticationForm = new Rebilly\\Entities\\AuthenticationToken();\n$authenticationForm->setUsername('username');\n$authenticationForm->setPassword('test123');\n\ntry {\n    $authenticationToken = $client->authenticationTokens()->login($authenticationForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/authentication-tokens/{token}": {
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "description": "The token identifier string",
          "type": "string",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Verify",
        "description": "Verify an authentication token\n",
        "responses": {
          "200": {
            "description": "Authentication Token was verified",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/AuthenticationToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$isVerified = $client->authenticationTokens()->verify('token');\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Logout a user",
        "description": "Logout a user\n",
        "responses": {
          "204": {
            "description": "User was logged out",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->authenticationTokens()->logout('token');\n"
          }
        ]
      }
    },
    "/bank-accounts": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve a list of bank accounts",
        "description": "Retrieve a list of Bank Accounts\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Bank Accounts was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BankAccount"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccounts = $client->bankAccounts()->search([\n    'filter' => 'customerId:testId',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Create a Bank Account",
        "description": "Create a Bank Account\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "BankAccount resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Bank Account was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccountForm = new Rebilly\\Entities\\BankAccount();\n$bankAccountForm->setCustomerId('customerId');\n$bankAccountForm->setRoutingNumber('0123456');\n$bankAccountForm->setAccountNumber('0123456');\n$bankAccountForm->setAccountType('checking');\n$bankAccountForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $bankAccount = $client->bankAccounts()->create($bankAccountForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/bank-accounts/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve a Bank Account",
        "description": "Retrieve a Bank Account with specified identifier string\n",
        "responses": {
          "200": {
            "description": "BankAccount was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccount = $client->bankAccounts()->load('bankAccountId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Create a BankAccount with predefined ID",
        "description": "Create or update a BankAccount with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "BankAccount resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BankAccount was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "201": {
            "description": "BankAccount was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccountForm = new Rebilly\\Entities\\BankAccount();\n$bankAccountForm->setCustomerId('customerId');\n$bankAccountForm->setRoutingNumber('0123456');\n$bankAccountForm->setAccountNumber('0123456');\n$bankAccountForm->setAccountType('checking');\n$bankAccountForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $bankAccount = $client->customers()->create($bankAccountForm, 'bankAccountId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/bank-accounts/{id}/deactivation": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Deactivate a Bank Account",
        "description": "Deactivate a Bank Account\n",
        "responses": {
          "201": {
            "description": "Deactivated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$bankAccount = $client->bankAccounts()->deactivate('bankAccountId');\n"
          }
        ]
      }
    },
    "/blacklists": {
      "get": {
        "tags": [
          "Blacklists"
        ],
        "summary": "Retrieve a list of blacklists",
        "description": "Retrieve a list of blacklists\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Blacklists was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Blacklist"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$blacklists = $client->blacklists()->search([\n    'filter' => 'value:testValue',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Blacklists"
        ],
        "summary": "Create a blacklist",
        "description": "Create a blacklist\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Blacklist resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Blacklist was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$blacklistForm = new Rebilly\\Entities\\Blacklist();\n$blacklistForm->setType($blacklistForm::TYPE_EMAIL);\n$blacklistForm->setValue('test@test.com');\n$blacklistForm->setExpiredTime('2025-01-01 05:00:00');\n\ntry {\n    $blacklist = $client->blacklists()->create($blacklistForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/blacklists/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Blacklists"
        ],
        "summary": "Retrieve a blacklist",
        "description": "Retrieve a blacklist with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Blacklist was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$blacklist = $client->blacklists()->load('blacklistId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Blacklists"
        ],
        "summary": "Create a blacklist with predefined ID",
        "description": "Create a blacklist with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Blacklist resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Blacklist was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "description": "Blacklist exist and cannot be updated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$blacklistForm = new Rebilly\\Entities\\Blacklist();\n$blacklistForm->setType($blacklistForm::TYPE_EMAIL);\n$blacklistForm->setValue('test@test.com');\n$blacklistForm->setExpiredTime('2025-01-01 05:00:00');\n\ntry {\n    $blacklist = $client->blacklists()->create($blacklistForm, 'blacklistId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Blacklists"
        ],
        "summary": "Delete a blacklist",
        "description": "Delete a blacklist with predefined identifier string\n",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "description": "Blacklist was deleted"
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->blacklists()->delete('blacklistId');\n"
          }
        ]
      }
    },
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Retrieve a list of contacts",
        "description": "Retrieve a list of contacts\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Contacts was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contact"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$contacts = $client->contacts()->search([\n    'filter' => 'firstName:John',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create a contact",
        "description": "Create a contact\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Contact resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Contact was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$contactForm = new Rebilly\\Entities\\Contact();\n$contactForm->setFirstName('Sherlock');\n$contactForm->setLastName('Holmes');\n$contactForm->setOrganization('TestOrganization');\n$contactForm->setEmails(\n    [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ]\n);\n$contactForm->setPhoneNumbers(\n    [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ]\n);\n\ntry {\n    $contact = $client->contacts()->create($contactForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/contacts/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Retrieve a contact",
        "description": "Retrieve a contact with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Contact was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$contact = $client->contacts()->load('contactId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create or update a contact with predefined ID",
        "description": "Create or update a contact with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Contact resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Contact was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Contact exists and cannot be updated"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$contactForm = new Rebilly\\Entities\\Contact();\n$contactForm->setFirstName('Sherlock');\n$contactForm->setLastName('Holmes');\n$contactForm->setOrganization('TestOrganization');\n$contactForm->setEmails(\n    [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ]\n);\n$contactForm->setPhoneNumbers(\n    [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ]\n);\n\ntry {\n    $contact = $client->contacts()->update('contactId', $contactForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete a contact",
        "description": "Delete a contact with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Contact was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "402": {
            "description": "Contact cannot be deleted"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/coupons-redemptions": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Retrieve a list of coupon redemptions",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionQuery"
          },
          {
            "$ref": "#/parameters/collectionSort"
          }
        ],
        "responses": {
          "200": {
            "description": "Coupons redemptions were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CouponRedemption"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$couponRedemptions = $client->couponsRedemptions()->search([\n    'filter' => 'customerId:testCustomer',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "Redeem a coupon",
        "description": "Redeem a coupon\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Redeem a coupon",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CouponRedemption"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Coupon was redeemed",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CouponRedemption"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$redemptionForm = new Rebilly\\Entities\\Coupons\\Redemption();\n$redemptionForm->setCustomerId('customerId');\n$redemptionForm->setRedemptionCode('redemptionCode');\n\n$restrictionArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Restriction::TYPE_DISCOUNTS_PER_REDEMPTION,\n    'quantity' => 2,\n];\n\n$restrictionForm = new Rebilly\\Entities\\Coupons\\Restriction([\n    $restrictionArray,\n]);\n\n$redemptionForm->setAdditionalRestrictions($restrictionForm);\n\ntry {\n    $couponRedemption = $client->couponsRedemptions()->redeem($redemptionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/coupons-redemptions/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Retrieve a coupon redemption with specified identifier string",
        "responses": {
          "200": {
            "description": "Retrieve a coupon redemption with specified identifier string",
            "schema": {
              "$ref": "#/definitions/CouponRedemption"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$couponRedemption = $client->couponsRedemptions()->load('redemptionCode');\n"
          }
        ]
      }
    },
    "/coupons-redemptions/{id}/cancel": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "Cancel a coupon redemption",
        "responses": {
          "201": {
            "description": "Cancel a coupon redemption"
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->couponsRedemptions()->cancel('id');\n"
          }
        ]
      }
    },
    "/coupons": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Retrieve a list of coupons",
        "description": "Retrieve a list of coupons\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionQuery"
          },
          {
            "$ref": "#/parameters/collectionSort"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of coupons was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coupon"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$coupons = $client->coupons()->search([\n    'filter' => 'status:issued',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "Create a coupon",
        "description": "Create a coupon\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Coupon resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Coupon was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$couponForm = new Rebilly\\Entities\\Coupons\\Coupon();\n\n$discountArray = [\n    'currency' => 'USD',\n    'amount' => 1.99,\n];\n\n$discountForm = new \\Rebilly\\Entities\\Coupons\\Discounts\\Fixed($discountArray);\n$couponForm->setDiscount($discountForm);\n// Coupon can be used right now\n$couponForm->setIssuedTime(date('Y-m-d H:i:s'));\n\n$restrictionArray = [\n    'quantity' => 2,\n];\n\n$restrictionForm = new Rebilly\\Entities\\Coupons\\Restrictions\\DiscountsPerRedemption($restrictionArray);\n\n$couponForm->setRestrictions([$restrictionForm]);\n\ntry {\n    $coupon = $client->coupons()->create($couponForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/coupons/{redemptionCode}": {
      "parameters": [
        {
          "name": "redemptionCode",
          "in": "path",
          "description": "The Coupon's redemption code",
          "type": "string",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Retrieve a coupon",
        "description": "Retrieve a coupon with specified redemption code string\n",
        "responses": {
          "200": {
            "description": "Coupon was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$coupon = $client->coupons()->load('redemptionCode');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Coupons"
        ],
        "summary": "Create or update a coupon with predefined redemption code",
        "description": "Create or update a coupon with predefined redemption code\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Coupon resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Coupon was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          },
          "201": {
            "description": "Coupon was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Coupon was redeemed already and cannot be changed"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$couponForm = new Rebilly\\Entities\\Coupons\\Coupon();\n\n$discountArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Discount::TYPE_FIXED,\n    'currency' => 'USD',\n    'amount' => 1.99,\n];\n\n$discountForm = new Rebilly\\Entities\\Coupons\\Discount($discountArray);\n$couponForm->setDiscount($discountForm);\n\n$restrictionArray = [\n    'type' => Rebilly\\Entities\\Coupons\\Restriction::TYPE_DISCOUNTS_PER_REDEMPTION,\n    'quantity' => 2,\n];\n\n$restrictionForm = new Rebilly\\Entities\\Coupons\\Restriction([\n    $restrictionArray,\n]);\n\n$couponForm->setRestrictions($restrictionForm);\n\ntry {\n    $coupon = $client->coupons()->create($couponForm, 'redemptionCode');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/coupons/{redemptionCode}/expiration": {
      "parameters": [
        {
          "name": "redemptionCode",
          "in": "path",
          "description": "The Coupon's redemption code",
          "type": "string",
          "required": true
        }
      ],
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "Set a coupon's expiration time.",
        "description": "Set a coupon's expiry time with the specified redemption code.\nThe expiredTime of a coupon must be greater than its issuedTime.\nThis cannot be performed on expired coupons.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Coupon resource",
            "schema": {
              "$ref": "#/definitions/CouponExpiration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Coupon expiration was successfully set",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Coupon"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "The coupon is already expired and has been redeemed, unable to reschedule expiration",
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/credentials": {
      "get": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Retrieve a list of credentials",
        "description": "Retrieve a list of credentials\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Credentials was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Credential"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerCredentials = $client->customerCredentials()->search([\n    'filter' => 'customerId:testCustomer',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Create a credential",
        "description": "Create a credential\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Credential resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerCredentialForm = new Rebilly\\Entities\\CustomerCredential();\n$customerCredentialForm->setCustomerId('customerId');\n$customerCredentialForm->setUsername('test');\n$customerCredentialForm->setPassword('1234');\n\ntry {\n    $customerCredential = $client->customerCredentials()->create($customerCredentialForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/credentials/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Retrieve a credential",
        "description": "Retrieve a credential with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerCredential = $client->customerCredentials()->load('credentialId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Create or update a credential with predefined ID",
        "description": "Create or update a credential with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Credential resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Credential was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "201": {
            "description": "Credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerCredentialForm = new Rebilly\\Entities\\CustomerCredential();\n$customerCredentialForm->setCustomerId('customerId');\n$customerCredentialForm->setUsername('test');\n$customerCredentialForm->setPassword('1234');\n\ntry {\n    $customerCredential = $client->customerCredentials()->update('credentialId', $customerCredentialForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Delete a credential",
        "description": "Delete a credential with predefined identifier string\n",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "description": "Credential was deleted"
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->customerCredentials()->delete('credentialId');\n"
          }
        ]
      }
    },
    "/custom-fields/{resource}": {
      "parameters": [
        {
          "name": "resource",
          "in": "path",
          "description": "The resource type string",
          "type": "string",
          "required": true,
          "enum": [
            "customers",
            "payment-cards",
            "subscriptions",
            "transactions",
            "websites",
            "contacts",
            "products"
          ]
        }
      ],
      "get": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Retrieve Custom Fields",
        "description": "Retrieve a schema of Custom Fields for the given resource type\n",
        "responses": {
          "200": {
            "description": "A schema of Custom Fields was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "description": "The list of custom fields",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomField"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customFields = $client->customFields()->search([\n    'filter' => 'type:boolean',\n]);\n"
          }
        ]
      }
    },
    "/custom-fields/{resource}/{name}": {
      "parameters": [
        {
          "name": "resource",
          "in": "path",
          "description": "The resource type string",
          "type": "string",
          "required": true,
          "enum": [
            "customers",
            "payment-cards",
            "subscriptions",
            "transactions",
            "websites",
            "contacts",
            "products"
          ]
        },
        {
          "name": "name",
          "in": "path",
          "description": "The custom field's identifier string",
          "type": "string",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Retrieve a Custom Field",
        "description": "Retrieve a schema of the given Custom Field for the given resource type\n",
        "responses": {
          "200": {
            "description": "A schema of the Custom Field was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customField = $client->customFields()->load('customers', 'customerId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Create or alter a Custom Field",
        "description": "Create or alter a schema of the given Custom Field for the given resource type.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Custom Fields schema of the given resource type",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Custom Field was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          },
          "201": {
            "description": "The Custom Fields was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "description": "The schema is in use: remove all the associated data in order to remove or alter the schema",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customFieldForm = new Rebilly\\Entities\\CustomField();\n$customFieldForm->setType($customFieldForm::TYPE_BOOLEAN);\n\ntry {\n    $customField = $client->customFields()->update('customers', 'testFieldName', $customFieldForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/customers": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Retrieve a list of customers",
        "description": "Retrieve a list of customers\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionQuery"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          },
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "collectionFormat": "csv",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "items": {
              "type": "string",
              "enum": [
                "id",
                "-id",
                "email",
                "-email",
                "createdTime",
                "-createdTime",
                "updatedTime",
                "-updatedTime"
              ]
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "type": "string",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "default": "application/json",
            "description": "The response media type"
          }
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "A list of Customers was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customers = $client->customers()->search([\n    'filter' => 'firstName:John',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Create a customer",
        "description": "Create a customer\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Customer resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Customer was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerForm = new Rebilly\\Entities\\Customer();\n$customerForm->setPrimaryAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $customer = $client->customers()->create($customerForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/customers/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Retrieve a customer",
        "description": "Retrieve a customer with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Customer was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customers = $client->customers()->load('myCustomerId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "summary": "Create a customer with predefined ID",
        "description": "Create a customer with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Customer resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "201": {
            "description": "Customer was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customerForm = new Rebilly\\Entities\\Customer();\n$customerForm->setPrimaryAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $customer = $client->customers()->update('myCustomerId', $customerForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/customers/{id}/lead-source": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Retrieve a customer's Lead Source",
        "description": "Retrieve a Lead Source of given customer\n",
        "responses": {
          "200": {
            "description": "Lead Source was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customer = $client->customers()->load('myCustomerId');\n$leadSource = $customer->getLeadSource();\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "summary": "Create a Lead Source for a customer",
        "description": "Create a Lead Source for a customer\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Lead Source resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lead Source was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "201": {
            "description": "Lead Source was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$leadSourceForm = new Rebilly\\Entities\\LeadSource();\n$leadSourceForm->setSource('TestSource');\n$leadSourceForm->setCampaign('TestCampaign');\n\ntry {\n    $customer = $client->customers()->updateLeadSource('myCustomerId', $leadSourceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Delete a Lead Source for a customer",
        "description": "Delete a Lead Source that belongs to a certain customer\n",
        "responses": {
          "204": {
            "description": "Lead Source was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Lead Source cannot be deleted"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$customer = $client->customers()->deleteLeadSource('myCustomerId');\n"
          }
        ]
      }
    },
    "/disputes": {
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Retrieve a list of disputes",
        "description": "Retrieve a list of disputes\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of disputes was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Dispute"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$disputes = $client->disputes()->search([\n    'filter' => 'transactionId:testId',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Disputes"
        ],
        "summary": "Create a dispute",
        "description": "Create a dispute\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Dispute resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Dispute was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$disputeForm = new Rebilly\\Entities\\Dispute();\n$disputeForm->setTransactionId('transactionId');\n$disputeForm->setCurrency('USD');\n$disputeForm->setAmount(10);\n$disputeForm->setReasonCode(1000);\n$disputeForm->setType($disputeForm::TYPE_1CB);\n$disputeForm->setStatus($disputeForm::STATUS_RESPONSE_NEEDED);\n$disputeForm->setPostedTime('2025-01-01 05:00:00');\n\ntry {\n    $dispute = $client->disputes()->create($disputeForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/disputes/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Retrieve a dispute",
        "description": "Retrieve a dispute with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Dispute was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$dispute = $client->disputes()->load('disputeId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Disputes"
        ],
        "summary": "Create or update a Dispute with predefined ID",
        "description": "Create or update a Dispute with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Dispute resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dispute was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          },
          "201": {
            "description": "Dispute was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$disputeForm = new Rebilly\\Entities\\Dispute();\n$disputeForm->setTransactionId('transactionId');\n$disputeForm->setCurrency('USD');\n$disputeForm->setAmount(10);\n$disputeForm->setReasonCode(1000);\n$disputeForm->setType($disputeForm::TYPE_1CB);\n$disputeForm->setStatus($disputeForm::STATUS_RESPONSE_NEEDED);\n$disputeForm->setPostedTime('2025-01-01 05:00:00');\n\ntry {\n    $dispute = $client->disputes()->update('disputeId', $dispute);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/disputes/{id}/matched-rules": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Get matched rules for the dispute",
        "description": "Get matched rules for the dispute",
        "responses": {
          "200": {
            "description": "List of matched rules was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MatchedRule"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve a list of files",
        "description": "Retrieve a list of files\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionQuery"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          },
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "collectionFormat": "csv",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "items": {
              "type": "string",
              "enum": [
                "id",
                "-id",
                "name",
                "-name",
                "extension",
                "-extension",
                "size",
                "-size",
                "width",
                "-width",
                "height",
                "-height",
                "createdTime",
                "-createdTime",
                "updatedTime",
                "-updatedTime"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Files was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/File"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$files = $client->files()->search([\n    'filter' => 'name:TestFile',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Create a file",
        "security": [
          {
            "SecretApiKey": []
          },
          {
            "JWT": []
          },
          {
            "PublishableApiKey": []
          }
        ],
        "description": "Additionally, a file can be sent with:\n - multipart/form-data POST request: in this case all property names are the same as the JSON ones (`file` is an uploaded file)\n - file body request: the file body is sent as the request body, with the appropriate `Content-Type`. No aditional\n properties can be set along the request data\n\nThe following file types only are allowed:\n - jpg\n - png\n - gif\n - pdf\n - mp3\n\n\nIf using a Publishable Api Key, only private files can be created. The files can later on be modified or used using\n a secret API key.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileCreateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "File was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$fileForm = new Rebilly\\Entities\\File();\n$fileForm->setUrl('http://test.com/somefile.jpg');\n\ntry {\n    $file = $client->files()->create($fileForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/files/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve a File Record",
        "description": "Retrieve a File with specified identifier string\n",
        "responses": {
          "200": {
            "description": "File was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$file = $client->files()->load('fileId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Files"
        ],
        "summary": "Update the File with predefined ID. Note that file can be uploaded with POST only.",
        "description": "Update the File with predefined ID\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "File resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/File"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/File"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$fileForm = new Rebilly\\Entities\\File();\n$fileForm->setDescription('This is a test file');\n\ntry {\n    $file = $client->files()->update('fileId', $fileForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Delete a File",
        "description": "Delete the File with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "File was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->files()->delete('fileId');\n"
          }
        ]
      }
    },
    "/files/{id}/download": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Download a file",
        "description": "Download a file\n",
        "responses": {
          "200": {
            "description": "The file was retrieved successfully",
            "headers": {
              "Content-Length": {
                "description": "The number of bytes in the file",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The MIME type of the file",
                "type": "string"
              }
            },
            "schema": {
              "type": "string",
              "readOnly": true
            }
          },
          "302": {
            "$ref": "#/responses/Found"
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/files/{id}/download{extension}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        },
        {
          "name": "extension",
          "in": "path",
          "description": "File extension which also indicates the desired file format",
          "type": "string",
          "required": true,
          "enum": [
            ".png",
            ".jpg",
            ".gif"
          ]
        }
      ],
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Download image in specific format",
        "description": "Download image in specific format. Images are converted server-side\n",
        "responses": {
          "200": {
            "description": "The file was retrieved successfully",
            "headers": {
              "Content-Length": {
                "description": "The number of bytes in the file",
                "type": "integer"
              },
              "Content-Type": {
                "description": "The MIME type of the file",
                "type": "string"
              }
            },
            "schema": {
              "type": "string",
              "readOnly": true
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/invoices": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Retrieve a list of invoices",
        "description": "Retrieve a list of invoices\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "name": "Accept",
            "in": "header",
            "type": "string",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "default": "application/json",
            "description": "The response media type"
          }
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "A list of invoices was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Invoice"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoices = $client->invoices()->search([\n    'filter' => 'customerId:testCustomerId',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Create an invoice",
        "description": "Create an invoice\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Invoice resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Invoice was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "<?\n$invoiceForm = new Rebilly\\Entities\\Invoice();\n$invoiceForm->setCustomerId('customerId');\n$invoiceForm->setWebsiteId('websiteId');\n$invoiceForm->setCurrency('USD');\n$invoiceForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $invoice = $client->invoices()->create($invoiceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/invoices/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Retrieve an invoice",
        "description": "Retrieve an invoice with specified identifier string\n",
        "produces": [
          "application/json",
          "application/pdf"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "type": "string",
            "enum": [
              "application/json",
              "application/pdf"
            ],
            "default": "application/json",
            "description": "The response media type"
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->load('invoiceId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Invoices"
        ],
        "summary": "Create or update an invoice with predefined ID",
        "description": "Create or update an invoice with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Invoice resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "201": {
            "description": "Invoice was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "<?\n$invoiceForm = new Rebilly\\Entities\\Invoice();\n$invoiceForm->setCustomerId('customerId');\n$invoiceForm->setWebsiteId('websiteId');\n$invoiceForm->setCurrency('USD');\n$invoiceForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $invoice = $client->invoices()->update('invoiceId', $invoiceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/invoices/{id}/abandon": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Abandon an invoice",
        "description": "Abandon an invoice with specified identifier string\n",
        "responses": {
          "201": {
            "description": "Invoice was abandoned successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->abandon('invoiceId');\n"
          }
        ]
      }
    },
    "/invoices/{id}/issue": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Issue an invoice",
        "description": "Issue an invoice with specified identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "InvoiceIssue resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceIssue"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Invoice was issued successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->issue('invoiceId', '2025-01-01 05:00:00');\n"
          }
        ]
      }
    },
    "/invoices/{id}/items": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Retrieve invoice items",
        "description": "Retrieve an invoice items with specified invoice identifier string\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice items were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoiceItem"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoiceItems = $client->invoiceItems()->search('invoiceId', [\n    'filter' => 'quantity:5',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Create an invoice item",
        "description": "Create an invoice item\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "InvoiceItem resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceItem"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "InvoiceItem was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/InvoiceItem"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoiceItemForm = new Rebilly\\Entities\\InvoiceItem();\n$invoiceItemForm->setType($invoiceItemForm::TYPE_DEBIT);\n$invoiceItemForm->setUnitPrice(0.99);\n$invoiceItemForm->setQuantity(5);\n\ntry {\n    $invoiceItem = $client->invoiceItems()->create($invoiceItemForm, 'invoiceId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/invoices/{id}/lead-source": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Retrieve an invoice's Lead Source",
        "description": "Retrieve a Lead Source of given invoice\n",
        "responses": {
          "200": {
            "description": "Lead Source was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->load('invoiceId');\n$leadSource = $invoice->getLeadSource();\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Invoices"
        ],
        "summary": "Create a Lead Source for an invoice",
        "description": "Create a Lead Source for an invoice\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Lead Source resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lead Source was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "201": {
            "description": "Lead Source was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$leadSourceForm = new Rebilly\\Entities\\LeadSource();\n$leadSourceForm->setSource('TestSource');\n$leadSourceForm->setCampaign('TestCampaign');\n\ntry {\n    $invoice = $client->invoices()->updateLeadSource('invoiceId', $leadSourceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Invoices"
        ],
        "summary": "Delete a Lead Source for an invoice",
        "description": "Delete a Lead Source that belongs to a certain invoice\n",
        "responses": {
          "204": {
            "description": "Lead Source was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Lead Source cannot be deleted"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->deleteLeadSource('invoiceId');\n"
          }
        ]
      }
    },
    "/invoices/{id}/matched-rules": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get matched rules for the invoice",
        "description": "Get matched rules for the invoice",
        "responses": {
          "200": {
            "description": "List of matched rules was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MatchedRule"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/invoices/{id}/void": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Void an invoice",
        "description": "Void an invoice with specified identifier string\n",
        "responses": {
          "201": {
            "description": "Invoice was voided successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$invoice = $client->invoices()->void('invoiceId');\n"
          }
        ]
      }
    },
    "/kyc-documents": {
      "get": {
        "tags": [
          "KYC Documents"
        ],
        "summary": "Retrieve a list of KYC documents",
        "description": "Retrieve a list of KYC documents\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "collectionFormat": "csv",
            "description": "The collection items sort field and order (prefix with \"-\" for descending sort).",
            "items": {
              "type": "string",
              "enum": [
                "id",
                "-id",
                "createdTime",
                "-createdTime",
                "updatedTime",
                "-updatedTime"
              ]
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "type": "string",
            "enum": [
              "application/json"
            ],
            "default": "application/json",
            "description": "The response media type"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "A list of KYC documents was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KycDocument"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "KYC Documents"
        ],
        "summary": "Create a KYC Document",
        "description": "Create a KYC Document\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Kyc document resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Kyc document was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/kyc-documents/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "KYC Documents"
        ],
        "summary": "Retrieve a KYC Document",
        "description": "Retrieve a KYC document with specified identifier string\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "type": "string",
            "enum": [
              "application/json"
            ],
            "default": "application/json",
            "description": "The response media type"
          }
        ],
        "responses": {
          "200": {
            "description": "KYC document was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "KYC Documents"
        ],
        "summary": "Create or update a KYC document with predefined ID",
        "description": "Create or update a KYC document with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "KYC document resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "KYC document was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          },
          "201": {
            "description": "KYC document was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/kyc-documents/{id}/acceptance": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "KYC Documents"
        ],
        "summary": "Accept a KYC document",
        "description": "Manually override automated status and accept the document\n",
        "responses": {
          "201": {
            "description": "KYC document acceptance was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/kyc-documents/{id}/rejection": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "KYC Documents"
        ],
        "summary": "Reject a KYC document",
        "description": "Manually override automated status and reject the document\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "KYC document resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KycDocumentRejection"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "KYC document rejection was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/KycDocument"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/password-tokens": {
      "get": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Retrieve a list of tokens",
        "description": "Retrieve a list of tokens\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Reset Password Tokens was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResetPasswordToken"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Create a Reset Password Token",
        "description": "Create a Reset Password Token\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "ResetPasswordToken resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Reset Password Token was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ResetPasswordToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/password-tokens/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Retrieve a Reset Password Token",
        "description": "Retrieve a Reset Password Token with specified identifier string\n",
        "responses": {
          "200": {
            "description": "ResetPasswordToken was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ResetPasswordToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Delete a Reset Password Token",
        "description": "Delete a Reset Password Token with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "ResetPasswordToken was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "ResetPasswordToken has related resources and cannot be deleted"
          }
        }
      }
    },
    "/payment-cards": {
      "get": {
        "tags": [
          "Payment Cards"
        ],
        "summary": "Retrieve a list of Payment Cards",
        "description": "Retrieve a list of Payments Cards\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Payment Card was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentCard"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCards = $client->paymentCards()->search([\n    'filter' => 'status:active',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Payment Cards"
        ],
        "summary": "Create a Payment Card",
        "description": "Create a Payment Card\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "PaymentCard resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PaymentCard was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "201": {
            "description": "Payment Card was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardForm = new Rebilly\\Entities\\PaymentCard();\n$paymentCardForm->setCustomerId('customerId');\n$paymentCardForm->setPan('4111111111111111');\n$paymentCardForm->setExpYear(2025);\n$paymentCardForm->setExpMonth(8);\n$paymentCardForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $paymentCard = $client->paymentCards()->create($paymentCardForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payment-cards/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Payment Cards"
        ],
        "summary": "Retrieve a Payment Card",
        "description": "Retrieve a Payment Card with specified identifier string\n",
        "responses": {
          "200": {
            "description": "PaymentCard was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCard = $client->paymentCards()->load('paymentCardId');\n"
          }
        ]
      },
      "patch": {
        "tags": [
          "Payment Cards"
        ],
        "summary": "Update a payment card's values",
        "description": "Update any of the payment card's values except for the pan\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Payment card",
            "schema": {
              "type": "object",
              "properties": {
                "cvv": {
                  "description": "Card's cvv (card verification value).",
                  "type": "string"
                },
                "expMonth": {
                  "description": "Card's expiry month",
                  "type": "string"
                },
                "expYear": {
                  "description": "Card's expiry year",
                  "type": "string"
                },
                "billingAddress": {
                  "description": "Card's billing address",
                  "type": "object",
                  "$ref": "#/definitions/ContactObject"
                },
                "stickyGatewayAccountId": {
                  "description": "Sticky Gateway Account ID",
                  "allOf": [
                    {
                      "$ref": "#/definitions/ResourceId"
                    }
                  ]
                },
                "customFields": {
                  "$ref": "#/definitions/ResourceCustomFields"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment card was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payment Cards"
        ],
        "summary": "Create a payment card with predefined ID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Payment card",
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PaymentCard was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "201": {
            "description": "Payment card was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "description": "Payment card already exists and cannot be updated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardForm = new Rebilly\\Entities\\PaymentCard();\n$paymentCardForm->setCustomerId('customerId');\n$paymentCardForm->setPan('4111111111111111');\n$paymentCardForm->setExpYear(2025);\n$paymentCardForm->setExpMonth(8);\n$paymentCardForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $paymentCard = $client->paymentCards()->create($paymentCardForm, 'paymentCardId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payment-cards/{id}/authorization": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Payment Cards"
        ],
        "summary": "Authorize a Payment Card",
        "description": "Authorize a Payment Card\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Payment Card resource",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "websiteId",
                "currency"
              ],
              "properties": {
                "websiteId": {
                  "description": "The Website ID",
                  "type": "string"
                },
                "currency": {
                  "description": "Currency (three letter code)",
                  "type": "string"
                },
                "gatewayAccountId": {
                  "description": "The Gateway account ID",
                  "type": "string"
                },
                "amount": {
                  "description": "Amount",
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Authorization successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardAuthorizationForm = new Rebilly\\Entities\\PaymentCardAuthorization();\n$paymentCardAuthorizationForm->setWebsiteId('websiteId');\n$paymentCardAuthorizationForm->setCurrency('USD');\n$paymentCardAuthorizationForm->setGatewayAccountId('gatewayAccountId');\n\ntry {\n    $paymentCard = $client->paymentCards()->authorize('paymentCardId', $paymentCardAuthorizationForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payment-cards/{id}/deactivation": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Payment Cards"
        ],
        "summary": "Deactivate a Payment Card",
        "description": "Deactivate a Payment Card\n",
        "responses": {
          "201": {
            "description": "Authorization successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->paymentCards()->deactivate('paymentCardId');\n"
          }
        ]
      }
    },
    "/payment-cards/{id}/matched-rules": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Payment Cards"
        ],
        "summary": "Get matched rules for the payment card",
        "description": "Get matched rules for the payment card",
        "responses": {
          "200": {
            "description": "List of matched rules was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MatchedRule"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/payment-instrument-validation": {
      "get": {
        "tags": [
          "Payment Instrument Validation"
        ],
        "summary": "Retrieve a Payment Instrument validation",
        "description": "Retrieve a Payment Instrument validation with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Successfully retrieved a payment instrument validation",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentInstrumentValidation"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Payment Instrument Validation"
        ],
        "summary": "Validate a payment instrument",
        "description": "Validate a payment instrument\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Payment instrument",
            "schema": {
              "type": "object",
              "required": [
                "method",
                "payementInstrumentId"
              ],
              "properties": {
                "method": {
                  "description": "Payment method",
                  "type": "string"
                },
                "payementInstrumentId": {
                  "description": "Payment instrument ID",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Validation successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentInstrumentValidation"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/payment-instrument-validation/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Payment Instrument Validation"
        ],
        "summary": "Retrieve a list of validated payment instruments",
        "description": "Retrieve a list of validated payment instruments\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of validated payment instrument was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentInstrumentValidation"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/payments": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieve a payment list",
        "description": "Retrieve a payment list\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "name": "Accept",
            "in": "header",
            "type": "string",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "default": "application/json",
            "description": "The response media type"
          }
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Payment list was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Payment"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payments = $client->payments()->search([\n    'filter' => 'currency:USD',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Create a payment",
        "description": "Create a payment\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Payment resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment was processed",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Payment"
              }
            }
          },
          "202": {
            "description": "Payment was accepted",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentForm = new Rebilly\\Entities\\Payment();\n\n$paymentForm->setWebsiteId('websiteId');\n$paymentForm->setCustomerId('customerId');\n$paymentForm->setCurrency('USD');\n$paymentForm->setAmount(1.99);\n\n$data = [\n    'method' => Rebilly\\Entities\\PaymentMethod::METHOD_CASH,\n];\n\n$paymentInstrumentForm = new Rebilly\\Entities\\PaymentMethodInstrument($data);\n\n$paymentForm->setPaymentInstrument($paymentInstrumentForm);\n\ntry {\n    $payment = $client->payments()->create($paymentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/payments/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieve a payment",
        "description": "Retrieve a payment with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Payment was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payment = $client->payments()->load('paymentId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Payments"
        ],
        "summary": "Create a payment with predefined ID",
        "description": "Make a payment with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Payment resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment was processed",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Payment"
              }
            }
          },
          "202": {
            "description": "Payment was accepted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentForm = new Rebilly\\Entities\\Payment();\n\n$paymentForm->setWebsiteId('websiteId');\n$paymentForm->setCustomerId('customerId');\n$paymentForm->setCurrency('USD');\n$paymentForm->setAmount(1.99);\n\n$data = [\n    'method' => Rebilly\\Entities\\PaymentMethod::METHOD_CASH,\n];\n\n$paymentInstrumentForm = new Rebilly\\Entities\\PaymentMethodInstrument($data);\n\n$paymentForm->setPaymentInstrument($paymentInstrumentForm);\n\ntry {\n    $payment = $client->payments()->update('paymentId', $paymentForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/paypal-accounts": {
      "get": {
        "tags": [
          "PayPal Accounts"
        ],
        "summary": "Retrieve a list of PayPal accounts",
        "description": "Retrieve a list of PayPal Accounts\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of PayPal Accounts was retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PayPalAccount"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payPalAccounts = $client->payPalAccounts()->search([\n    'filter' => 'status:active',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "PayPal Accounts"
        ],
        "summary": "Create a PayPal Account",
        "description": "Create a PayPal Account\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "PayPalAccount resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayPalAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "PayPal Account was created",
            "schema": {
              "$ref": "#/definitions/PayPalAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payPalForm = new Rebilly\\Entities\\PayPalAccount();\n$payPalForm->setCustomerId('customerId');\n$payPalForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $payPalAccount = $client->payPalAccounts()->create($payPalForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/paypal-accounts/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "PayPal Accounts"
        ],
        "summary": "Retrieve a PayPal Account",
        "description": "Retrieve a PayPal Account with specified identifier string\n",
        "responses": {
          "200": {
            "description": "PayPal Account was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PayPalAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payPalAccount = $client->payPalAccounts()->load('payPalAccountId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "PayPal Accounts"
        ],
        "summary": "Create a PayPal account with predefined ID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "PayPal Account",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PayPalAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "PayPal Account was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PayPalAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "description": "PayPal Account exist and cannot be updated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payPalForm = new Rebilly\\Entities\\PayPalAccount();\n$payPalForm->setCustomerId('customerId');\n$payPalForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $payPalAccount = $client->payPalAccounts()->create($payPalForm, 'payPalAccountId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/paypal-accounts/{id}/activation": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "PayPal Accounts"
        ],
        "summary": "Activate a PayPal Account",
        "description": "Activate a PayPal Account\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "PayPal Account resource",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "websiteId",
                "currency"
              ],
              "properties": {
                "websiteId": {
                  "description": "The Website ID",
                  "type": "string"
                },
                "currency": {
                  "description": "Currency (three letter code)",
                  "type": "string"
                },
                "amount": {
                  "description": "The amount to authorize",
                  "type": "number",
                  "format": "double",
                  "default": 1
                },
                "redirectURLs": {
                  "description": "Redirect URLs",
                  "type": "object"
                },
                "gatewayAccountId": {
                  "description": "The Gateway Account ID which use to send transactions",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Activate successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PayPalAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$activationData = [\n    'websiteId' => 'testWebsiteId',\n    'currency' => 'USD',\n];\n\ntry {\n    $client->payPalAccounts()->activate($activationData, 'payPalAccountId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/paypal-accounts/{id}/deactivation": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "PayPal Accounts"
        ],
        "summary": "Deactivate a PayPal Account",
        "description": "Deactivate a PayPal Account\n",
        "responses": {
          "201": {
            "description": "Deactivate successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PayPalAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->payPalAccounts()->deactivate('payPalAccountId');\n"
          }
        ]
      }
    },
    "/plans": {
      "get": {
        "tags": [
          "Plans"
        ],
        "summary": "Retrieve a list of plans",
        "description": "Retrieve a list of plans\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Plans was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Plan"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$plans = $client->plans()->search([\n    'filter' => 'name:TestPlan',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Plans"
        ],
        "summary": "Create a plan",
        "description": "Create a plan\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Plan resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Plan was created",
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$planForm = new Rebilly\\Entities\\Plan();\n$planForm->setName('TestPlan');\n$planForm->setCurrency('USD');\n$planForm->setTrialAmount(1);\n$planForm->setTrialPeriodUnit('day');\n$planForm->setTrialPeriodLength(1);\n\ntry {\n    $plan = $client->plans()->create($planForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/plans/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Plans"
        ],
        "summary": "Retrieve a plan",
        "description": "Retrieve a plan with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Plan was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$plan = $client->plans()->load('planId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Plans"
        ],
        "summary": "Create or update a Plan with predefined ID",
        "description": "Create or update a Plan with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Plan resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "201": {
            "description": "Plan was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$planForm = new Rebilly\\Entities\\Plan();\n$planForm->setName('TestPlan');\n$planForm->setCurrency('USD');\n$planForm->setTrialAmount(1);\n$planForm->setTrialPeriodUnit('day');\n$planForm->setTrialPeriodLength(1);\n\ntry {\n    $plan = $client->plans()->update('planId', $planForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Plans"
        ],
        "summary": "Delete a Plan",
        "description": "Delete a Plan with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Plan was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$client->plans()->delete('planId');\n"
          }
        ]
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve a list of products",
        "description": "Retrieve a list of products\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of products was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create a Product",
        "description": "Create a Product\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Product resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Product was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/products/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve a product",
        "description": "Retrieve a product with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Product was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Create a product with predefined ID",
        "description": "Create a product with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Product resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "201": {
            "description": "Product was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete a product",
        "description": "Delete a product with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Product was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/queue/payments": {
      "get": {
        "tags": [
          "Payments"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "summary": "Retrieve a scheduled payment list",
        "description": "Retrieve a scheduled payment list\n",
        "responses": {
          "200": {
            "description": "Successful retrieve the payments list that still waiting to be processed",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Payment"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payments = $client->payments()->searchInQueue([\n    'filter' => 'currency:USD',\n]);\n"
          }
        ]
      }
    },
    "/queue/payments/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieve a scheduled payment",
        "description": "Retrieve a payment with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Successful retrieve the payment that still waiting to be processed",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "303": {
            "description": "Payment was successfully processed and moved out from queue",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payment = $client->payments()->loadFromQueue('paymentId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Payments"
        ],
        "summary": "Update pending payment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Payment resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Payment is already handled and cannot be updated"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/shipping-zones": {
      "get": {
        "tags": [
          "Shipping Zones"
        ],
        "summary": "Retrieve a list of shipping zones",
        "description": "Retrieve a list of shipping zones\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of shipping zones was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ShippingZone"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Shipping Zones"
        ],
        "summary": "Create a Shipping Zone",
        "description": "Create a Shipping Zone\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Shipping Zone resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Shipping Zone was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/shipping-zones/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Shipping Zones"
        ],
        "summary": "Retrieve a shipping zone",
        "description": "Retrieve a shipping zone with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Shipping zone was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Shipping Zones"
        ],
        "summary": "Create a shipping zone with predefined ID",
        "description": "Create a shipping zone with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Shipping zone resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shipping zone was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          },
          "201": {
            "description": "Shipping zone was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ShippingZone"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": [
          "Shipping Zones"
        ],
        "summary": "Delete a shipping zone",
        "description": "Delete a shipping zone with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Shipping zone was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/subscription-cancellations": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Retrieve a list of cancellations",
        "description": "Retrieve a list of cancellations for all subscriptions",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cancellations was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cancellation"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Cancel a subscription",
        "description": "Cancel a subscription or preview the cancellation parameters before that",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Cancellation resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cancellation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Cancellation was created, subscription is or will be deactivated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Cancellation"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptionCancelForm = new Rebilly\\Entities\\SubscriptionCancel();\n$subscriptionCancelForm->setEffectiveTime(new DateTime());\n\ntry {\n    $subscription = $client->subscriptions()->cancel('subscriptionId', $subscriptionCancelForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/subscription-cancellations/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Retrieve a subscription cancellatopn",
        "description": "Retrieve a subscription cancellatopn with specified identifier string",
        "responses": {
          "200": {
            "description": "Cancellation was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Cancellation"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Cancel a subscription",
        "description": "Cancel a subscription",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Cancellation resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cancellation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cancellation was updated, subscription is or will be deactivated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Cancellation"
            }
          },
          "201": {
            "description": "Cancellation was created, subscription is or will be deactivated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Cancellation"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Delete a cancellation",
        "description": "Delete a subscription's cancellation. Only draft can be deleted.",
        "responses": {
          "204": {
            "description": "Cancellaton was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Cancellaton cannot be deleted"
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Retrieve a list of subscriptions",
        "description": "Retrieve a list of subscriptions\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "name": "Accept",
            "in": "header",
            "type": "string",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "default": "application/json",
            "description": "The response media type"
          }
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "A list of subscriptions was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subscription"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptions = $client->subscriptions()->search([\n    'filter' => 'customerId:testCustomerId',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Create a subscription",
        "description": "Create a subscription\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Subscription resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscription was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptionForm = new Rebilly\\Entities\\Subscription();\n$subscriptionForm->setCustomerId('customerId');\n$subscriptionForm->setWebsiteId('websiteId');\n$subscriptionForm->setPlanId('planId');\n$subscriptionForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $subscription = $client->subscriptions()->create($subscriptionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/subscriptions/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Retrieve a subscription",
        "description": "Retrieve a subscription with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Subscription was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscription = $client->subscriptions()->load('subscriptionId');\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Create or update a subscription with predefined ID",
        "description": "Create or update a subscription with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Subscription resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "201": {
            "description": "Subscription was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptionForm = new Rebilly\\Entities\\Subscription();\n$subscriptionForm->setCustomerId('customerId');\n$subscriptionForm->setWebsiteId('websiteId');\n$subscriptionForm->setPlanId('planId');\n$subscriptionForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\ntry {\n    $subscription = $client->subscriptions()->update('subscriptionId', $subscriptionForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/subscriptions/{id}/change-plan": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Change a subscription's plan",
        "description": "Change a subscription's plan and designate when and if there should be pro rata credits given.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Change the plan",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionChange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription was changed",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscriptionChangePlanForm = new Rebilly\\Entities\\SubscriptionChangePlan();\n$subscriptionChangePlanForm->setPlanId('newPlanId');\n$subscriptionChangePlanForm->setRenewalPolicy('retain');\n$subscriptionChangePlanForm->setPreview(true);\n$subscriptionChangePlanForm->setProrated(true);\n$subscriptionChangePlanForm->setEffectiveTime('2018-02-02 00:00:00');\n\ntry {\n    $subscription = $client->subscriptions()->changePlan('subscriptionId', $subscriptionChangePlanForm);\n    echo $subscription->getLineItemSubtotal();\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/subscriptions/{id}/interim-invoice": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Issue an interim invoice for a subscription",
        "description": "Issue an interim invoice for a subscription, typically used in conjunction with plan changes and pro rata adjustments.\nThis process creates an invoice, adds the subscription's line items to the invoice, and issues the invoice, and applies\npayment to it if a transaction id is supplied.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Issue an interim invoice",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionInvoice"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Invoice was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/subscriptions/{id}/lead-source": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Retrieve a subscription's Lead Source",
        "description": "Retrieve a Lead Source of given subscription\n",
        "responses": {
          "200": {
            "description": "Lead Source was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscription = $client->subscriptions()->load('subscriptionId');\n$leadSource = $subscription->getLeadSource();\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Create a Lead Source for a Subscription",
        "description": "Create a Lead Source for a Subscription\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Lead Source resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lead Source was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "201": {
            "description": "Lead Source was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$leadSourceForm = new Rebilly\\Entities\\LeadSource();\n$leadSourceForm->setSource('TestSource');\n$leadSourceForm->setCampaign('TestCampaign');\n\ntry {\n    $subscription = $client->subscriptions()->updateLeadSource('subscriptionId', $leadSourceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Delete a Lead Source for a Subscription",
        "description": "Delete a Lead Source that belongs to a certain Subscription\n",
        "responses": {
          "204": {
            "description": "Lead Source was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Lead Source cannot be deleted"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$subscription = $client->subscriptions()->deleteLeadSource('subscriptionId');\n"
          }
        ]
      }
    },
    "/subscriptions/{id}/matched-rules": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Get matched rules for the subscription",
        "description": "Get matched rules for the subscription",
        "responses": {
          "200": {
            "description": "List of matched rules was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MatchedRule"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/tokens": {
      "get": {
        "tags": [
          "Payment Tokens"
        ],
        "summary": "Retrieve a list of tokens",
        "description": "Retrieve a list of tokens\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tokens was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentToken"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardTokens = $client->paymentCardTokens()->search([\n    'filter' => 'token:string',\n]);\n"
          }
        ]
      },
      "post": {
        "tags": [
          "Payment Tokens"
        ],
        "summary": "Create a payment token",
        "description": "Create a token\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "PaymentToken resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          }
        ],
        "security": [
          {
            "PublishableApiKey": []
          }
        ],
        "responses": {
          "201": {
            "description": "Token was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardTokenForm = new Rebilly\\Entities\\PaymentCardToken();\n$paymentCardTokenForm->setBillingAddress([\n    'firstName' => 'John',\n    'lastName' => 'Doe',\n    'organization' => 'Test LTD',\n    'address' => 'Test street 5',\n    'address2' => 'Test house 5',\n    'city' => 'New York',\n    'region' => 'Long Island',\n    'country' => 'US',\n    'postalCode' => '123456',\n    'emails' => [\n        [\n            'label' => 'main',\n            'value' => 'johndoe@testemail.com',\n            'primary' => true,\n        ],\n        [\n            'label' => 'secondary',\n            'value' => 'otheremail@testemail.com',\n        ],\n    ],\n    'phoneNumbers' => [\n        [\n            'label' => 'work',\n            'value' => '+123456789',\n            'primary' => true,\n        ],\n        [\n            'label' => 'home',\n            'value' => '+9874654321',\n        ],\n    ],\n]);\n\n$paymentInstrumentForm = new Entities\\PaymentInstruments\\PaymentCardPaymentInstrument();\n$paymentInstrumentForm->setPan('4111111111111111');\n$paymentInstrumentForm->setExpYear(2025);\n$paymentInstrumentForm->setExpMonth(8);\n$paymentInstrumentForm->setCvv(123);\n\n$paymentCardTokenForm->setPaymentInstrument($paymentInstrumentForm);\n\ntry {\n    $paymentCardToken = $client->paymentCardTokens()->create($paymentCardTokenForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/tokens/{token}": {
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "description": "The token identifier string",
          "type": "string",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Payment Tokens"
        ],
        "summary": "Retrieve a token",
        "description": "Retrieve a token with specified identifier string\n",
        "security": [
          {
            "PublishableApiKey": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$paymentCardToken = $client->paymentCardTokens()->load('tokenId');\n"
          }
        ]
      }
    },
    "/tokens/{token}/expiration": {
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "description": "The token identifier string",
          "type": "string",
          "required": true
        }
      ],
      "post": {
        "tags": [
          "Payment Tokens"
        ],
        "summary": "Expire a token",
        "description": "Expire a token\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "PaymentToken resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Token expiration successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $paymentCardToken = $client->paymentCardTokens()->expire('tokenId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieve a list of transactions",
        "description": "Retrieve a list of transactions\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionQuery"
          },
          {
            "$ref": "#/parameters/collectionSort"
          },
          {
            "name": "Accept",
            "in": "header",
            "type": "string",
            "enum": [
              "application/json",
              "text/csv"
            ],
            "default": "application/json",
            "description": "The response media type"
          }
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "A list of transactions was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$transactions = $client->transactions()->search([\n    'filter' => 'result:approved',\n]);\n"
          }
        ]
      }
    },
    "/transactions/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieve a Transaction",
        "description": "Retrieve a Transaction with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Transaction was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$transaction = $client->transactions()->load('transactionId');\n"
          }
        ]
      }
    },
    "/transactions/{id}/cancel": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Cancel a pending or suspended transaction",
        "description": "Cancel a scheduled transaction. Once handled a transaction cannot be canceled",
        "responses": {
          "201": {
            "description": "Successful cancel the payment",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "try {\n    $payment = $client->transactions()->cancel('transactionId');\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      }
    },
    "/transactions/{id}/gateway-logs": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieve a Transaction Gateway Logs",
        "description": "Retrieve Gateway communication Logs for Transaction with specified identifier string",
        "responses": {
          "200": {
            "description": "Logs were retrieved successfully",
            "schema": {
              "$ref": "#/definitions/TransactionGatewayLog"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/transactions/{id}/lead-source": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieve a transaction's Lead Source",
        "description": "Retrieve a Lead Source of given transaction\n",
        "responses": {
          "200": {
            "description": "Lead Source was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$transaction = $client->transactions()->load('transactionId');\n$leadSource = $transaction->getLeadSource();\n"
          }
        ]
      },
      "put": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create a Lead Source for a transaction",
        "description": "Create a Lead Source for a transaction\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Lead Source resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lead Source was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "201": {
            "description": "Lead Source was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$leadSourceForm = new Rebilly\\Entities\\LeadSource();\n$leadSourceForm->setSource('TestSource');\n$leadSourceForm->setCampaign('TestCampaign');\n\ntry {\n    $transaction = $client->transactions()->updateLeadSource('transactionId', $leadSourceForm);\n} catch (UnprocessableEntityException $e) {\n    echo $e->getMessage();\n}\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "Transactions"
        ],
        "summary": "Delete a Lead Source for a transaction",
        "description": "Delete a Lead Source that belongs to a certain transaction\n",
        "responses": {
          "204": {
            "description": "Lead Source was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Lead Source cannot be deleted"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$payment = $client->transactions()->deleteLeadSource('transactionId');\n"
          }
        ]
      }
    },
    "/transactions/{id}/matched-rules": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Get matched rules for the transaction",
        "description": "Get matched rules for the transaction",
        "responses": {
          "200": {
            "description": "List of matched rules was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MatchedRule"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/transactions/{id}/refund": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Refund a Transaction",
        "description": "Refund a Transaction with specified identifier string.\nNote that the refund will be in the same currency as the original transaction.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionRefund"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Transaction was refunded successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$transaction = $client->transactions()->refund('transactionId', 1.99);\n"
          }
        ]
      }
    }
  },
  "definitions": {
    "AmountRestrictions": {
      "type": "object",
      "required": [
        "currency",
        "min"
      ],
      "properties": {
        "currency": {
          "description": "Currency (three letter ISO 4217 code)",
          "type": "string"
        },
        "min": {
          "description": "The minimum amount allowed",
          "type": "number",
          "format": "double",
          "minimum": 0
        },
        "max": {
          "description": "The maximum amount allowed",
          "type": "number",
          "format": "double",
          "minimum": 0
        }
      }
    },
    "Attachment": {
      "type": "object",
      "required": [
        "fileId",
        "relatedId",
        "relatedType"
      ],
      "properties": {
        "id": {
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "fileId": {
          "description": "Linked File object id",
          "type": "string"
        },
        "relatedType": {
          "description": "Linked object type",
          "type": "string",
          "enum": [
            "customer",
            "dispute",
            "invoice",
            "note",
            "payment",
            "plan",
            "product",
            "subscription",
            "transaction"
          ]
        },
        "relatedId": {
          "description": "Linked object Id",
          "type": "string"
        },
        "name": {
          "description": "The Original Attachment name",
          "type": "string"
        },
        "description": {
          "description": "The Attachment description",
          "type": "string"
        },
        "createdTime": {
          "description": "Creation date/time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Latest update date/time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 3,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/FileLink"
            },
            {
              "$ref": "#/definitions/AttachmentResourceLink"
            }
          ]
        }
      }
    },
    "AuthenticationOptions": {
      "type": "object",
      "properties": {
        "passwordPattern": {
          "description": "Allowed password pattern",
          "type": "string"
        },
        "credentialTtl": {
          "description": "The default lifetime of the credential in seconds",
          "type": "integer"
        },
        "authTokenTtl": {
          "description": "The default lifetime of the auth-token in seconds",
          "type": "integer"
        },
        "resetTokenTtl": {
          "description": "The default lifetime of the reset-token in seconds",
          "type": "integer"
        }
      }
    },
    "AuthenticationToken": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "token": {
          "description": "The token identifier string",
          "type": "string",
          "readOnly": true
        },
        "username": {
          "description": "The token's username",
          "type": "string"
        },
        "password": {
          "description": "The token's password (write-only)",
          "type": "string",
          "format": "password"
        },
        "credentialId": {
          "description": "The credential's ID",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The token's customer ID",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "expiredTime": {
          "description": "Token's expired time",
          "type": "string",
          "format": "date-time"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "BankAccount": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The bank account identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The Customer's ID.",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "bankName": {
          "description": "Bank's name.",
          "type": "string"
        },
        "routingNumber": {
          "description": "Bank's Routing Number. Required if bank account is not created from Token. This field is write-only",
          "type": "string"
        },
        "accountNumber": {
          "description": "Bank's Account Number. Required if bank account is not created from Token. This field is write-only",
          "type": "string"
        },
        "accountType": {
          "description": "Banks's Account type. Required if bank account is not created from Token",
          "type": "string"
        },
        "token": {
          "description": "Bank Account Token. Use without any other fields",
          "type": "string"
        },
        "address": {
          "description": "The Address. Required if bank account is not created from Token",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "status": {
          "description": "Bank Account status",
          "type": "string",
          "enum": [
            "active",
            "deactivated"
          ]
        },
        "createdTime": {
          "description": "Bank Account created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Bank Account updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ]
        }
      }
    },
    "Blacklist": {
      "type": "object",
      "required": [
        "type",
        "value"
      ],
      "properties": {
        "id": {
          "description": "The blacklist identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "type": {
          "description": "The blacklist type",
          "type": "string",
          "enum": [
            "payment-card-id",
            "customer-id",
            "email",
            "ip-address",
            "country",
            "fingerprint",
            "bin"
          ]
        },
        "value": {
          "description": "The blacklist value",
          "type": "string"
        },
        "expiredTime": {
          "description": "The blacklist expired time",
          "type": "string",
          "format": "date-time"
        },
        "createdTime": {
          "description": "The blacklist created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The blacklist updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Cancellation": {
      "type": "object",
      "required": [
        "subscriptionId",
        "churnTime"
      ],
      "properties": {
        "id": {
          "description": "Cancellation identifier",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "subscriptionId": {
          "description": "Identifier of the canceled subscription",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "proratedInvoiceId": {
          "description": "Identifier of the invoice on which the cancellation proration is calculated.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "appliedInvoiceId": {
          "description": "The identifier of the invoice where the cancellation fees or credits are applied.",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "canceledBy": {
          "description": "Who did the cancellation",
          "type": "string",
          "default": "customer",
          "enum": [
            "merchant",
            "customer"
          ]
        },
        "reason": {
          "description": "Cancellation reason",
          "type": "string",
          "default": "other",
          "enum": [
            "did-not-use",
            "did-not-want",
            "missing-features",
            "bugs-or-problems",
            "do-not-remember",
            "risk-warning",
            "contract-expired",
            "too-expensive",
            "other",
            "billing-failure"
          ]
        },
        "description": {
          "description": "Cancel reason description in free form",
          "type": "string",
          "maxLength": 255
        },
        "prorated": {
          "description": "Defines if the customer gets a pro-rata credit for the time remaining between `churnTime` and\nsubscription's next renewal time.\n",
          "type": "boolean",
          "default": false
        },
        "status": {
          "description": "\"draft\" defines that the cancellation isn't applied on an invoice and subscription but\ncan be inspected to see the charge.\n\"confirmed\" will set a subscription to be canceled when the `churnTime` is reached.\n\"completed\" is a read-only status which is set by the system when the churnTime is reached.\nThe cancellation may not be changed or deleted when the status is \"completed\".\n",
          "type": "string",
          "default": "confirmed",
          "enum": [
            "draft",
            "confirmed",
            "completed",
            "revoked"
          ]
        },
        "canceledTime": {
          "description": "The cancellation time (when the status is confirmed which is by default unless specified \"draft\").",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "createdTime": {
          "description": "The time of resource creation (when it is posted).",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "churnTime": {
          "description": "The time when the subscription will be deactivated.",
          "type": "string",
          "format": "date-time"
        },
        "lineItems": {
          "description": "Items to be added to the new invoice. Proration item is generated and added automatically.",
          "type": "array",
          "items": {
            "type": "object",
            "description": "Line item",
            "required": [
              "type",
              "unitPriceAmount",
              "unitPriceCurrency"
            ],
            "properties": {
              "type": {
                "description": "Type of line item",
                "type": "string",
                "enum": [
                  "debit",
                  "credit"
                ]
              },
              "description": {
                "description": "Description of line item",
                "type": "string"
              },
              "unitPriceAmount": {
                "description": "Unit price of the line item",
                "type": "number",
                "format": "double",
                "example": 49.95
              },
              "unitPriceCurrency": {
                "description": "Currency ISO code",
                "type": "string",
                "example": "USD"
              },
              "quantity": {
                "description": "Quantity of line item",
                "type": "integer",
                "default": 1,
                "example": 1
              },
              "periodStartTime": {
                "description": "Date-time when the period begins for this item",
                "type": "string",
                "format": "date-time"
              },
              "periodEndTime": {
                "description": "Date-time when the period ends for this item",
                "type": "string",
                "format": "date-time"
              }
            }
          }
        },
        "lineItemSubtotal": {
          "description": "Subtotal of the line items which will be added after the subscription's cancellation",
          "readOnly": true,
          "type": "number",
          "example": 49.95
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Contact": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The contact identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The contact customer ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "firstName": {
          "description": "The contact first name",
          "type": "string"
        },
        "lastName": {
          "description": "The contact last name",
          "type": "string"
        },
        "organization": {
          "description": "The contact organization",
          "type": "string"
        },
        "address": {
          "description": "The contact street address",
          "type": "string",
          "maxLength": 60
        },
        "address2": {
          "description": "The contact street address (second line)",
          "type": "string",
          "maxLength": 60
        },
        "city": {
          "description": "The contact city",
          "type": "string",
          "maxLength": 45
        },
        "region": {
          "description": "The contact region (state)",
          "type": "string",
          "maxLength": 45
        },
        "country": {
          "description": "The contact country ISO Alpha-2 code",
          "type": "string",
          "pattern": "^[A-Z]{2}$"
        },
        "postalCode": {
          "description": "The contact postal code",
          "type": "string",
          "maxLength": 10
        },
        "phoneNumbers": {
          "$ref": "#/definitions/ContactPhoneNumbers"
        },
        "emails": {
          "$ref": "#/definitions/ContactEmails"
        },
        "hash": {
          "description": "A hash that can be used to compare multiple contacts for identical attribute values, excluding id, customer id, createdTime, updatedTime.",
          "type": "string",
          "maxLength": 40,
          "example": "056ae6d97c788b9e98b049ebafd7b229bf852221"
        },
        "createdTime": {
          "description": "The contact created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The contact updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ]
        }
      }
    },
    "ContactEmails": {
      "description": "The contact emails",
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "label",
          "value"
        ],
        "properties": {
          "label": {
            "description": "The email label",
            "type": "string"
          },
          "value": {
            "description": "The email value",
            "type": "string"
          },
          "primary": {
            "description": "True if email is primary",
            "type": "boolean"
          }
        }
      }
    },
    "ContactObject": {
      "type": "object",
      "properties": {
        "firstName": {
          "description": "The contact first name",
          "type": "string"
        },
        "lastName": {
          "description": "The contact last name",
          "type": "string"
        },
        "organization": {
          "description": "The contact organization",
          "type": "string"
        },
        "address": {
          "description": "The contact street address",
          "type": "string",
          "maxLength": 60
        },
        "address2": {
          "description": "The contact street address (second line)",
          "type": "string",
          "maxLength": 60
        },
        "city": {
          "description": "The contact city",
          "type": "string",
          "maxLength": 45
        },
        "region": {
          "description": "The contact region (state)",
          "type": "string",
          "maxLength": 45
        },
        "country": {
          "description": "The contact country ISO Alpha-2 code",
          "type": "string",
          "pattern": "^[A-Z]{2}$"
        },
        "postalCode": {
          "description": "The contact postal code",
          "type": "string",
          "maxLength": 10
        },
        "phoneNumbers": {
          "$ref": "#/definitions/ContactPhoneNumbers"
        },
        "emails": {
          "$ref": "#/definitions/ContactEmails"
        },
        "hash": {
          "description": "A hash that can be used to compare multiple contacts for identical attribute values",
          "type": "string",
          "maxLength": 40,
          "example": "056ae6d97c788b9e98b049ebafd7b229bf852221",
          "readOnly": true
        }
      }
    },
    "ContactPhoneNumbers": {
      "description": "The contact phone numbers",
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "label",
          "value"
        ],
        "properties": {
          "label": {
            "description": "The phone label",
            "type": "string"
          },
          "value": {
            "description": "The phone value",
            "type": "string"
          },
          "primary": {
            "description": "True if phone is primary",
            "type": "boolean"
          }
        }
      }
    },
    "Coupon": {
      "type": "object",
      "description": "Coupons and Discounts",
      "required": [
        "discount",
        "issuedTime"
      ],
      "properties": {
        "redemptionCode": {
          "description": "Coupon's redemption code",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "discount": {
          "$ref": "#/definitions/Discount"
        },
        "restrictions": {
          "description": "Coupon restrictions",
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/CouponRestriction"
            }
          ]
        },
        "redemptionsCount": {
          "type": "integer",
          "description": "Coupon's redemptions count",
          "minimum": 0,
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "If coupon enabled",
          "readOnly": true,
          "enum": [
            "issued",
            "expired"
          ]
        },
        "description": {
          "type": "string",
          "description": "Your coupon description. When it is not empty this is used for invoice discount item description,\notherwise the item's description uses coupon's redemptionCode like 'Coupon \"redemptionCode\"'\n"
        },
        "issuedTime": {
          "description": "Coupon's issued time (start time)",
          "type": "string",
          "format": "date-time"
        },
        "expiredTime": {
          "description": "Coupon's expire time (end time)",
          "type": "string",
          "format": "date-time"
        },
        "createdTime": {
          "description": "Coupon created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Coupon updated time.",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "CouponExpiration": {
      "type": "object",
      "required": [
        "expiredTime"
      ],
      "properties": {
        "expiredTime": {
          "description": "The coupon's expiry time, must be greater than the issued time. Null or empty string will immediately expire the coupon.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CouponRedemption": {
      "type": "object",
      "description": "Coupons redemption log",
      "properties": {
        "id": {
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "redemptionCode": {
          "description": "Coupon's redemption code",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "Customer's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "additionalRestrictions": {
          "description": "Additional restrictions for coupon's redemptions",
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/RedemptionRestriction"
            }
          ]
        },
        "createdTime": {
          "description": "Coupon redeem time",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "canceledTime": {
          "description": "Coupon redemption canceled time",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "CouponRestriction": {
      "description": "Coupon restrictions",
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "description": "Coupon's restriction type",
          "type": "string",
          "enum": [
            "discounts-per-redemption",
            "minimum-order-amount",
            "redemptions-per-customer",
            "restrict-to-invoices",
            "restrict-to-plans",
            "restrict-to-subscriptions",
            "total-redemptions"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "discounts-per-redemption": {
      "description": "discounts-per-redemption restrictions",
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "type": "object",
          "required": [
            "quantity"
          ],
          "properties": {
            "quantity": {
              "type": "integer",
              "description": "Restriction quantity"
            }
          }
        }
      ]
    },
    "minimum-order-amount": {
      "description": "minimum-order-amount restrictions",
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "type": "object",
          "required": [
            "amount",
            "currency"
          ],
          "properties": {
            "amount": {
              "type": "integer",
              "description": "Minimum order quantity"
            },
            "currency": {
              "type": "string",
              "description": "Minimum order currency"
            }
          }
        }
      ]
    },
    "redemptions-per-customer": {
      "description": "Quantity per Customer restrictions",
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "type": "object",
          "required": [
            "quantity"
          ],
          "properties": {
            "quantity": {
              "type": "integer",
              "description": "Restriction value"
            }
          }
        }
      ]
    },
    "restrict-to-invoices": {
      "description": "restrict-to-invoices restrictions",
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "type": "object",
          "required": [
            "invoiceIds"
          ],
          "properties": {
            "invoiceIds": {
              "type": "array",
              "description": "Invoice IDs coupon can be applied to",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "restrict-to-plans": {
      "description": "restrict-to-plans restrictions",
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "type": "object",
          "required": [
            "planIds"
          ],
          "properties": {
            "planIds": {
              "type": "array",
              "description": "Plan IDs coupon can be applied to",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "restrict-to-subscriptions": {
      "description": "restrict-to-subscriptions restrictions",
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "type": "object",
          "required": [
            "subscriptionIds"
          ],
          "properties": {
            "subscriptionIds": {
              "type": "array",
              "description": "Subscription IDs coupon can be applied to",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "total-redemptions": {
      "description": "total-redemptions restrictions",
      "allOf": [
        {
          "$ref": "#/definitions/CouponRestriction"
        },
        {
          "$ref": "#/definitions/RedemptionRestriction"
        },
        {
          "type": "object",
          "required": [
            "quantity"
          ],
          "properties": {
            "quantity": {
              "type": "integer",
              "description": "Total redemptions quantity"
            }
          }
        }
      ]
    },
    "Discount": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "description": "Discount type",
          "type": "string",
          "enum": [
            "fixed",
            "percent"
          ]
        }
      }
    },
    "fixed": {
      "description": "Coupon fixed amount discount",
      "allOf": [
        {
          "$ref": "#/definitions/Discount"
        },
        {
          "type": "object",
          "required": [
            "amount",
            "currency"
          ],
          "properties": {
            "amount": {
              "description": "Discount amount",
              "type": "number",
              "format": "double"
            },
            "currency": {
              "description": "Discount currency",
              "type": "string"
            }
          }
        }
      ]
    },
    "percent": {
      "description": "Coupon percent discount",
      "allOf": [
        {
          "$ref": "#/definitions/Discount"
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "description": "Discount percent",
              "type": "number",
              "format": "double"
            }
          }
        }
      ]
    },
    "InvoiceDiscount": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "redemptionCode": {
          "description": "Coupon's redemption code",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "redemptionId": {
          "description": "Redemption ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "amount": {
          "description": "Total amount that was discounted by this Coupon",
          "type": "number",
          "format": "double"
        },
        "description": {
          "type": "string",
          "description": "Discount description"
        }
      }
    },
    "RedemptionRestriction": {
      "description": "Redemption restrictions",
      "type": "object",
      "discriminator": "type",
      "properties": {
        "type": {
          "description": "Redemption's additional restriction type",
          "type": "string",
          "enum": [
            "discounts-per-redemption",
            "minimum-order-amount",
            "restrict-to-invoices",
            "restrict-to-plans",
            "restrict-to-subscriptions"
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "Credential": {
      "type": "object",
      "required": [
        "username",
        "password",
        "customerId"
      ],
      "properties": {
        "id": {
          "description": "The credential identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "username": {
          "description": "Credential's username",
          "type": "string"
        },
        "password": {
          "description": "The credential's password",
          "type": "string",
          "format": "password"
        },
        "customerId": {
          "description": "The credential's customer ID",
          "type": "string"
        },
        "expiredTime": {
          "description": "The credential's expired time",
          "type": "string",
          "format": "date-time"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ]
        }
      }
    },
    "Condition": {
      "type": "object",
      "discriminator": "op",
      "properties": {
        "op": {
          "type": "string",
          "description": "The condition operation",
          "enum": [
            "and",
            "or",
            "not",
            "between",
            "equals",
            "in",
            "gt",
            "gte",
            "lt",
            "lte"
          ]
        }
      },
      "required": [
        "op"
      ]
    },
    "and": {
      "type": "object",
      "description": "Logical AND",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical"
        }
      ]
    },
    "between": {
      "type": "object",
      "description": "Between condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "min": {
              "type": "string"
            },
            "max": {
              "type": "string"
            }
          },
          "required": [
            "path",
            "min",
            "max"
          ]
        }
      ]
    },
    "compare": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "path",
        "value"
      ]
    },
    "equals": {
      "type": "object",
      "description": "Equals condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ]
    },
    "gt": {
      "type": "object",
      "description": "Greater than condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ]
    },
    "gte": {
      "type": "object",
      "description": "Greater than or equals condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ]
    },
    "in": {
      "type": "object",
      "description": "In condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "values": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "path",
            "values"
          ]
        }
      ]
    },
    "logical-not": {
      "type": "object",
      "properties": {
        "condition": {
          "$ref": "#/definitions/Condition"
        }
      },
      "required": [
        "condition"
      ],
      "example": {
        "operation": "not",
        "condition": {
          "operation": "equals",
          "path": "/name",
          "value": "John Dou"
        }
      }
    },
    "logical": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "minItems": 2,
          "items": {
            "$ref": "#/definitions/Condition"
          }
        }
      },
      "required": [
        "conditions"
      ]
    },
    "lt": {
      "type": "object",
      "description": "Less than condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ]
    },
    "lte": {
      "type": "object",
      "description": "Less than or equals condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ]
    },
    "not": {
      "type": "object",
      "description": "Logical NOT",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical-not"
        }
      ]
    },
    "or": {
      "type": "object",
      "description": "Logical OR",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical"
        }
      ]
    },
    "Customer": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The customer identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "defaultPaymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "createdTime": {
          "description": "The customer created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The customer updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "primaryAddress": {
          "$ref": "#/definitions/ContactObject"
        },
        "lifetimeRevenue": {
          "$ref": "#/definitions/CustomerLifetimeRevenue"
        },
        "invoiceCount": {
          "description": "An auto-incrementing number based on the sequence of invoices. If set to 0, then this record is a Lead, otherwise is a Customer",
          "readOnly": true,
          "type": "integer"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 3,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/NotesLink"
            },
            {
              "$ref": "#/definitions/DefaultPaymentInstrumentLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ]
        }
      }
    },
    "CustomerLifetimeRevenue": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "currency": {
          "description": "Merchant's reporting currency",
          "type": "string"
        },
        "amount": {
          "description": "Revenue amount in Merchant's reporting currency",
          "type": "number",
          "format": "double"
        },
        "amountUsd": {
          "description": "Revenue amount in USD",
          "type": "number",
          "format": "double"
        }
      }
    },
    "CustomField": {
      "description": "A separate Custom Field schema",
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "description": "The name of the custom field",
          "type": "string"
        },
        "type": {
          "description": "Type value    | Description\n------------- | -------------\narray         | An array of strings up to 255 characters, maximum size is 1000 elements\nboolean       | true or false\ndate          | String of format \"full-date\" (YYYY-MM-DD) from RFC-3339 (full-date)\ndatetime      | String of format \"date-time\" (YYYY-MM-DDTHH:MM:SSZ) from RFC-3339 (date-time)\ninteger       | Cardinal value of -2^31..2^31-1\nnumber        | Float value. It can take cardinal values also which are interpreted as float\nstring        | Regular string up to 255 characters\nmonetary      | A map of 3-letters currency code and amount, e.g. {\"currency\": \"EUR\", \"amount\": 25.30}\n",
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "datetime",
            "integer",
            "number",
            "string",
            "monetary"
          ]
        },
        "description": {
          "description": "The custom field description",
          "type": "string"
        },
        "additionalSchema": {
          "description": "Additional parameters which can be added according to type:\nParameter Name | Types         | Description\n-------------- | ------------- | -------------\nallowedValues  | string, array | List of allowed values\n"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Dispute": {
      "type": "object",
      "required": [
        "currency",
        "transactionId",
        "postedTime",
        "type",
        "status",
        "reasonCode"
      ],
      "properties": {
        "id": {
          "description": "The dispute identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The dispute's customer ID",
          "type": "string",
          "readOnly": true
        },
        "transactionId": {
          "description": "The dispute's transaction ID",
          "type": "string"
        },
        "currency": {
          "description": "The dispute currency ISO Alpha code",
          "type": "string"
        },
        "amount": {
          "description": "The dispute amount",
          "type": "number",
          "format": "double"
        },
        "acquirerReferenceNumber": {
          "description": "The dispute's acquirer reference number",
          "type": "string"
        },
        "reasonCode": {
          "description": "The dispute's reason code",
          "type": "string",
          "enum": [
            "1000",
            "12",
            "2",
            "30",
            "31",
            "35",
            "37",
            "40",
            "41",
            "42",
            "46",
            "47",
            "49",
            "50",
            "53",
            "54",
            "55",
            "57",
            "59",
            "60",
            "62",
            "7",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "79",
            "8",
            "80",
            "81",
            "82",
            "83",
            "85",
            "86",
            "93",
            "00",
            "63",
            "A01",
            "A02",
            "A08",
            "F10",
            "F14",
            "F22",
            "F24",
            "F29",
            "C02",
            "C04",
            "C05",
            "C08",
            "C14",
            "C18",
            "C28",
            "C31",
            "C32",
            "M10",
            "M49",
            "P01",
            "P03",
            "P04",
            "P05",
            "P07",
            "P08",
            "P22",
            "P23",
            "R03",
            "R13",
            "M01",
            "FR1",
            "FR4",
            "FR6",
            "AL",
            "AP",
            "AW",
            "CA",
            "CD",
            "CR",
            "DA",
            "DP",
            "DP1",
            "EX",
            "IC",
            "IN",
            "IS",
            "LP",
            "N",
            "NA",
            "NC",
            "P",
            "RG",
            "RM",
            "RN1",
            "RN2",
            "SV",
            "TF",
            "TNM",
            "UA01",
            "UA02",
            "UA32",
            "UA99",
            "UA03",
            "UA10",
            "UA11",
            "UA12",
            "UA18",
            "UA20",
            "UA21",
            "UA22",
            "UA23",
            "UA28",
            "UA30",
            "UA31",
            "UA38",
            "duplicate",
            "fraudulent",
            "subscription_canceled",
            "product_unacceptable",
            "product_not_received",
            "unrecognized",
            "credit_not_processed",
            "customer_initiated",
            "incorrect_account_details",
            "insufficient_funds",
            "bank_cannot_process",
            "debit_not_authorized",
            "general"
          ]
        },
        "category": {
          "description": "The dispute's category",
          "type": "string",
          "readOnly": true,
          "enum": [
            "fraud",
            "unrecognized",
            "product-not-received",
            "product-unacceptable",
            "product-not-refunded",
            "duplicate",
            "subscription-canceled",
            "uncategorized"
          ]
        },
        "type": {
          "description": "The dispute's type",
          "type": "string",
          "enum": [
            "information-request",
            "first-chargeback",
            "second-chargeback",
            "arbitration"
          ]
        },
        "status": {
          "description": "The dispute's status",
          "type": "string",
          "enum": [
            "response-needed",
            "under-review",
            "forfeited",
            "won",
            "lost",
            "unknown"
          ]
        },
        "postedTime": {
          "description": "Dispute posted time",
          "type": "string",
          "format": "date-time"
        },
        "deadlineTime": {
          "description": "Dispute deadline time",
          "type": "string",
          "format": "date-time"
        },
        "rawResponse": {
          "description": "Dispute raw response from gateway",
          "type": "string",
          "readOnly": true
        },
        "resolvedTime": {
          "description": "Dispute resolved time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "createdTime": {
          "description": "Dispute created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Dispute updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/TransactionLink"
            }
          ]
        }
      }
    },
    "DisputeEvidence": {
      "type": "object",
      "properties": {
        "policy": {
          "description": "The id of a file upload with the policy materials (may include the cancellation policy, refund policy, and terms of use).",
          "type": "string"
        },
        "accessLogs": {
          "description": "The id of a file upload with the access logs showing the customer activity.",
          "type": "string"
        },
        "customerCommunication": {
          "description": "The id of a file upload showing communication with the customer (for example emails).",
          "type": "string"
        },
        "customerSignature": {
          "description": "The id of a file upload showing the signed contract or signed delivery receipt.",
          "type": "string"
        },
        "deliveryProof": {
          "description": "The id of a file upload showing the proof of delivery.",
          "type": "string"
        },
        "explanation": {
          "description": "An explanation relevant to the category of dispute.",
          "type": "string"
        },
        "additionalFile": {
          "description": "Any additional evidence as a file upload id.",
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "minimum": 100,
          "maximum": 600
        },
        "error": {
          "type": "string"
        }
      }
    },
    "EventType": {
      "type": "string",
      "description": "Rebilly event type",
      "readOnly": true,
      "enum": [
        "dispute-created",
        "gateway-account-requested",
        "transaction-processed",
        "subscription-activated",
        "subscription-canceled",
        "subscription-created",
        "subscription-renewed",
        "payment-card-expired",
        "invoice-past-due",
        "transaction-declined",
        "transaction-process-requested",
        "risk-score-changed"
      ]
    },
    "File": {
      "type": "object",
      "properties": {
        "id": {
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "name": {
          "description": "Original File name",
          "type": "string"
        },
        "extension": {
          "description": "The File extension",
          "type": "string"
        },
        "description": {
          "description": "The File description",
          "type": "string"
        },
        "url": {
          "description": "Write-only. If defined on POST, this would be used as a file source.",
          "type": "string"
        },
        "tags": {
          "description": "The tags list",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "mime": {
          "description": "The mime type",
          "type": "string",
          "readOnly": true,
          "enum": [
            "image/png",
            "image/jpeg",
            "image/gif",
            "application/pdf",
            "audio/mpeg"
          ]
        },
        "size": {
          "description": "The File size in bytes",
          "type": "integer",
          "readOnly": true
        },
        "width": {
          "description": "Image width, applicable to images only",
          "type": "integer",
          "readOnly": true
        },
        "height": {
          "description": "Image height, applicable to images only",
          "type": "integer",
          "readOnly": true
        },
        "sha1": {
          "description": "Hash sum of the file",
          "type": "string",
          "readOnly": true
        },
        "createdTime": {
          "description": "The upload date/time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The latest update date/time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "isPublic": {
          "description": "Is the file available publicly (without authentication). If true, the permalink in the _links section contains the public URL.",
          "type": "boolean"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 3,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/FileDownloadLink"
            },
            {
              "$ref": "#/definitions/SignedLinkLink"
            },
            {
              "$ref": "#/definitions/PermalinkLink"
            }
          ]
        }
      }
    },
    "FileCreateRequest": {
      "type": "object",
      "required": [
        "file",
        "url"
      ],
      "properties": {
        "file": {
          "description": "The file in base64 encoded format. This or `url` is required.",
          "type": "string",
          "example": "R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs="
        },
        "url": {
          "description": "The URL of the file to upload. This or `file` is required.",
          "type": "string",
          "example": "https://blog.rebilly.com/wp-content/uploads/2017/09/rb_LogoInverted_Small.png"
        },
        "isPublic": {
          "description": "The File visibility. If public a permalink is provided.",
          "type": "boolean",
          "example": false
        },
        "name": {
          "description": "The file name used for downloading",
          "type": "string",
          "example": "logo.png"
        },
        "description": {
          "description": "The file description",
          "type": "string",
          "example": "My file description"
        },
        "tags": {
          "description": "The tags list",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "test",
            "tags"
          ]
        }
      }
    },
    "GatewayAccount": {
      "type": "object",
      "required": [
        "gatewayName",
        "acquirerName",
        "merchantCategoryCode",
        "websites",
        "acceptedCurrencies",
        "organizationId"
      ],
      "discriminator": "gatewayName",
      "properties": {
        "id": {
          "description": "The gateway identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "status": {
          "description": "The gateway account's status",
          "readOnly": true,
          "type": "string",
          "enum": [
            "active",
            "inactive",
            "pending"
          ]
        },
        "gatewayName": {
          "$ref": "https://rebilly.github.io/api-standards/schema/json-schema-draft-04/payment-gateways/gateway-name.json"
        },
        "acquirerName": {
          "$ref": "https://rebilly.github.io/api-standards/schema/json-schema-draft-04/payment-gateways/acquirer-name.json"
        },
        "merchantCategoryCode": {
          "description": "The gateway account's merchant category code",
          "type": "integer",
          "minimum": 742,
          "maximum": 9950
        },
        "dccMarkup": {
          "description": "Dynamic currency conversion markup in basis points",
          "type": "integer",
          "minimum": 1,
          "maximum": 10000
        },
        "descriptor": {
          "description": "The gateway account's descriptor",
          "type": "string"
        },
        "cityField": {
          "description": "The gateway account's city field (also known as line 2 descriptor)",
          "type": "string"
        },
        "organizationId": {
          "description": "Organization ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websites": {
          "description": "Websites IDs",
          "type": "array",
          "items": {
            "description": "Website ID",
            "allOf": [
              {
                "$ref": "#/definitions/ResourceId"
              }
            ]
          }
        },
        "excludedDccQuoteCurrencies": {
          "description": "Excluded Dynamic Currency Conversion Quote Currencies",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "monthlyLimit": {
          "description": "Monthly Limit",
          "type": "number",
          "format": "double",
          "minimum": 0
        },
        "threeDSecure": {
          "description": "True, if Gateway Account allows 3DSecure",
          "type": "boolean"
        },
        "dynamicDescriptor": {
          "description": "True, if Gateway Account allows dynamic descriptor",
          "type": "boolean"
        },
        "acceptedCurrencies": {
          "description": "Accepted currencies (array of the currency three letter code)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "method": {
          "$ref": "#/definitions/Method"
        },
        "paymentCardSchemes": {
          "description": "Accepted payment card brands",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Visa",
              "MasterCard",
              "American Express",
              "Discover",
              "Maestro",
              "Solo",
              "Electron",
              "JCB",
              "Voyager",
              "Diners Club",
              "Switch",
              "Laser",
              "China Unionpay"
            ]
          }
        },
        "isDown": {
          "description": "True if gateway is currently in downtime period.",
          "type": "boolean",
          "readOnly": true
        },
        "amountRestrictions": {
          "description": "Set restrictions on allowed amounts per currency",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AmountRestrictions"
          }
        },
        "createdTime": {
          "description": "Gateway Account created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Gateway Account updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/OnBoardingUrlLink"
            }
          ]
        }
      }
    },
    "A1Gateway": {
      "description": "A1Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "description": "A1Gateway credentials object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "description": "A1Gateway account ID"
                },
                "password": {
                  "type": "string",
                  "description": "A1Gateway password",
                  "format": "password"
                }
              },
              "required": [
                "accountId",
                "password"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/A1GatewayMpis"
            }
          }
        }
      ]
    },
    "AmexVPC": {
      "description": "AmexVPC config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "description": "AmexVPC credentials object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "Virtual Payment Client URL"
                },
                "merchantId": {
                  "type": "string",
                  "description": "Merchant ID"
                },
                "accessCode": {
                  "type": "string",
                  "description": "Access Code",
                  "format": "password"
                },
                "user": {
                  "type": "string",
                  "description": "User (used for refund, void and capture)"
                },
                "password": {
                  "type": "string",
                  "description": "Password (used for refund, void and capture)",
                  "format": "password"
                }
              },
              "required": [
                "url",
                "merchantId",
                "accessCode",
                "user",
                "password"
              ]
            }
          }
        }
      ]
    },
    "AstroPayCard": {
      "description": "AstroPay Card config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "description": "AstroPay Card credentials object",
              "properties": {
                "x_login": {
                  "type": "string",
                  "description": "AstroPay Card login"
                },
                "x_tran_key": {
                  "type": "string",
                  "description": "AstroPay Card transaction key",
                  "format": "password"
                },
                "secret_key": {
                  "type": "string",
                  "description": "AstroPay Card secret key",
                  "format": "password"
                }
              },
              "required": [
                "x_login",
                "x_tran_key",
                "secret_key"
              ]
            }
          }
        }
      ]
    },
    "AuthorizeNet": {
      "description": "AuthorizeNet Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "apiLoginId": {
                  "type": "string",
                  "description": "AuthorizeNet Gateway api login ID"
                },
                "transactionKey": {
                  "description": "AuthorizeNet Gateway Transaction Key",
                  "type": "string",
                  "format": "password"
                }
              },
              "required": [
                "apiLoginId",
                "transactionKey"
              ]
            }
          }
        }
      ]
    },
    "Beanstream": {
      "description": "Beanstream Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Beanstream Gateway merchant ID"
                },
                "apiPasscode": {
                  "type": "string",
                  "description": "Beanstream Gateway API Passcode",
                  "format": "password"
                }
              },
              "required": [
                "merchantId",
                "apiPasscode"
              ]
            }
          }
        }
      ]
    },
    "BraintreePayments": {
      "description": "BraintreePayments Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "publicKey": {
                  "type": "string",
                  "description": "BraintreePayments Public Key"
                },
                "privateKey": {
                  "type": "string",
                  "description": "BraintreePayments Private Key",
                  "format": "password"
                },
                "merchantId": {
                  "type": "string",
                  "description": "BraintreePayments merchant ID",
                  "format": "password"
                },
                "merchantAccountId": {
                  "type": "string",
                  "description": "BraintreePayments merchant account ID",
                  "format": "password"
                }
              },
              "required": [
                "publicKey",
                "privateKey",
                "merchantId",
                "merchantAccountId"
              ]
            }
          }
        }
      ]
    },
    "Cashflows": {
      "description": "Cashflows Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "authId": {
                  "type": "string",
                  "description": "Cashflows Gateway auth ID"
                },
                "authPassword": {
                  "type": "string",
                  "description": "Cashflows Gateway auth password",
                  "format": "password"
                }
              },
              "required": [
                "authPassword",
                "authId"
              ]
            }
          }
        }
      ]
    },
    "Cayan": {
      "description": "Cayan Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantSiteId": {
                  "type": "string",
                  "description": "Cayan Gateway merchant site ID"
                },
                "merchantName": {
                  "type": "string",
                  "description": "Cayan Gateway merchant name"
                },
                "merchantKey": {
                  "type": "string",
                  "description": "Cayan Gateway merchant key",
                  "format": "password"
                }
              },
              "required": [
                "merchantSiteId",
                "merchantName",
                "merchantKey"
              ]
            }
          }
        }
      ]
    },
    "Chase": {
      "description": "Chase Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "Chase Gateway Net Connect username"
                },
                "password": {
                  "type": "string",
                  "description": "Chase Gateway Net Connect password",
                  "format": "password"
                },
                "coNumber": {
                  "type": "string",
                  "description": "Chase Gateway CO Number used for delimited file reports"
                },
                "divisionId": {
                  "type": "string",
                  "description": "Chase Gateway division ID"
                },
                "partialAuth": {
                  "type": "boolean",
                  "description": "Support for Partial Auths",
                  "default": false
                }
              },
              "required": [
                "username",
                "password",
                "coNumber",
                "divisionId",
                "partialAuth"
              ]
            }
          }
        }
      ]
    },
    "Credorax": {
      "description": "Credorax Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Credorax Gateway merchant ID"
                },
                "merchantMd5Signature": {
                  "type": "string",
                  "description": "Credorax Gateway md5 signature",
                  "format": "password"
                }
              },
              "required": [
                "merchantId",
                "merchantMd5Signature"
              ]
            }
          }
        }
      ]
    },
    "DataCash": {
      "description": "DataCash Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "client": {
                  "type": "string",
                  "description": "DataCash Gateway client"
                },
                "password": {
                  "type": "string",
                  "description": "DataCash Gateway password",
                  "format": "password"
                },
                "policy": {
                  "type": "integer",
                  "description": "Policy",
                  "minimum": 0,
                  "maximum": 7,
                  "default": 2
                },
                "delay": {
                  "type": "integer",
                  "description": "Auto Capture delay (in hours)",
                  "minimum": 0,
                  "default": 0
                }
              },
              "required": [
                "client",
                "password",
                "policy",
                "delay"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/DataCashMpis"
            }
          }
        }
      ]
    },
    "Dengi": {
      "description": "Dengi Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "string",
                  "description": "Dengi Gateway project ID"
                },
                "publicKey": {
                  "type": "string",
                  "description": "Dengi Gateway public key",
                  "format": "password"
                },
                "refundKey": {
                  "type": "string",
                  "description": "Dengi Gateway refund key",
                  "format": "password"
                }
              },
              "required": [
                "projectId",
                "publicKey",
                "refundKey"
              ]
            }
          }
        }
      ]
    },
    "eMerchantPay": {
      "description": "eMerchantPay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "eMerchantPay Gateway client ID"
                },
                "apiKey": {
                  "type": "string",
                  "description": "eMerchantPay Gateway api key",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "apiKey"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/eMerchantPayMpis"
            }
          }
        }
      ]
    },
    "Flexepin": {
      "description": "Flexepin Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "apiKey": {
                  "type": "string",
                  "description": "Flexepin API Key"
                },
                "apiSecret": {
                  "type": "string",
                  "description": "Flexepin API Secret",
                  "format": "password"
                }
              },
              "required": [
                "apiKey",
                "apiSecret"
              ]
            }
          }
        }
      ]
    },
    "Forte": {
      "description": "Forte Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "description": "Forte Gateway account ID"
                },
                "locationId": {
                  "type": "string",
                  "description": "Forte Gateway location ID"
                },
                "apiAccessId": {
                  "type": "string",
                  "description": "Forte Gateway api access ID",
                  "format": "password"
                },
                "apiSecretKey": {
                  "type": "string",
                  "description": "Forte Gateway api secret key",
                  "format": "password"
                }
              },
              "required": [
                "accountId",
                "locationId",
                "apiAccessId",
                "apiSecretKey"
              ]
            }
          }
        }
      ]
    },
    "FundSend": {
      "description": "FundSend Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "FundSend Gateway client ID"
                },
                "secretWord": {
                  "type": "string",
                  "description": "FundSend Gateway secret word",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ]
            }
          }
        }
      ]
    },
    "GET": {
      "description": "GET Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "description": "GET Gateway account ID"
                }
              },
              "required": [
                "accountId"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/GETMpis"
            }
          }
        }
      ]
    },
    "GlobalCollect": {
      "description": "GlobalCollect Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "GlobalCollect Gateway merchant ID"
                },
                "apiKeyId": {
                  "type": "string",
                  "description": "GlobalCollect Gateway api key ID"
                },
                "apiSecretKey": {
                  "type": "string",
                  "description": "GlobalCollect Gateway api secret key",
                  "format": "password"
                },
                "skipFraudService": {
                  "type": "boolean",
                  "description": "GlobalCollect skip fraud service"
                }
              },
              "required": [
                "merchantId",
                "apiKeyId",
                "apiSecretKey"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/GlobalCollectMpis"
            }
          }
        }
      ]
    },
    "GlobalOne": {
      "description": "GlobalOne Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "terminalId": {
                  "type": "string",
                  "description": "GlobalOne Gateway terminal ID"
                },
                "sharedSecret": {
                  "type": "string",
                  "description": "GlobalOne Gateway shared secret",
                  "format": "password"
                }
              },
              "required": [
                "terminalId",
                "sharedSecret"
              ]
            }
          }
        }
      ]
    },
    "Gpaysafe": {
      "description": "Gpaysafe Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "apiKey": {
                  "type": "string",
                  "description": "Gpaysafe apiKey"
                }
              },
              "required": [
                "apiKey"
              ]
            }
          }
        }
      ]
    },
    "iCheque": {
      "description": "iCheque Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "iCheque Gateway client ID"
                },
                "secretWord": {
                  "type": "string",
                  "description": "iCheque Gateway secret word",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ]
            }
          }
        }
      ]
    },
    "Ilixium": {
      "description": "Ilixium Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Ilixium Gateway merchant ID"
                },
                "accountId": {
                  "type": "string",
                  "description": "Ilixium Gateway account ID"
                },
                "digestPassword": {
                  "type": "string",
                  "description": "Ilixium Gateway digest password",
                  "format": "password"
                }
              },
              "required": [
                "merchantId",
                "accountId",
                "digestPassword"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/IlixiumMpis"
            }
          }
        }
      ]
    },
    "Intuit": {
      "description": "Intuit Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "The Intuit client_id key"
                },
                "clientSecret": {
                  "type": "string",
                  "description": "The Intuit client_secret key",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "clientSecret"
              ]
            }
          }
        }
      ]
    },
    "IpayOptions": {
      "description": "Ipay Options config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "description": "Ipay Options credentials object",
              "properties": {
                "sid": {
                  "type": "string",
                  "description": "Ipay Options website ID"
                },
                "rcode": {
                  "type": "string",
                  "description": "Ipay Options rcode",
                  "format": "password"
                }
              },
              "required": [
                "sid",
                "rcode"
              ]
            }
          }
        }
      ]
    },
    "Jeton": {
      "description": "Jeton Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "apiKey": {
                  "type": "string",
                  "description": "Jeton apiKey"
                }
              },
              "required": [
                "apiKey"
              ]
            }
          }
        }
      ]
    },
    "JetPay": {
      "description": "JetPay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "TerminalID": {
                  "type": "string",
                  "description": "JetPay Gateway terminal ID"
                }
              },
              "required": [
                "TerminalID"
              ]
            }
          }
        }
      ]
    },
    "Moneris": {
      "description": "Moneris Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "apiToken": {
                  "type": "string",
                  "description": "Moneris Gateway api token",
                  "format": "password"
                },
                "storeId": {
                  "type": "string",
                  "description": "Moneris Gateway store ID"
                }
              },
              "required": [
                "storeId",
                "apiToken"
              ]
            }
          }
        }
      ]
    },
    "MtaPay": {
      "description": "MTA Pay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "description": "MTA Pay Gateway account ID"
                },
                "partyId": {
                  "type": "string",
                  "description": "MTA Pay Gateway party ID"
                },
                "goods": {
                  "type": "string",
                  "description": "MTA Pay Gateway goods"
                },
                "md5key": {
                  "type": "string",
                  "description": "MTA Pay Gateway md5key",
                  "format": "password"
                },
                "mobilePay": {
                  "type": "string",
                  "description": "MTA Pay Gateway mobile pay param"
                }
              },
              "required": [
                "accountId",
                "partyId",
                "goods",
                "md5key",
                "mobilePay"
              ]
            }
          }
        }
      ]
    },
    "NMI": {
      "description": "NMI Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "NMI Gateway api token"
                },
                "password": {
                  "type": "string",
                  "description": "NMI Gateway store ID",
                  "format": "password"
                }
              },
              "required": [
                "username",
                "password"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/NMIMpis"
            }
          }
        }
      ]
    },
    "OchaPay": {
      "description": "OchaPay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "apiUsername": {
                  "type": "string",
                  "description": "OchaPay Gateway username"
                },
                "apiPassword": {
                  "type": "string",
                  "description": "OchaPay Gateway api password",
                  "format": "password"
                },
                "secretWord": {
                  "type": "string",
                  "description": "OchaPay Gateway secret word",
                  "format": "password"
                }
              },
              "required": [
                "apiUsername",
                "apiPassword",
                "secretWord"
              ]
            }
          }
        }
      ]
    },
    "Optimal": {
      "description": "Optimal Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "storeId": {
                  "type": "string",
                  "description": "Optimal Gateway store ID"
                },
                "storePwd": {
                  "type": "string",
                  "description": "Optimal Gateway store password",
                  "format": "password"
                },
                "accountNum": {
                  "type": "string",
                  "description": "Optimal Gateway account number"
                }
              },
              "required": [
                "storeId",
                "storePwd",
                "accountNum"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/OptimalMpis"
            }
          }
        }
      ]
    },
    "PandaGateway": {
      "description": "Panda Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantCode": {
                  "type": "string",
                  "description": "Panda Gateway merchant code"
                },
                "apiCode": {
                  "type": "string",
                  "description": "Panda Gateway api code"
                },
                "signKey": {
                  "type": "string",
                  "description": "Panda Gateway sign key",
                  "format": "password"
                }
              },
              "required": [
                "merchantCode",
                "apiCode",
                "signKey"
              ]
            }
          }
        }
      ]
    },
    "Payeezy": {
      "description": "Payeezy Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Payeezy Merchant ID"
                },
                "merchantToken": {
                  "type": "string",
                  "description": "Merchant Token",
                  "format": "password"
                },
                "apiKey": {
                  "type": "string",
                  "description": "API Key"
                },
                "apiSecret": {
                  "type": "string",
                  "description": "API Secret",
                  "format": "password"
                }
              },
              "required": [
                "merchantId",
                "merchantToken",
                "apiKey",
                "apiSecret"
              ]
            }
          }
        }
      ]
    },
    "Payflow": {
      "description": "Payflow config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "description": "Payflow credentials object",
              "properties": {
                "user": {
                  "type": "string",
                  "description": "If you set up one or more additional users on the account, this value is the ID of the user authorized to process transactions. If, however, you have not set up additional users, USER has the same value as VENDOR"
                },
                "vendor": {
                  "type": "string",
                  "description": "Your merchant login ID created when you registered for the account."
                },
                "password": {
                  "type": "string",
                  "description": "The password you defined while registering for the account.",
                  "format": "password"
                }
              },
              "required": [
                "user",
                "vendor",
                "password"
              ]
            }
          }
        }
      ]
    },
    "PayPal": {
      "description": "PayPal Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantIdInPayPal": {
                  "type": "string",
                  "description": "PayPal Gateway merchant id"
                },
                "redirectUrl": {
                  "type": "string",
                  "description": "PayPal Gateway redirect url",
                  "format": "url"
                }
              },
              "required": [
                "merchantIdInPayPal",
                "redirectUrl"
              ]
            }
          }
        }
      ]
    },
    "Payr": {
      "description": "Payr Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "Payr Gateway client ID"
                },
                "secretWord": {
                  "type": "string",
                  "description": "Payr Gateway secret word",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ]
            }
          }
        }
      ]
    },
    "Payvision": {
      "description": "Payvision Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "memberId": {
                  "type": "string",
                  "description": "Payvision Gateway member id"
                },
                "memberGuid": {
                  "type": "string",
                  "description": "Payvision Gateway member guid",
                  "format": "password"
                },
                "avs": {
                  "type": "boolean",
                  "description": "Payvision Gateway avs"
                },
                "delay": {
                  "type": "integer",
                  "description": "Payvision Gateway delay"
                }
              },
              "required": [
                "memberId",
                "memberGuid",
                "avs",
                "delay"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/PayvisionMpis"
            }
          }
        }
      ]
    },
    "Plugnpay": {
      "description": "Plugnpay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "publisher-name": {
                  "type": "string",
                  "description": "Plugnpay Gateway member id"
                },
                "publisher-password": {
                  "type": "string",
                  "description": "Plugnpay Gateway avs",
                  "format": "password"
                }
              },
              "required": [
                "publisher-name",
                "publisher-password"
              ]
            }
          }
        }
      ]
    },
    "Realex": {
      "description": "Realex Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Realex Gateway merchant id"
                },
                "secretKey": {
                  "type": "string",
                  "description": "Realex Gateway secret key",
                  "format": "password"
                },
                "rebatePassword": {
                  "type": "string",
                  "description": "Realex Gateway rebate password",
                  "format": "password"
                },
                "account": {
                  "type": "string",
                  "description": "Realex Gateway account"
                }
              },
              "required": [
                "merchantId",
                "secretKey",
                "rebatePassword",
                "account"
              ]
            }
          }
        }
      ]
    },
    "RealTime": {
      "description": "RealTime Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "RealTime Gateway client ID"
                },
                "secretWord": {
                  "type": "string",
                  "description": "RealTime Gateway secret word",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ]
            }
          }
        }
      ]
    },
    "RebillyProcessor": {
      "description": "RebillyProcessor Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "properties": {
            "mpi": {
              "$ref": "#/definitions/RebillyProcessorMpis"
            }
          }
        }
      ]
    },
    "Redsys": {
      "description": "Redsys Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantCode": {
                  "type": "string",
                  "description": "Redsys Gateway merchant code",
                  "format": "password"
                },
                "secretCode": {
                  "type": "string",
                  "description": "Redsys Gateway secret code",
                  "format": "password"
                }
              },
              "required": [
                "merchantCode",
                "secretCode"
              ]
            }
          }
        }
      ]
    },
    "RPN": {
      "description": "RPN Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "mid": {
                  "type": "string",
                  "description": "RPN MID"
                },
                "key": {
                  "type": "string",
                  "description": "RPN Key",
                  "format": "password"
                }
              },
              "required": [
                "mid",
                "key"
              ]
            }
          }
        }
      ]
    },
    "Sagepay": {
      "description": "Sagepay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "M_ID": {
                  "type": "string",
                  "description": "Sagepay Gateway merchant ID"
                },
                "M_KEY": {
                  "type": "string",
                  "description": "Sagepay Gateway merchant key",
                  "format": "password"
                }
              },
              "required": [
                "M_ID",
                "M_KEY"
              ]
            }
          }
        }
      ]
    },
    "SMSVoucher": {
      "description": "SMSVoucher Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "AppId": {
                  "type": "string",
                  "description": "SMSVoucher AppId"
                }
              },
              "required": [
                "AppId"
              ]
            }
          }
        }
      ]
    },
    "StaticGateway": {
      "description": "StaticGateway Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object"
        }
      ]
    },
    "Stripe": {
      "description": "Stripe Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "redirectUrl": {
                  "type": "string",
                  "description": "Stripe Gateway redirect url",
                  "format": "url"
                }
              },
              "required": [
                "redirectUrl"
              ]
            }
          }
        }
      ]
    },
    "UPayCard": {
      "description": "UPayCard Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "receiver_account": {
                  "type": "string",
                  "description": "merchant receiver account"
                },
                "key": {
                  "type": "string",
                  "description": "merchant key",
                  "format": "password"
                },
                "secret": {
                  "type": "string",
                  "description": "merchant secret",
                  "format": "password"
                }
              },
              "required": [
                "receiver_account",
                "key",
                "secret"
              ]
            }
          }
        }
      ]
    },
    "USAePay": {
      "description": "USAePay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "sourceKey": {
                  "type": "string",
                  "description": "USAePay Gateway source key",
                  "format": "password"
                },
                "pin": {
                  "type": "string",
                  "description": "USAePay Gateway pin",
                  "format": "password"
                }
              },
              "required": [
                "sourceKey",
                "pin"
              ]
            }
          }
        }
      ]
    },
    "VantivLitle": {
      "description": "VantivLitle Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "VantivLitle Gateway username"
                },
                "password": {
                  "type": "string",
                  "description": "VantivLitle Gateway password",
                  "format": "password"
                },
                "merchantId": {
                  "type": "string",
                  "description": "VantivLitle Gateway merchant ID"
                }
              },
              "required": [
                "username",
                "password",
                "merchantId"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/VantivLitleMpis"
            }
          }
        }
      ]
    },
    "vegaaH": {
      "description": "vegaaH Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "terminalId": {
                  "type": "string",
                  "description": "vegaaH Gateway terminal ID"
                },
                "password": {
                  "type": "string",
                  "description": "vegaaH Gateway password",
                  "format": "password"
                }
              },
              "required": [
                "terminalId",
                "password"
              ]
            }
          }
        }
      ]
    },
    "Walpay": {
      "description": "Walpay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantName": {
                  "type": "string",
                  "description": "Walpay Gateway merchant name"
                },
                "merchantPin": {
                  "type": "string",
                  "description": "Walpay Gateway merchant pin",
                  "format": "password"
                }
              },
              "required": [
                "merchantName",
                "merchantPin"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/WalpayMpis"
            }
          }
        }
      ]
    },
    "Wirecard": {
      "description": "Wirecard Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantUsername": {
                  "type": "string",
                  "description": "Wirecard Gateway merchant username"
                },
                "merchantPassword": {
                  "type": "string",
                  "description": "Wirecard Gateway merchant password",
                  "format": "password"
                },
                "businessSignature": {
                  "type": "string",
                  "description": "Wirecard Gateway merchant business case signature",
                  "format": "password"
                },
                "delay": {
                  "type": "integer",
                  "description": "Wirecard Gateway delay"
                }
              },
              "required": [
                "merchantUsername",
                "merchantPassword",
                "businessSignature",
                "delay"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/WirecardMpis"
            }
          }
        }
      ]
    },
    "Worldpay": {
      "description": "Worldpay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantCode": {
                  "type": "string",
                  "description": "Worldpay Gateway merchant code",
                  "format": "password"
                },
                "merchantPassword": {
                  "type": "string",
                  "description": "Worldpay Gateway merchant password",
                  "format": "password"
                }
              },
              "required": [
                "merchantCode",
                "merchantPassword"
              ]
            },
            "mpi": {
              "$ref": "#/definitions/WorldpayMpis"
            }
          }
        }
      ]
    },
    "MpiName": {
      "description": "The Merchant plug-in Name",
      "type": "string",
      "enum": [
        "PayvisionMpi",
        "WirecardMpi",
        "IlixiumMpi",
        "DataCashMpi",
        "OptimalMpi",
        "GlobalCollectMpi",
        "CardinalCommerce",
        "PaayMpi",
        "Other"
      ]
    },
    "InvalidError": {
      "allOf": [
        {
          "$ref": "#/definitions/Error"
        },
        {
          "type": "object",
          "properties": {
            "details": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "Invoice": {
      "type": "object",
      "required": [
        "customerId",
        "websiteId",
        "currency"
      ],
      "properties": {
        "id": {
          "description": "The invoice identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "invoiceNumber": {
          "description": "An auto-incrementing number based on the sequence of invoices for any particular customer.",
          "readOnly": true,
          "type": "integer"
        },
        "customerId": {
          "description": "The customer's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websiteId": {
          "description": "The website's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "organizationId": {
          "description": "The organization's ID",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "subscriptionId": {
          "description": "The related Subscription's ID if available, otherwise null",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "currency": {
          "description": "The currency three letter code",
          "type": "string"
        },
        "amount": {
          "description": "The Invoice's amount",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "shippingAmount": {
          "description": "The Invoice's shipping amount",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "billingAddress": {
          "description": "Invoice's billing address",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "deliveryAddress": {
          "description": "Invoice's delivery address",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "notes": {
          "description": "Notes for the customer which will display on the invoice",
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "Invoice items array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "taxes": {
          "type": "array",
          "description": "Taxes applied to this invoice",
          "readOnly": true,
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/InvoiceTax"
              }
            ]
          }
        },
        "discounts": {
          "type": "array",
          "description": "Discounts applied",
          "readOnly": true,
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/InvoiceDiscount"
              }
            ]
          }
        },
        "status": {
          "type": "string",
          "description": "Invoice status.",
          "readOnly": true,
          "enum": [
            "draft",
            "issued",
            "past-due",
            "paid",
            "abandoned",
            "voided"
          ]
        },
        "delinquentCollectionPeriod": {
          "type": "integer",
          "description": "Delinquent Collection Period - difference between paidTime and dueTime in days.",
          "readOnly": true
        },
        "collectionPeriod": {
          "type": "integer",
          "description": "Collection Period - difference between paidTime and issuedTime in days.",
          "readOnly": true
        },
        "abandonedTime": {
          "description": "Invoice abandoned time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "voidedTime": {
          "description": "Invoice voided time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "paidTime": {
          "description": "Invoice paid time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "dueTime": {
          "description": "Invoice due time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "issuedTime": {
          "description": "Invoice issued time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "createdTime": {
          "description": "Invoice created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Invoice updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/OrganizationLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ]
        }
      }
    },
    "InvoiceIssue": {
      "type": "object",
      "properties": {
        "issuedTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "InvoiceItem": {
      "type": "object",
      "required": [
        "type",
        "unitPrice"
      ],
      "properties": {
        "id": {
          "description": "The website identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "type": {
          "description": "Invoice item's type",
          "type": "string",
          "enum": [
            "debit",
            "credit"
          ]
        },
        "unitPrice": {
          "description": "Invoice item's price",
          "type": "number",
          "format": "double"
        },
        "quantity": {
          "description": "Invoice item's quantity",
          "type": "integer"
        },
        "productId": {
          "description": "The product's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "description": {
          "description": "Invoice item's description",
          "type": "string"
        },
        "discountAmount": {
          "description": "Invoice item discount amount",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "periodStartTime": {
          "description": "Start time",
          "type": "string",
          "format": "date-time"
        },
        "periodEndTime": {
          "description": "End time",
          "type": "string",
          "format": "date-time"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/SubscriptionLink"
            }
          ]
        }
      }
    },
    "InvoiceTax": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "amount": {
          "description": "Tax amount",
          "type": "number",
          "format": "double"
        },
        "description": {
          "type": "string",
          "description": "Tax description"
        }
      }
    },
    "KycDocument": {
      "type": "object",
      "required": [
        "fileId",
        "customerId",
        "documentType",
        "status"
      ],
      "properties": {
        "id": {
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "fileId": {
          "description": "Linked File object id",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "Linked Customer object id",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "documentType": {
          "description": "Document type submitted for validation, only identity-proof type is analyzed in an automated manner",
          "type": "string",
          "enum": [
            "identity-proof",
            "address-proof"
          ]
        },
        "status": {
          "description": "Status of the validation",
          "type": "string",
          "readOnly": true,
          "enum": [
            "pending",
            "in-progress",
            "accepted",
            "rejected"
          ]
        },
        "rejectionReason": {
          "$ref": "#/definitions/KycDocumentRejection"
        },
        "documentMatches": {
          "$ref": "#/definitions/KycDocumentMatches"
        },
        "createdTime": {
          "description": "Creation date/time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Latest update date/time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "processedTime": {
          "description": "Processing date/time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 3,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/FileLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ]
        }
      }
    },
    "KycDocumentMatches": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "score": {
          "description": "The calculated score that represents the % of confidence that this ID respresents the given customer",
          "type": "number",
          "format": "double",
          "example": 0.75
        },
        "data": {
          "type": "object",
          "properties": {
            "containsImage": {
              "description": "Flag that indicates if there is an image that contains a face on it",
              "type": "boolean",
              "example": true
            },
            "isIdentityDocument": {
              "description": "Flag that indicates if this looks like and ID",
              "type": "boolean",
              "example": true
            },
            "isPublishedOnline": {
              "description": "If there is an exact match found online",
              "type": "boolean",
              "example": false
            },
            "firstName": {
              "description": "The customer first name if it was matched, null otherwise",
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "description": "The customer last name if it was matched, null otherwise",
              "type": "string",
              "example": "Doe"
            },
            "dateOfBirth": {
              "description": "The date of birth found on the document, null if not found",
              "allOf": [
                {
                  "$ref": "#/definitions/ServerTimestamp"
                }
              ]
            },
            "expiryDate": {
              "description": "The expiry date found on the document, null if not found",
              "allOf": [
                {
                  "$ref": "#/definitions/ServerTimestamp"
                }
              ]
            },
            "issueDate": {
              "description": "The issued date found on the document, null if not found",
              "allOf": [
                {
                  "$ref": "#/definitions/ServerTimestamp"
                }
              ]
            },
            "hasMinimalAge": {
              "description": "Checks the minimal age, 21+ for USA and 18+ for all other countries. Null if dateOfBirth could not be determined.",
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "KycDocumentRejection": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "document-unreadable",
            "document-expired",
            "document-not_matching",
            "underage-person",
            "other"
          ]
        },
        "message": {
          "description": "The rejection message",
          "type": "string",
          "example": "Provided document is unreadable"
        }
      }
    },
    "LeadSource": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The lead source identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "medium": {
          "description": "Lead Source's medium (eg search, display)",
          "type": "string"
        },
        "source": {
          "description": "Lead Source's source (eg google, yahoo)",
          "type": "string"
        },
        "campaign": {
          "description": "Lead Source's campaign (eg go-big-123)",
          "type": "string"
        },
        "term": {
          "description": "Lead Source's term (eg salt shakers)",
          "type": "string"
        },
        "content": {
          "description": "Lead Source's content (eg smiley faces)",
          "type": "string"
        },
        "affiliate": {
          "description": "Lead Source's affiliate (eg 123, Bob Smith)",
          "type": "string"
        },
        "subAffiliate": {
          "description": "Lead Source's sub-affiliate also called a sub-id or click id in some circles (eg 123456)",
          "type": "string"
        },
        "salesAgent": {
          "description": "Lead Source's sales agent (eg James Bond)",
          "type": "string"
        },
        "clickId": {
          "description": "Lead Source's click id (may come from an ad server)",
          "type": "string"
        },
        "path": {
          "description": "Lead Source's path uri (eg www.example.com/some/landing/path)",
          "type": "string"
        },
        "currency": {
          "description": "Currency (three letter ISO 4217 alpha code) (eg USD, EUR)",
          "type": "string"
        },
        "amount": {
          "description": "The amount that the lead cost",
          "type": "number",
          "format": "double"
        },
        "createdTime": {
          "description": "LeadSource created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "LeadSource updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ]
        }
      }
    },
    "ApprovalUrlLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "approvalUrl"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "AttachmentResourceLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "customer",
            "dispute",
            "invoice",
            "note",
            "payment",
            "plan",
            "product",
            "subscription",
            "transaction"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "BankAccountLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "bankAccount"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "CancelUrlLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "cancelUrl"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "CustomerLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "customer"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "DefaultPaymentInstrumentLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "defaultPaymentInstrument"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "DisputeLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "dispute"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "FileDownloadLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "download"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "FileLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "file"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "GatewayAccountLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "gatewayAccount"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "ItemsLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "items"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "LeadSourceLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "leadSource"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "NewLink": {
      "type": "object",
      "properties": {
        "href": {
          "description": "The link URL",
          "type": "string"
        }
      },
      "required": [
        "href"
      ]
    },
    "NotesLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "notes"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "OnBoardingUrlLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "onBoardingUrl"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "OrganizationLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "organization"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "ParentTransactionLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "parentTransaction"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "PaymentCardLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "paymentCard"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "PaymentLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "payment"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "PermalinkLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "permalink"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "PlanLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "plan"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "RefundUrlLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "refundUrl"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "RetriedTransactionLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "retriedTransaction"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "RuleSetHistoryLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "history"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "RuleSetVersionLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "rules"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "SelfLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "self"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "SignedLinkLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "signedLink"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "SubscriptionLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "subscription"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "TransactionLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "transaction"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "WebsiteLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "website"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "Method": {
      "type": "string",
      "description": "The payment method",
      "enum": [
        "ach",
        "cash",
        "payment-card",
        "paypal",
        "Alipay",
        "China UnionPay",
        "Flexepin",
        "Gpaysafe",
        "Jeton",
        "OchaPay",
        "SMSVoucher",
        "UPayCard",
        "WeChat Pay",
        "AstroPay Card",
        "bank-transfer",
        "bitcoin",
        "Boleto",
        "cash-deposit",
        "echeck",
        "instant-bank-transfer",
        "invoice",
        "miscellaneous",
        "online-bank-transfer",
        "phone",
        "voucher",
        "QQPay"
      ]
    },
    "A1GatewayMpis": {
      "description": "A1Gateway Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PaayMpi",
            "Other"
          ]
        }
      }
    },
    "DataCashMpi": {
      "description": "DataCash Integrated",
      "allOf": [
        {
          "$ref": "#/definitions/DataCashMpis"
        }
      ]
    },
    "DataCashMpis": {
      "description": "DataCash Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "DataCashMpi"
          ]
        }
      }
    },
    "eMerchantPayMpis": {
      "description": "eMerchantPay Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PaayMpi",
            "Other"
          ]
        }
      }
    },
    "GETMpis": {
      "description": "GET Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PaayMpi",
            "Other"
          ]
        }
      }
    },
    "GlobalCollectMpi": {
      "description": "GlobalCollect Integrated",
      "allOf": [
        {
          "$ref": "#/definitions/GlobalCollectMpis"
        }
      ]
    },
    "GlobalCollectMpis": {
      "description": "GlobalCollect Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "GlobalCollectMpi"
          ]
        }
      }
    },
    "IlixiumMpi": {
      "description": "Ilixium Integrated",
      "allOf": [
        {
          "$ref": "#/definitions/IlixiumMpis"
        }
      ]
    },
    "IlixiumMpis": {
      "description": "IlixiumMpis Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "IlixiumMpi"
          ]
        }
      }
    },
    "NMIMpis": {
      "description": "NMI Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PaayMpi",
            "Other"
          ]
        }
      }
    },
    "OptimalMpi": {
      "description": "Optimal Integrated",
      "allOf": [
        {
          "$ref": "#/definitions/OptimalMpis"
        }
      ]
    },
    "OptimalMpis": {
      "description": "Optimal Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "OptimalMpi"
          ]
        }
      }
    },
    "Other": {
      "description": "Other",
      "allOf": [
        {
          "$ref": "#/definitions/A1GatewayMpis"
        },
        {
          "$ref": "#/definitions/eMerchantPayMpis"
        },
        {
          "$ref": "#/definitions/GETMpis"
        },
        {
          "$ref": "#/definitions/NMIMpis"
        },
        {
          "$ref": "#/definitions/PayvisionMpis"
        },
        {
          "$ref": "#/definitions/VantivLitleMpis"
        },
        {
          "$ref": "#/definitions/WalpayMpis"
        },
        {
          "$ref": "#/definitions/WorldpayMpis"
        }
      ]
    },
    "PaayMpi": {
      "description": "Paay",
      "allOf": [
        {
          "$ref": "#/definitions/A1GatewayMpis"
        },
        {
          "$ref": "#/definitions/eMerchantPayMpis"
        },
        {
          "$ref": "#/definitions/GETMpis"
        },
        {
          "$ref": "#/definitions/NMIMpis"
        },
        {
          "$ref": "#/definitions/PayvisionMpis"
        },
        {
          "$ref": "#/definitions/VantivLitleMpis"
        },
        {
          "$ref": "#/definitions/WalpayMpis"
        },
        {
          "$ref": "#/definitions/WorldpayMpis"
        },
        {
          "type": "object",
          "required": [
            "apiKey",
            "secret",
            "mpiUrl",
            "sandboxMpiUrl"
          ],
          "properties": {
            "apiKey": {
              "type": "string",
              "description": "Paay ApiKey"
            },
            "secret": {
              "type": "string",
              "format": "password",
              "description": "Paay secret"
            },
            "mpiUrl": {
              "type": "string",
              "description": "Paay MPI url"
            },
            "sandboxMpiUrl": {
              "type": "string",
              "description": "Paay sandbox MPI url"
            }
          }
        }
      ]
    },
    "CardinalCommerce": {
      "description": "CardinalCommerce Mpi Credentials",
      "allOf": [
        {
          "$ref": "#/definitions/PayvisionMpis"
        },
        {
          "type": "object",
          "required": [
            "merchantId",
            "processorId",
            "transactionPwd"
          ],
          "properties": {
            "merchantId": {
              "type": "string",
              "description": "Cardinal MerchantId"
            },
            "processorId": {
              "type": "string",
              "description": "Cardinal ProcessorId"
            },
            "transactionPwd": {
              "type": "string",
              "format": "password",
              "description": "Cardinal TransactionPwd"
            }
          }
        }
      ]
    },
    "PayvisionMpi": {
      "description": "Payvision Integrated",
      "allOf": [
        {
          "$ref": "#/definitions/PayvisionMpis"
        }
      ]
    },
    "PayvisionMpis": {
      "description": "Payvision Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PayvisionMpi",
            "CardinalCommerce",
            "PaayMpi",
            "Other"
          ]
        }
      }
    },
    "RebillyProcessorMpi": {
      "description": "RebillyProcessor Integrated",
      "allOf": [
        {
          "$ref": "#/definitions/RebillyProcessorMpis"
        }
      ]
    },
    "RebillyProcessorMpis": {
      "description": "RebillyProcessorMpis Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "RebillySandboxMpi"
          ]
        }
      }
    },
    "VantivLitleMpis": {
      "description": "VantivLitle Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PaayMpi",
            "Other"
          ]
        }
      }
    },
    "WalpayMpis": {
      "description": "WalpayMpis Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PaayMpi",
            "Other"
          ]
        }
      }
    },
    "WirecardMpi": {
      "description": "Wirecard Integrated",
      "allOf": [
        {
          "$ref": "#/definitions/WirecardMpis"
        }
      ]
    },
    "WirecardMpis": {
      "description": "Wirecard Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "WirecardMpi"
          ]
        }
      }
    },
    "WorldpayMpis": {
      "description": "Worldpay Mpis",
      "discriminator": "name",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "allOf": [
            {
              "$ref": "#/definitions/MpiName"
            }
          ],
          "enum": [
            "PaayMpi",
            "Other"
          ]
        }
      }
    },
    "OnOff": {
      "type": "string",
      "default": "active",
      "enum": [
        "active",
        "inactive"
      ]
    },
    "Payment": {
      "type": "object",
      "required": [
        "websiteId",
        "customerId",
        "currency",
        "amount"
      ],
      "properties": {
        "id": {
          "description": "The payment identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websiteId": {
          "description": "The website identifier string",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The customer identifier string",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "currency": {
          "description": "The payment currency ISO Alpha code",
          "type": "string"
        },
        "amount": {
          "description": "The payment amount",
          "type": "integer",
          "format": "double"
        },
        "scheduledTime": {
          "description": "The time the payment is scheduled for collection",
          "type": "string",
          "format": "date-time"
        },
        "invoiceIds": {
          "description": "The array of invoice identifiers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceId"
          }
        },
        "description": {
          "description": "The payment description",
          "type": "string",
          "maxLength": 255
        },
        "retryInstruction": {
          "$ref": "#/definitions/PaymentRetry"
        },
        "retryNumber": {
          "readOnly": true,
          "description": "The position in the sequence of retries",
          "type": "integer"
        },
        "retriedPaymentId": {
          "readOnly": true,
          "description": "The retried payment ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "billingAddress": {
          "description": "Billing Address",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "createdBy": {
          "description": "The process that created this payment",
          "type": "string"
        },
        "updatedBy": {
          "description": "The process that updated this payment",
          "type": "string"
        },
        "status": {
          "description": "Payment status",
          "type": "string",
          "readOnly": true,
          "enum": [
            "scheduled",
            "queued",
            "in-progress",
            "incomplete",
            "waiting-gateway",
            "suspended",
            "completed"
          ]
        },
        "result": {
          "description": "Payment result",
          "type": "string",
          "readOnly": true,
          "enum": [
            "approved",
            "declined",
            "canceled",
            "unknown"
          ]
        },
        "riskMetadata": {
          "description": "Risk metadata",
          "allOf": [
            {
              "$ref": "#/definitions/RiskMetadata"
            }
          ]
        },
        "createdTime": {
          "description": "Payment created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Payment updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/TransactionLink"
            },
            {
              "$ref": "#/definitions/ApprovalUrlLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ]
        }
      }
    },
    "PaymentCard": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The card identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The Customer's ID. Required if card is creating not from Token",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "pan": {
          "description": "The card PAN (Primary Account Number). Required if card is creating not from Token",
          "type": "string"
        },
        "bin": {
          "description": "The card's bin (the PAN's first 6 digits)",
          "type": "string",
          "format": "bin",
          "readOnly": true
        },
        "last4": {
          "description": "The PAN's last 4 digits",
          "type": "string",
          "readOnly": true
        },
        "expYear": {
          "description": "Card's expiry year. Required if card is creating not from Token",
          "type": "integer"
        },
        "expMonth": {
          "description": "Card's expiry month. Required if card is creating not from Token",
          "type": "integer"
        },
        "cvv": {
          "description": "Card's cvv (card verification value). Required if card is creating not from Token",
          "type": "string"
        },
        "billingAddress": {
          "description": "The Billing Address. Required if card is creating not from Token",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "token": {
          "description": "PaymentCardToken. Use without any other fields",
          "type": "string"
        },
        "panFingerprint": {
          "description": "A unique value to identify the PAN regardless of expiry",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Payment Card status",
          "type": "string",
          "readOnly": true,
          "enum": [
            "active",
            "expired",
            "inactive",
            "deactivated",
            "pending"
          ]
        },
        "brand": {
          "description": "Payment Card brand",
          "type": "string",
          "readOnly": true,
          "enum": [
            "Visa",
            "MasterCard",
            "American Express",
            "Discover",
            "Maestro",
            "Solo",
            "Electron",
            "JCB",
            "Voyager",
            "Diners Club",
            "Switch",
            "Laser",
            "China UnionPay",
            "AstroPay Card"
          ]
        },
        "bankCountry": {
          "description": "Payment Card bank country",
          "type": "string",
          "readOnly": true
        },
        "bankName": {
          "description": "Payment Card bank name",
          "type": "string",
          "readOnly": true
        },
        "stickyGatewayAccountId": {
          "description": "Default Gateway Account ID used for transactions",
          "type": "string",
          "readOnly": true
        },
        "createdTime": {
          "description": "Card created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Card updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ]
        }
      }
    },
    "PaymentInstrument": {
      "type": "object",
      "required": [
        "method"
      ],
      "discriminator": "method",
      "properties": {
        "method": {
          "$ref": "#/definitions/Method"
        }
      }
    },
    "PaymentInstrumentValidation": {
      "type": "object",
      "required": [
        "method",
        "paymentInstrumentId"
      ],
      "properties": {
        "id": {
          "description": "Payment instrument validation ID",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "method": {
          "description": "Payment method",
          "type": "string"
        },
        "paymentInstrumentId": {
          "description": "Payment instrument ID",
          "type": "string"
        },
        "actionCode": {
          "description": "Action code",
          "type": "string",
          "readOnly": true
        },
        "responseCode": {
          "description": "Response code",
          "type": "string",
          "readOnly": true
        },
        "avsResult": {
          "description": "Address verification result",
          "type": "string",
          "readOnly": true
        },
        "cvvResult": {
          "description": "CVV result",
          "type": "string",
          "readOnly": true
        },
        "billingAddress": {
          "description": "Billing address.",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "expYear": {
          "description": "Payment card's expiry year.",
          "type": "integer",
          "readOnly": true
        },
        "expMonth": {
          "description": "Payment card's expiry month.",
          "type": "integer",
          "readOnly": true
        },
        "createdTime": {
          "description": "Payment instrument validation created time.",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "ach": {
      "description": "ACH payment instrument object",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "type": "object",
          "required": [
            "bankAccountId"
          ],
          "properties": {
            "bankAccountId": {
              "description": "The bank account identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            },
            "gatewayAccountId": {
              "description": "The payment gateway identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            }
          }
        }
      ]
    },
    "cash": {
      "description": "Cash payment instrument object",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "type": "object",
          "properties": {
            "receivedBy": {
              "description": "The receiver's name",
              "type": "string"
            }
          }
        }
      ]
    },
    "payment-card": {
      "description": "Payment card payment instrument object",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "type": "object",
          "required": [
            "paymentCardId"
          ],
          "properties": {
            "paymentCardId": {
              "description": "The payment card identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            },
            "gatewayAccountId": {
              "description": "The payment gateway identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            }
          }
        }
      ]
    },
    "paypal": {
      "description": "PayPal payment instrument object",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "type": "object",
          "required": [
            "payPalAccountId"
          ],
          "properties": {
            "payPalAccountId": {
              "description": "The PayPal account identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            },
            "gatewayAccountId": {
              "description": "The payment gateway identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            }
          }
        }
      ]
    },
    "AmountAdjustment": {
      "type": "object",
      "discriminator": "method",
      "properties": {
        "method": {
          "type": "string",
          "enum": [
            "none",
            "partial",
            "discount"
          ]
        }
      },
      "required": [
        "method"
      ]
    },
    "PaymentRetry": {
      "type": "object",
      "properties": {
        "attempts": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "object",
            "properties": {
              "scheduleInstruction": {
                "$ref": "#/definitions/CommonScheduleInstruction"
              },
              "paymentInstruction": {
                "$ref": "#/definitions/AmountAdjustment"
              }
            },
            "required": [
              "scheduleInstruction",
              "paymentInstruction"
            ]
          }
        },
        "afterAttemptPolicy": {
          "description": "The policy on the attempt finishes",
          "type": "string",
          "enum": [
            "none",
            "change-subscription-renewal-time"
          ]
        },
        "afterRetryEndPolicy": {
          "description": "The policy on the retry ends",
          "type": "string",
          "enum": [
            "none",
            "cancel-subscription"
          ]
        }
      },
      "required": [
        "attempts",
        "afterAttemptPolicy",
        "afterRetryEndPolicy"
      ]
    },
    "discount": {
      "allOf": [
        {
          "$ref": "#/definitions/AmountAdjustment"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "description": "The payment amount discount",
              "type": "number",
              "format": "float"
            },
            "type": {
              "description": "The payment amount discount type",
              "type": "string",
              "enum": [
                "percent",
                "fixed"
              ]
            }
          },
          "required": [
            "value",
            "type"
          ]
        }
      ]
    },
    "partial": {
      "allOf": [
        {
          "$ref": "#/definitions/AmountAdjustment"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "description": "The payment amount",
              "type": "number",
              "format": "float"
            },
            "type": {
              "description": "The payment amount type",
              "type": "string",
              "enum": [
                "percent",
                "fixed"
              ]
            }
          },
          "required": [
            "value",
            "type"
          ]
        }
      ]
    },
    "PaymentToken": {
      "type": "object",
      "required": [
        "method",
        "paymentInstrument"
      ],
      "properties": {
        "id": {
          "description": "The token identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "method": {
          "type": "string",
          "description": "The payment method",
          "enum": [
            "payment-card",
            "ach"
          ]
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentTokenInstrument"
        },
        "fingerprint": {
          "description": "Device fingerprint hash",
          "type": "string"
        },
        "billingAddress": {
          "description": "The Address. Required if bank account is not created from Token",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "PaymentTokenInstrument": {
      "type": "object",
      "description": "Payment Token instrument object",
      "properties": {
        "pan": {
          "description": "The card PAN (Primary Account Number), required if the method is `payment-card`",
          "type": "string"
        },
        "expMonth": {
          "description": "Card's expiry month, required if the method is `payment-card`",
          "type": "integer"
        },
        "expYear": {
          "description": "Card's expiry year, required if the method is `payment-card`",
          "type": "integer"
        },
        "cvv": {
          "description": "The CVV/CVC of the payment card",
          "type": "string"
        },
        "routingNumber": {
          "description": "Routing Number, required if the method is `bank-account`",
          "type": "integer"
        },
        "accountNumber": {
          "description": "AccountNumber, required if the method is `bank-account`",
          "type": "integer"
        },
        "accountType": {
          "description": "Account Type",
          "type": "string"
        },
        "bankName": {
          "description": "Bank name",
          "type": "string"
        }
      }
    },
    "PayPalAccount": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The PayPal identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The Customer's ID.",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "billingAddress": {
          "description": "The Customer's Billing Address.",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "username": {
          "description": "PayPal username.",
          "type": "string"
        },
        "status": {
          "description": "PayPal Account status",
          "type": "string",
          "readOnly": true,
          "enum": [
            "inactive",
            "active",
            "deactivated"
          ]
        },
        "createdTime": {
          "description": "PayPal Account created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "PayPal Account updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/ApprovalUrlLink"
            }
          ]
        }
      },
      "required": [
        "customerId",
        "billingAddress"
      ]
    },
    "Plan": {
      "type": "object",
      "required": [
        "name",
        "currency"
      ],
      "properties": {
        "id": {
          "description": "The website identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "name": {
          "description": "The plan name",
          "type": "string"
        },
        "currency": {
          "description": "Currency (three letter ISO 4217 code)",
          "type": "string"
        },
        "currencySign": {
          "description": "Currency sign",
          "readOnly": true,
          "type": "string"
        },
        "isActive": {
          "description": "If the plan is not active, customers cannot subscribe to the plan (default to true)",
          "type": "boolean"
        },
        "description": {
          "description": "The plan description",
          "type": "string"
        },
        "richDescription": {
          "description": "The plan rich description - supports HTML",
          "type": "string"
        },
        "recurringAmount": {
          "description": "The amount that recurs according to the schedule",
          "type": "number",
          "format": "double"
        },
        "recurringPeriodUnit": {
          "description": "The unit of time",
          "type": "string",
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ]
        },
        "recurringPeriodLength": {
          "description": "The length of time (used with the recurringPeriodUnit)",
          "type": "integer"
        },
        "trialAmount": {
          "description": "The amount of a trial - 0 is a valid value (for free)",
          "type": "number",
          "format": "double"
        },
        "trialPeriodUnit": {
          "description": "The unit of time",
          "type": "string",
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ]
        },
        "trialPeriodLength": {
          "description": "The length of time (used with the trialPeriodUnit)",
          "type": "integer"
        },
        "setupAmount": {
          "description": "The amount of a setup - 0 is a valid value (for free)",
          "type": "number",
          "format": "double"
        },
        "expiredTime": {
          "description": "Time when the plan is not longer valid",
          "type": "string",
          "format": "date-time"
        },
        "contractTermUnit": {
          "description": "The unit of time",
          "type": "string",
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ]
        },
        "contractTermLength": {
          "description": "The length that corresponds with the contractTermUnit",
          "type": "integer"
        },
        "recurringPeriodLimit": {
          "description": "The number of times a subscription will rebill until the contract is over",
          "type": "integer"
        },
        "minQuantity": {
          "description": "Minimum quantity per order, defaults to 1",
          "type": "integer"
        },
        "maxQuantity": {
          "description": "Maximum quantity per order (NULL if no maximum)",
          "type": "integer"
        },
        "createdTime": {
          "description": "Plan created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Plan updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "PriceBasedShippingRate": {
      "type": "object",
      "required": [
        "name",
        "currency",
        "price"
      ],
      "properties": {
        "name": {
          "description": "The shipping rate name",
          "type": "string",
          "maxLength": 255
        },
        "minOrderSubtotal": {
          "description": "Minimum order subtotal for which this shipping rate is applicable, defaults to 0.00",
          "type": "number",
          "format": "double",
          "default": 0
        },
        "maxOrderSubtotal": {
          "description": "Maximum order subtotal for which this shipping rate is applicable (NULL if no maximum)",
          "type": "number",
          "format": "double"
        },
        "price": {
          "description": "The shipping price - 0 is a valid value (for free)",
          "type": "number",
          "format": "double"
        },
        "currency": {
          "description": "Currency (three letter ISO 4217 code)",
          "type": "string"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Product": {
      "type": "object",
      "required": [
        "name"
      ],
      "description": "Your product includes digital goods, services, and physical goods.\nProducts appear on invoice line items. If you set a tax category identifier,\ntaxes will be calculated upon invoice generation.\n",
      "example": "{\n  \"id\": \"stringid\",\n  \"name\": \"Widget\",\n  \"description\": \"Fantastic widget\",\n  \"taxCategoryId\": null,\n  \"requiresShipping\": true,\n  \"accountingCode\": \"100\",\n  \"customFields\": [],\n  \"createdTime\": \"2015-08-27 13:45:12\",\n  \"updatedTime\": \"2015-08-27 13:45:12\",\n  \"_links\": [\n      {\n        \"rel\": \"self\",\n        \"href\": \"https://api.rebilly.com/v2.1/products/stringid\"\n      }\n  ]\n}\n",
      "properties": {
        "id": {
          "description": "The product identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "name": {
          "description": "The product name",
          "type": "string",
          "maxLength": 255
        },
        "description": {
          "description": "The product description",
          "type": "string",
          "maxLength": 512
        },
        "taxCategoryId": {
          "description": "The product's tax category identifier string",
          "type": "string",
          "enum": [
            99999,
            20010,
            40030,
            51020,
            51010,
            31000,
            30070
          ]
        },
        "requiresShipping": {
          "description": "If the product requires shipping, shipping calculations will be applied",
          "type": "boolean"
        },
        "accountingCode": {
          "description": "The product accounting code",
          "type": "string"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "createdTime": {
          "description": "The product created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The product updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "ResetPasswordToken": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "token": {
          "description": "The token's identifier string",
          "type": "string",
          "readOnly": true
        },
        "username": {
          "description": "The token's username",
          "type": "string"
        },
        "password": {
          "description": "Token's password (only for POST)",
          "type": "string",
          "format": "password"
        },
        "credential": {
          "description": "Token's credential ID",
          "type": "string"
        },
        "expiredTime": {
          "description": "Password expired time",
          "type": "string",
          "format": "date-time"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "ResourceCustomFields": {
      "description": "\"Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}\"`.\nThe format must follow the saved format (see Custom Fields section for the formats).\n",
      "type": "object"
    },
    "ResourceId": {
      "type": "string",
      "description": "The resource ID. Defaults to UUID v4",
      "maxLength": 50,
      "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
    },
    "RiskMetadata": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "description": "The customer's IP",
          "type": "string",
          "format": "ipv4"
        },
        "isProxy": {
          "description": "True if customer's ip address is related to proxy",
          "type": "boolean",
          "readOnly": true
        },
        "isVpn": {
          "description": "True if customer's ip address is related to VPN",
          "type": "boolean",
          "readOnly": true
        },
        "isTor": {
          "description": "True if customer's ip address is related to TOR",
          "type": "boolean",
          "readOnly": true
        },
        "isHosting": {
          "description": "True if customer's ip address is related to hosting",
          "type": "boolean",
          "readOnly": true
        },
        "vpnServiceName": {
          "description": "VPN service name, if available",
          "type": "string",
          "readOnly": true
        },
        "isp": {
          "description": "Internet Service Provider name, if available",
          "type": "string",
          "readOnly": true
        },
        "country": {
          "description": "Country ISO Alpha-2 code for specified ipAddress",
          "maxLength": 2,
          "type": "string",
          "readOnly": true,
          "example": "US"
        },
        "city": {
          "description": "City for specified ipAddress",
          "type": "string",
          "readOnly": true,
          "example": "New York"
        },
        "latitude": {
          "description": "Latitude for specified ipAddress",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "longitude": {
          "description": "Longitude for specified ipAddress",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "postalCode": {
          "description": "Postal code for specified ipAddress",
          "type": "string",
          "maxLength": 10,
          "readOnly": true
        },
        "timeZone": {
          "description": "Time zone for specified ipAddress",
          "type": "string",
          "readOnly": true,
          "example": "America/New_York"
        },
        "accuracyRadius": {
          "description": "Accuracy radius for specified ipAddress (kilometers)",
          "type": "integer",
          "readOnly": true
        },
        "fingerprint": {
          "description": "The fingerprint",
          "type": "string"
        },
        "httpHeaders": {
          "description": "HTTP headers",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "User-Agent": "Mozilla/5.0",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
          }
        },
        "distance": {
          "description": "Distance between IP Address and Billing Address geolocation (kilometers)",
          "type": "integer",
          "readOnly": true
        },
        "score": {
          "description": "Risk score computed per all the factors",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "MatchedRule": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "id": {
          "description": "Event tracking id",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "event": {
          "$ref": "#/definitions/EventType"
        },
        "description": {
          "description": "Rule's description",
          "type": "string"
        },
        "rulesVersion": {
          "type": "integer",
          "description": "Rule version"
        },
        "occurredTime": {
          "description": "Time when event occurred.",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "context": {
          "type": "object",
          "description": "Event's context",
          "additionalProperties": {
            "type": "string"
          }
        },
        "processedRules": {
          "type": "object",
          "description": "Processed rules",
          "properties": {
            "name": {
              "type": "string",
              "description": "Rule name"
            },
            "actions": {
              "type": "array",
              "description": "Rule actions applied",
              "items": {
                "type": "string"
              }
            },
            "result": {
              "type": "string",
              "description": "Rule result"
            }
          }
        }
      }
    },
    "CommonScheduleInstruction": {
      "type": "object",
      "description": "The calculation instruction of scheduled time",
      "discriminator": "method",
      "properties": {
        "method": {
          "type": "string",
          "enum": [
            "auto",
            "immediately",
            "date-interval",
            "day-of-month",
            "day-of-week"
          ]
        }
      },
      "required": [
        "method"
      ]
    },
    "CustomEventScheduleInstruction": {
      "type": "object",
      "description": "The calculation instruction of scheduled time",
      "discriminator": "method",
      "properties": {
        "method": {
          "type": "string",
          "enum": [
            "date-interval",
            "day-of-month",
            "day-of-week"
          ]
        }
      },
      "required": [
        "method"
      ]
    },
    "DayOfWeek": {
      "type": "string",
      "enum": [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ]
    },
    "auto": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        }
      ]
    },
    "date-interval": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        },
        {
          "$ref": "#/definitions/CustomEventScheduleInstruction"
        },
        {
          "type": "object",
          "properties": {
            "duration": {
              "type": "integer",
              "description": "The number of the units",
              "minimum": 1
            },
            "unit": {
              "$ref": "#/definitions/TimeUnit"
            }
          },
          "required": [
            "duration",
            "unit"
          ]
        }
      ]
    },
    "day-of-month": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        },
        {
          "$ref": "#/definitions/CustomEventScheduleInstruction"
        },
        {
          "type": "object",
          "properties": {
            "day": {
              "type": "integer",
              "minimum": 1,
              "maximum": 31,
              "description": "The day of the month when event will be scheduled.\nBe aware if the month has less days,\nthe last day of the month will be selected.\n"
            },
            "time": {
              "$ref": "#/definitions/Time"
            }
          },
          "required": [
            "day"
          ]
        }
      ]
    },
    "day-of-week": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        },
        {
          "$ref": "#/definitions/CustomEventScheduleInstruction"
        },
        {
          "type": "object",
          "properties": {
            "day": {
              "$ref": "#/definitions/DayOfWeek"
            },
            "week": {
              "type": "string",
              "default": "next",
              "enum": [
                "next",
                "first-in-month",
                "last-in-month"
              ]
            },
            "time": {
              "$ref": "#/definitions/Time"
            }
          },
          "required": [
            "day"
          ]
        }
      ]
    },
    "immediately": {
      "allOf": [
        {
          "$ref": "#/definitions/CommonScheduleInstruction"
        }
      ]
    },
    "Time": {
      "type": "string",
      "format": "date-time",
      "pattern": "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](Z(\\+|\\-)([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])?$"
    },
    "TimeUnit": {
      "type": "string",
      "enum": [
        "second",
        "seconds",
        "minute",
        "minutes",
        "hour",
        "hours",
        "day",
        "days",
        "month",
        "months",
        "year",
        "years"
      ]
    },
    "ServerTimestamp": {
      "type": "string",
      "description": "Read-only timestamp, automatically assigned on back-end.",
      "format": "date-time",
      "readOnly": true
    },
    "ShippingZone": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "description": "The shipping zone identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "name": {
          "description": "The shipping zone name",
          "type": "string",
          "maxLength": 255
        },
        "countries": {
          "description": "Countries covered by the shipping zone. A country can only belong to one shipping zone (no overlapping).\nThis property can be empty or null to create a default shipping zone for countries that were not specified in other zones.\n",
          "type": "array",
          "items": {
            "description": "Country ISO Alpha-2 code",
            "type": "string",
            "pattern": "^[A-Z]{2}$"
          }
        },
        "rates": {
          "description": "Price-based shipping rate instructions",
          "type": "array",
          "items": {
            "description": "Price based shipping rate instruction",
            "allOf": [
              {
                "$ref": "#/definitions/PriceBasedShippingRate"
              }
            ]
          }
        },
        "isDefault": {
          "description": "Is this Shipping Zone default",
          "readOnly": true
        },
        "createdTime": {
          "description": "The shipping zone created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The shipping zone updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Subscription": {
      "type": "object",
      "required": [
        "customerId",
        "planId",
        "websiteId"
      ],
      "properties": {
        "id": {
          "description": "The Subscription identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "Unique id for each customer",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "planId": {
          "description": "Unique id for each plan",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websiteId": {
          "description": "Unique id for each website",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "initialInvoiceId": {
          "description": "Unique id for the initial invoice",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "deliveryAddress": {
          "description": "Delivery address",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "billingAddress": {
          "description": "Billing address",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "status": {
          "description": "Subscription status is deprecated and the values will change to `active`, `canceled`.",
          "type": "string",
          "readOnly": true,
          "enum": [
            "Active",
            "Will become active at a future date",
            "Active but set to cancel at next rebill date",
            "Cancelled",
            "Inactive",
            "Suspended"
          ]
        },
        "quantity": {
          "description": "Quantity for each subscription. Default value to 1",
          "type": "integer"
        },
        "autopay": {
          "description": "Autopay determines if a payment attempt will be automatic",
          "type": "boolean",
          "default": true
        },
        "inTrial": {
          "description": "True if the subscription is currently in a trial period",
          "type": "boolean",
          "readOnly": true
        },
        "rebillNumber": {
          "description": "The current period number",
          "type": "integer",
          "readOnly": true
        },
        "canceledBy": {
          "description": "Canceled by",
          "type": "string",
          "readOnly": true,
          "enum": [
            "merchant",
            "customer",
            "rebilly"
          ]
        },
        "cancelCategory": {
          "description": "Cancel category",
          "type": "string",
          "readOnly": true,
          "enum": [
            "billing-failure",
            "did-not-use",
            "did-not-want",
            "missing-features",
            "bugs-or-problems",
            "do-not-remember",
            "risk-warning",
            "contract-expired",
            "too-expensive",
            "never-started",
            "switched-plan",
            "other"
          ]
        },
        "cancelDescription": {
          "description": "Cancel reason description in free form",
          "type": "string",
          "readOnly": true,
          "maxLength": 255
        },
        "lineItems": {
          "description": "Subscription line items which queue until the next renewal (or interim) invoice is issued for the subscription.",
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "object",
            "description": "Line item",
            "properties": {
              "type": {
                "description": "Type of line item",
                "type": "string",
                "enum": [
                  "debit",
                  "credit"
                ]
              },
              "description": {
                "description": "Description of line item",
                "type": "string"
              },
              "unitPriceAmount": {
                "description": "Unit price in minor unit coins of the line item",
                "type": "integer",
                "example": 4995
              },
              "unitPriceCurrency": {
                "description": "Currency ISO code",
                "type": "string",
                "example": "USD"
              },
              "quantity": {
                "description": "Quantity of line item",
                "type": "integer",
                "example": 1
              },
              "periodStartTime": {
                "description": "Date-time when the period begins for this item",
                "type": "string",
                "format": "date-time"
              },
              "periodEndTime": {
                "description": "Date-time when the period ends for this item",
                "type": "string",
                "format": "date-time"
              },
              "createdTime": {
                "description": "Date-time when the item was added to the subscription",
                "type": "string",
                "format": "date-time"
              }
            }
          }
        },
        "lineItemSubtotal": {
          "description": "Subtotal of line items in this subscription (signed value).  If credits exceed debits, it will be a negative number.",
          "readOnly": true,
          "type": "number",
          "example": 49.95
        },
        "riskMetadata": {
          "description": "Risk metadata",
          "allOf": [
            {
              "$ref": "#/definitions/RiskMetadata"
            }
          ]
        },
        "startTime": {
          "description": "Subscription start time",
          "type": "string",
          "format": "date-time"
        },
        "activationTime": {
          "description": "Subscription activation time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "endTime": {
          "description": "Subscription end time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "renewalTime": {
          "description": "Subscription renewal time",
          "type": "string",
          "format": "date-time"
        },
        "canceledTime": {
          "description": "Subscription canceled time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "createdTime": {
          "description": "Subscription created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Subscription updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/PlanLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            }
          ]
        }
      }
    },
    "SubscriptionChange": {
      "type": "object",
      "required": [
        "planId",
        "renewalPolicy",
        "prorated"
      ],
      "properties": {
        "planId": {
          "description": "The plan identifier string",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "renewalPolicy": {
          "description": "The value determines whether the subscription retains its current `renewalTime` or resets it to a newly calculated `renewalTime`.",
          "type": "string",
          "enum": [
            "reset",
            "retain"
          ]
        },
        "prorated": {
          "description": "Whether or not to give a pro rata credit for the amount of time remaining between the `effectiveTime` and the end of the current period.\nIn addition, if the `renewalTime` is retained (by setting the `renewalPolicy` to `retain`), then a pro rata debit will occur as well,\nfor the amount between the `effectiveTime` and the `renewalTime` as a percentage of the normal period size.\n",
          "type": "boolean"
        },
        "effectiveTime": {
          "description": "The date from which the renewal time (for `reset` operations) and proration calculations are made.  If omitted, it will default to the current time.",
          "type": "string",
          "format": "date-time"
        },
        "preview": {
          "description": "If set to true, it will not change the subscription.  It allows for a way to preview the changes that would be made to a subscription.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "SubscriptionInvoice": {
      "type": "object",
      "properties": {
        "transactionId": {
          "description": "If present, applies a payment to the invoice created.  If the payment is for the invoice total, it would be marked as paid.",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        }
      }
    },
    "ThreeDSecure": {
      "type": "object",
      "required": [
        "enrolled",
        "enrollmentEci",
        "customerId",
        "gatewayAccountId",
        "paymentCardId",
        "websiteId",
        "currency",
        "amount"
      ],
      "properties": {
        "id": {
          "description": "The 3D Secure entry identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "Related customer ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "gatewayAccountId": {
          "description": "Related gateway account ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "paymentCardId": {
          "description": "Related payment card ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websiteId": {
          "description": "Related Website ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "enrolled": {
          "description": "Is the cardholder enrolled in 3DSecure",
          "type": "string",
          "enum": [
            "Y",
            "N",
            "U"
          ]
        },
        "enrollmentEci": {
          "description": "The 3D Secure entry enrollment eci",
          "type": "string"
        },
        "eci": {
          "description": "The 3D Secure entry electronic commerce indicator",
          "type": "integer"
        },
        "cavv": {
          "description": "The 3D Secure entry cardholder authentication verification value",
          "type": "string"
        },
        "xid": {
          "description": "The 3D Secure entry transaction Id",
          "type": "string"
        },
        "payerAuthResponseStatus": {
          "description": "The 3D Secure entry Auth Response Status",
          "type": "string",
          "enum": [
            "Y",
            "N",
            "U",
            "A"
          ]
        },
        "signatureVerification": {
          "description": "If signature was verified",
          "type": "string",
          "enum": [
            "Y",
            "N"
          ]
        },
        "amount": {
          "description": "Transaction amount",
          "type": "number",
          "format": "double"
        },
        "currency": {
          "description": "The currency three letter code",
          "type": "string"
        },
        "createdTime": {
          "description": "The 3D Secure entry created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "TransactionGatewayLog": {
      "type": "object",
      "readOnly": true,
      "properties": {
        "headers": {
          "description": "The request headers",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "url": {
          "description": "The request URL",
          "type": "string"
        },
        "request": {
          "description": "The request body",
          "type": "string"
        },
        "response": {
          "description": "The response body",
          "type": "string"
        },
        "duration": {
          "description": "The request time, msec",
          "type": "integer"
        },
        "createdTime": {
          "description": "The log entry created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/TransactionLink"
            }
          ]
        }
      }
    },
    "TransactionRefund": {
      "type": "object",
      "required": [
        "amount"
      ],
      "properties": {
        "amount": {
          "description": "Refund amount",
          "type": "number",
          "format": "double"
        }
      }
    },
    "RedirectUrls": {
      "type": "object",
      "description": "The redirect URIs",
      "required": [
        "error",
        "success",
        "decline",
        "cancel"
      ],
      "properties": {
        "error": {
          "type": "string",
          "format": "url"
        },
        "success": {
          "type": "string",
          "format": "url"
        },
        "decline": {
          "type": "string",
          "format": "url"
        },
        "cancel": {
          "type": "string",
          "format": "url"
        }
      }
    },
    "ThreeDSecureResult": {
      "type": "object",
      "readOnly": true,
      "required": [
        "enrolled",
        "authenticated",
        "liability"
      ],
      "properties": {
        "enrolled": {
          "description": "Is the cardholder enrolled in 3D Secure",
          "type": "string",
          "enum": [
            "yes",
            "no",
            "invalid card/timeout",
            "unavailable"
          ]
        },
        "authenticated": {
          "description": "The 3D Secure entry Auth Response Status",
          "type": "string",
          "enum": [
            "yes",
            "no",
            "not applicable",
            "attempted"
          ]
        },
        "liability": {
          "type": "string",
          "enum": [
            "protected",
            "not protected",
            "protected (attempt)"
          ]
        }
      }
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The transaction identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "type": {
          "description": "Transaction type",
          "type": "string",
          "readOnly": true,
          "enum": [
            "authorize",
            "capture",
            "credit",
            "refund",
            "sale",
            "void"
          ]
        },
        "status": {
          "description": "Transaction status",
          "type": "string",
          "readOnly": true,
          "enum": [
            "completed",
            "connection-error",
            "never-sent",
            "pending",
            "sending",
            "suspended",
            "timeout",
            "waiting-capture",
            "waiting-refund"
          ]
        },
        "result": {
          "description": "Transaction result",
          "type": "string",
          "readOnly": true,
          "enum": [
            "abandoned",
            "approved",
            "canceled",
            "declined",
            "unknown"
          ]
        },
        "amount": {
          "description": "The transactions's amount",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "currency": {
          "description": "The transactions's currency",
          "type": "string",
          "readOnly": true
        },
        "parentTransactionId": {
          "description": "The transactions's parent ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "childTransactions": {
          "description": "The child transaction IDs",
          "readOnly": true,
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "invoiceIds": {
          "description": "The invoice IDs related to transaction",
          "readOnly": true,
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "subscriptionIds": {
          "description": "The subscription IDs related to transaction's invoice(s)",
          "readOnly": true,
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "planIds": {
          "description": "The plan IDs related to transaction's subscription(s)",
          "readOnly": true,
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "isRebill": {
          "type": "boolean",
          "readOnly": true
        },
        "rebillNumber": {
          "description": "The transactions's rebill number",
          "type": "integer",
          "readOnly": true
        },
        "gatewayAccountId": {
          "description": "The transactions's Gateway Account ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "gatewayTransactionId": {
          "description": "The gateway's transaction ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "gateway": {
          "type": "object",
          "description": "The related gateway information",
          "readOnly": true,
          "properties": {
            "response": {
              "description": "The gateway's response",
              "type": "object",
              "properties": {
                "code": {
                  "description": "The gateway's response code",
                  "type": "string"
                },
                "message": {
                  "description": "The gateway's response message",
                  "type": "string"
                },
                "type": {
                  "description": "The gateway's response type",
                  "type": "string"
                },
                "originalCode": {
                  "description": "The raw, unmapped gateway's response code",
                  "type": "string"
                },
                "originalMessage": {
                  "description": "The raw, unmapped gateway's response message",
                  "type": "string"
                }
              }
            },
            "avsResponse": {
              "description": "The AVS gateway's response",
              "type": "object",
              "properties": {
                "code": {
                  "description": "The response code",
                  "type": "string"
                },
                "message": {
                  "description": "The response message",
                  "type": "string"
                },
                "originalCode": {
                  "description": "The raw response code",
                  "type": "string"
                },
                "originalMessage": {
                  "description": "The raw response message",
                  "type": "string"
                }
              }
            },
            "cvvResponse": {
              "description": "The CVV gateway's response",
              "type": "object",
              "properties": {
                "code": {
                  "description": "The response code",
                  "type": "string"
                },
                "message": {
                  "description": "The response message",
                  "type": "string"
                },
                "originalCode": {
                  "description": "The raw response code",
                  "type": "string"
                },
                "originalMessage": {
                  "description": "The raw response message",
                  "type": "string"
                }
              }
            }
          }
        },
        "gatewayName": {
          "readOnly": true,
          "description": "Payment Gateway name, available only when transaction use gateway, else null",
          "allOf": [
            {
              "$ref": "https://rebilly.github.io/api-standards/schema/json-schema-draft-04/payment-gateways/gateway-name.json"
            }
          ]
        },
        "acquirerName": {
          "readOnly": true,
          "description": "Acquirer name, available only when transaction use gateway, else null",
          "allOf": [
            {
              "$ref": "https://rebilly.github.io/api-standards/schema/json-schema-draft-04/payment-gateways/acquirer-name.json"
            }
          ]
        },
        "websiteId": {
          "description": "Website's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "customerId": {
          "description": "Customer's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "method": {
          "description": "Payment Method",
          "allOf": [
            {
              "$ref": "#/definitions/Method"
            }
          ]
        },
        "velocity": {
          "description": "The number of transactions by the same customer in the past 24 hours",
          "type": "integer"
        },
        "bin": {
          "description": "Payment Card BIN",
          "type": "string",
          "format": "bin",
          "readOnly": true
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "billingAddress": {
          "description": "Billing Address",
          "allOf": [
            {
              "$ref": "#/definitions/ContactObject"
            }
          ]
        },
        "has3ds": {
          "type": "boolean",
          "readOnly": true
        },
        "3ds": {
          "allOf": [
            {
              "$ref": "#/definitions/ThreeDSecureResult"
            }
          ]
        },
        "hasDcc": {
          "description": "True if transaction has Dynamic Currency Conversion applied",
          "type": "boolean",
          "readOnly": true
        },
        "dcc": {
          "description": "Dynamic Currency Conversion detailed information. Null if hasDcc is false",
          "type": "object",
          "readOnly": true,
          "properties": {
            "base": {
              "type": "object",
              "description": "Initial amount and currency to convert from",
              "properties": {
                "amount": {
                  "type": "number",
                  "format": "double"
                },
                "currency": {
                  "type": "string"
                }
              }
            },
            "quote": {
              "type": "object",
              "description": "Suggested amount and currency to convert to",
              "properties": {
                "amount": {
                  "type": "number",
                  "format": "double"
                },
                "currency": {
                  "type": "string"
                }
              }
            },
            "usdMarkup": {
              "description": "The amount of markup translated to USD",
              "type": "number",
              "format": "double"
            },
            "outcome": {
              "type": "string",
              "description": "Dynamic Currency Conversion outcome",
              "enum": [
                "rejected",
                "selected",
                "unknown"
              ]
            }
          }
        },
        "riskScore": {
          "description": "The transactions's risk score",
          "type": "integer",
          "readOnly": true
        },
        "riskMetadata": {
          "description": "Risk metadata",
          "allOf": [
            {
              "$ref": "#/definitions/RiskMetadata"
            }
          ]
        },
        "redirectUrls": {
          "$ref": "#/definitions/RedirectUrls"
        },
        "retryInstruction": {
          "$ref": "#/definitions/PaymentRetry"
        },
        "retryNumber": {
          "type": "integer",
          "readOnly": true,
          "description": "The position in the sequence of retries"
        },
        "retriedTransactionId": {
          "readOnly": true,
          "description": "The retried transaction ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "retriesResult": {
          "type": "string",
          "readOnly": true,
          "description": "Retries sequence result",
          "enum": [
            "approved",
            "canceled",
            "declined",
            "scheduled"
          ]
        },
        "isRetry": {
          "type": "boolean",
          "readOnly": true,
          "description": "True if this transaction is retry."
        },
        "description": {
          "type": "string",
          "description": "The payment description",
          "maxLength": 255
        },
        "isDisputed": {
          "description": "True if transaction is disputed",
          "type": "boolean",
          "readOnly": true
        },
        "isReconciled": {
          "description": "True if the transaction has been verified with gateway batch data",
          "type": "boolean",
          "readOnly": true
        },
        "hadDiscrepancy": {
          "description": "True if the transaction has been updated due to a disprepancy with its source of truth",
          "type": "boolean",
          "readOnly": true
        },
        "orderId": {
          "description": "The transactions's order ID",
          "type": "string"
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "scheduledTime": {
          "type": "string",
          "description": "The time the transaction is scheduled for collection",
          "format": "date-time"
        },
        "processedTime": {
          "description": "Transaction processed time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "createdTime": {
          "description": "Transaction created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Transaction updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/GatewayAccountLink"
            },
            {
              "$ref": "#/definitions/PaymentCardLink"
            },
            {
              "$ref": "#/definitions/ParentTransactionLink"
            },
            {
              "$ref": "#/definitions/RetriedTransactionLink"
            },
            {
              "$ref": "#/definitions/LeadSourceLink"
            },
            {
              "$ref": "#/definitions/ApprovalUrlLink"
            },
            {
              "$ref": "#/definitions/CancelUrlLink"
            },
            {
              "$ref": "#/definitions/RefundUrlLink"
            },
            {
              "$ref": "#/definitions/DisputeLink"
            }
          ]
        }
      }
    },
    "UpdatePassword": {
      "type": "object",
      "properties": {
        "currentPassword": {
          "description": "Current user's password - used when requesting password change",
          "type": "string",
          "format": "password"
        },
        "newPassword": {
          "description": "New user's password - used when requesting password change",
          "type": "string",
          "format": "password"
        }
      }
    },
    "Website": {
      "type": "object",
      "required": [
        "name",
        "url",
        "servicePhone",
        "serviceEmail"
      ],
      "properties": {
        "id": {
          "description": "The website identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "name": {
          "description": "The website's name",
          "type": "string"
        },
        "url": {
          "description": "The website's domain address",
          "type": "string"
        },
        "servicePhone": {
          "description": "The website's customer service phone number",
          "type": "string"
        },
        "serviceEmail": {
          "description": "The website's customer service email address",
          "type": "string",
          "format": "email"
        },
        "createdTime": {
          "description": "Website created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Website updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/NotesLink"
            }
          ]
        }
      }
    }
  }
}
