{
  "swagger": "2.0",
  "info": {
    "version": "2.1",
    "title": "Rebilly REST API",
    "contact": {
      "name": "Rebilly API Support",
      "url": "https://www.rebilly.com/contact/",
      "email": "integrations@rebilly.com"
    },
    "license": {
      "name": "Rebilly",
      "url": "https://www.rebilly.com/api/license/"
    },
    "termsOfService": "https://www.rebilly.com/terms/",
    "x-logo": {
      "url": "https://rebilly.github.io/RebillyAPI/rb_apiLogo.svg",
      "backgroundColor": "#0033A0"
    }
  },
  "host": "api.rebilly.com",
  "basePath": "/v2.1",
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Introduction",
      "description": "The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable\nresource URLs.  It returns HTTP response codes to indicate errors.  It also\naccepts and returns JSON in the HTTP body.  You can use your favorite\nHTTP/REST library for your programming language to use Rebilly's API, or\nyou can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)\nand [C#](https://github.com/Rebilly/rebilly-dotnet-client)).\n"
    },
    {
      "name": "Authentication",
      "description": "When you sign up for an account, you are given your first API key.\nYou can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future). You authenticate to the\nRebilly API by providing your secret key in the request header.\n\nRebilly offers three forms of authentication:  private key, JSON Web Tokens, and\npublic key.\n- private key: authenticates each request by searching for the presence\nof an HTTP header: REB-APIKEY.\n- JWT: authenticates each request by the HTTP header: Authorization.\n- public key: authenticates by the HTTP header: REB-AUTH (read more on this below).\n\nRebilly also offers JSON Web Tokens (JWT) authentication, where you can control\nthe specific granular permissions and expiration for that JWT.  We call our resource\nfor generating JWT [Sessions](#tag/Sessions).\n\nRebilly also has a client-side authentication scheme that uses an\napiUser and HMAC-SHA1 signature (only for the Tokens resource), so\nthat you may safely create tokens from the client-side without compromising\nyour secret keys.\n\nNever share your secret keys. Keep them guarded and secure.\nThe client-side authentication scheme uses one HTTP header named REB-AUTH.\n"
    },
    {
      "name": "3D Secure",
      "description": "3D Secure is a way to authenticate and protect transactions.  Typically,\nit's only possible to protect the initial transaction in a subscription\nwith 3D Secure.\n"
    },
    {
      "name": "API Keys",
      "description": "Always keep your API Keys private.  In addition to your API Keys, you may use\nJSON Web Tokens (JWT) to authenticate to the API.  See\nour [Sessions](#tag/Sessions) resource for more information.\n"
    },
    {
      "name": "Bank Accounts",
      "description": "Bank Accounts are a type of payment instrument used to collect\nACH (echeck) payments, similar to how a payment\ncard would be used to for a credit card payment.\n"
    },
    {
      "name": "Blacklists",
      "description": "Your blacklists contains values of customerIds, email addresses,\nipAddresses, bank identification numbers, countries or payment cards that\nyou do NOT want to do business with. They are a good tool for managing\nrisk. A blacklist entry that expires after a period of time we call a\ngreylist.\n"
    },
    {
      "name": "Checkout Pages",
      "description": "Hosted checkout pages.\n"
    },
    {
      "name": "Contacts",
      "description": "Contacts belong to Customers. A Customer can have many contacts.\nSome contacts are associated to Invoices, Payment Cards, Subscriptions\nand Transactions.\n"
    },
    {
      "name": "Customers",
      "description": "Customers are your customers, sometimes known as accounts, clients,\nmembers, patrons, or players in other systems.\n"
    },
    {
      "name": "Customer Authentication",
      "description": "Create authentication credentials, login, logout, and verify your customers.\n"
    },
    {
      "name": "Custom Events",
      "description": "If system events can't solve your problems, you are able to create a custom event\nthat can fit your requirements, and use it to solve your own business logic.\n"
    },
    {
      "name": "Custom Fields",
      "description": "Create additional custom fields for particular resources.  You may name,\ndescribe, and determine the type of the schema.\n"
    },
    {
      "name": "Disputes",
      "description": "Handle disputes (chargebacks and retrievals).\n"
    },
    {
      "name": "Email Credentials",
      "description": "Send automated emails through our system by connecting to your third party\nSMTP server (or your third party email service provider's SMTP server).\n"
    },
    {
      "name": "Gateway Accounts",
      "description": "Gateway accounts connect payment request to third party networks and platforms.\n"
    },
    {
      "name": "Histograms",
      "description": "Histograms are for particular kinds of reports.\n"
    },
    {
      "name": "Invoices",
      "description": "Invoices leave a record for both you and your customer of the products sold.\n"
    },
    {
      "name": "Layouts",
      "description": "Layouts are used to hold collections of plans. A layout can be used to\npower a pricing page. You can make multiple layouts, and use rules to\ntarget them to different audiences.\n"
    },
    {
      "name": "Lead Sources",
      "description": "Lead sources track the marketing source of the customer.  Use lead sources\nto tie marketing analysis further into the customer lifecycle: such as\nrecurring revenues and disputes.  Lead sources can also be used as attributes\nby rules.\n"
    },
    {
      "name": "Notes",
      "description": "Leave notes on a customer record to have a handy location to share with\nothers who may interface with the customer.  It's great for customer service.\n"
    },
    {
      "name": "Organizations",
      "description": "Organizations include the name and address of the entities related to your\naccount. An account may be multi-national, and support multiple\norganizations. Note: Organizations are share between \"Live\" and \"Sandbox\"\n"
    },
    {
      "name": "Payments",
      "description": "Collect money from your customers with payments.  You can schedule a payment\nto occur in the future.  You can assign a dunning schedule to a payment to collect\nin the case of a decline.\n\nSome payments may be, what we term, suspended payments.  These types of payments\nrequire user interaction.  For example, an initial PayPal purchase, a 3D Secure\npurchase, China Union Pay, and more require the customer's interaction to\ncomplete the payment.  We call these a \"suspended\" payment flow.\n"
    },
    {
      "name": "Payment Cards",
      "description": "Payment cards are a type of payment instrument used for credit and debit card\nsales.  Rebilly securely vaults the full payment card number, and can pass it\nonward securely to any gateway account to transact business.\n"
    },
    {
      "name": "Payment Tokens",
      "description": "Payment tokens are used to reduce the scope of PCI DSS compliance.  A payment\ntoken can be made using a different authentication scheme (refer to the public key\nauthentication scheme in the Authentication section), which allows you to\ncreate a payment token directly from the browser, bypassing the need to send\nsensitive cardholder info to your servers.  We recommend using this with our\nRebilly.js library, which helps you wire a form into this API resource and create\npayment tokens.\n"
    },
    {
      "name": "Plans",
      "description": "Plans are a template for making a subscription.  For example, you may have a plan\nthat has a 30-day free trial followed by a recurring charge of $19.95 per month\nuntil canceled.  The combination of the plan and a request to make a subscription\nwill apply those instructions to create the invoices according to the plan's\nschedule.\n"
    },
    {
      "name": "Products",
      "description": "Proposed:  Your product includes digital goods, services, and physical goods.\n"
    },
    {
      "name": "Reports",
      "description": "Collect summary information.\n"
    },
    {
      "name": "Sessions",
      "description": "A session contains a token, which is a JSON Web Token.  The token is created\nwith a user's signin credentials.\n\nThis token can be used to authenticate to the API.  In addition, the session can be set to\nexpire at a particular time, and has very granular control over permissions.\nUse the token to then authenticate for further requests to the Rebilly API.\n\nThe token should be kept private, but could be stored on the user's browser\nclient to simulate a \"session.\"\n"
    },
    {
      "name": "Status",
      "description": "Check the status of the Rebilly API (no authentication required).\n"
    },
    {
      "name": "Subscriptions",
      "description": "A subscription applies a plan's template to create invoices for a customer at the\nappropriate scheduled intervals.  A subscription may also determine if the payment\nis collected automatically (with autopay set true).\n"
    },
    {
      "name": "Taxes",
      "description": "Proposed: You can map a product to a tax category.  The tax category is used by\ntax providers to calculate taxes for invoices.\n"
    },
    {
      "name": "Tracking",
      "description": "Tracking is a layer for accessing all the activity (API requests,\nsubscriptions, webhooks, events, etc.), thus providing easier\ndebugging and issues auditing.\n"
    },
    {
      "name": "Transactions",
      "description": "Get and refund transactions.\n"
    },
    {
      "name": "Users",
      "description": "A User represents a person who can login to Rebilly, and take actions subject to\ntheir granted permissions.\n"
    },
    {
      "name": "Websites",
      "description": "A Website represents the website/brand that customers interact with... You\ncould think of it like a brand.  For example, Nestle owns Perrier and Purina\nand PowerBar.\n\nWe recognize that some enterprises have more than one website (or brand).  The\nwebsite is related to each invoice and each payment gateway account.  This feature\nwould allow you to have gateway accounts that are related to multiple websites, or\nexclusive to particular websites.  And gives you more control over your business.\n"
    }
  ],
  "securityDefinitions": {
    "ApiKey": {
      "description": "When you sign up for an account, you are given your first API key.\nTo do so please follow this link: https://www.rebilly.com/site/signup/\nAlso you can generate additional API keys, and delete API keys (as you may\nneed to rotate your keys in the future).\n",
      "name": "REB-APIKEY",
      "type": "apiKey",
      "in": "header"
    },
    "JWT": {
      "description": "You can create a JSON Web Token (JWT) via our Sessions resource.\n",
      "type": "basic"
    },
    "RebAuth": {
      "description": "Only for the Tokens resource.\nThe REB-AUTH value is created in this way\nGenerate a Nonce (random string), and a Timestamp (unix timestamp)\nConcatenate the values of ApiUser, Nonce, and Timestamp (in that order).\nUse that value as the input data when you calculate the <a href=\"http://tools.ietf.org/html/rfc2104\">HMAC-SHA1</a> with your secret key, called the signature.\nForming the four data points into a JSON object.  {\"REB-APIUSER\":\"abcdefg\",\"REB-NONCE\":\"adfsjtreitou345fgkdafgj\",\"REB-TIMESTAMP\":\"1382591345\",\"REB-SIGNATURE\":\"a234fc95460401cfg09c9d09\"}\nThen base64 encode that JSON object.  This is the final value of the REB-AUTH HTTP header\n",
      "name": "REB-AUTH",
      "type": "apiKey",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKey": []
    }
  ],
  "responses": {
    "AccessForbidden": {
      "description": "Access forbidden, invalid API-KEY was used",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "Resource was not found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Conflict": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "InvalidDataError": {
      "description": "Invalid data was sent",
      "schema": {
        "$ref": "#/definitions/InvalidError"
      }
    }
  },
  "parameters": {
    "resourceId": {
      "name": "id",
      "in": "path",
      "description": "The resource identifier string",
      "type": "string",
      "required": true
    },
    "collectionLimit": {
      "name": "limit",
      "in": "query",
      "description": "The collection items limit",
      "type": "integer",
      "minimum": 0,
      "maximum": 1000
    },
    "collectionOffset": {
      "name": "offset",
      "in": "query",
      "description": "The collection items offset",
      "type": "integer",
      "minimum": 0
    },
    "collectionFilter": {
      "name": "filter",
      "in": "query",
      "type": "string",
      "description": "The collection items filter requires a special format.\nUse \",\" for multiple allowed values.  Use \";\" for multiple fields.\nSee the filter guide for more options and examples about this format.\n"
    },
    "collectionQuery": {
      "name": "q",
      "in": "query",
      "type": "string",
      "description": "The partial search of the text fields."
    },
    "collectionSort": {
      "name": "sort",
      "in": "query",
      "type": "string",
      "description": "The collection items sort field and order (prefix with \"-\" for descending sort)."
    },
    "collectionFields": {
      "name": "fields",
      "in": "query",
      "type": "string",
      "description": "Limit the returned fields to the list specified, separated by comma.  Note that id is always returned."
    },
    "collectionExpand": {
      "name": "expand",
      "in": "query",
      "type": "string",
      "description": "Expand response to get full related object intead of ID.  See the expand guide for more info."
    }
  },
  "paths": {
    "/3dsecure": {
      "get": {
        "tags": [
          "3D Secure"
        ],
        "summary": "Retrieve a list of ThreeDSecure entries",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ThreeDSecure"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "3D Secure"
        ],
        "summary": "Create a ThreeDSecure entry",
        "description": "Create a ThreeDSecure entry\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "ThreeDSecure resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThreeDSecure"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ThreeDSecure entry was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ThreeDSecure"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/3dsecure/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "3D Secure"
        ],
        "summary": "Retrieve a ThreeDSecure entry",
        "description": "Retrieve a ThreeDSecure entry with specified identifier string\n",
        "responses": {
          "200": {
            "description": "ThreeDSecure entry was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ThreeDSecure"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/api-keys": {
      "get": {
        "tags": [
          "API Keys"
        ],
        "summary": "Retrieve a list of api keys",
        "description": "Retrieve a list of api keys\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of api keys was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiKey"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "API Keys"
        ],
        "summary": "Create an api key",
        "description": "Create an api key\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "ApiKey resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Api Key was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/api-keys/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "API Keys"
        ],
        "summary": "Retrieve api key",
        "description": "Retrieve api key with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Api key was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "API Keys"
        ],
        "summary": "Create or update api key with predefined ID",
        "description": "Create or update api key with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "ApiKey resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ApiKey was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "201": {
            "description": "ApiKey was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "$ref": "#/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": [
          "API Keys"
        ],
        "summary": "Delete api key",
        "description": "Delete api key with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "ApiKey was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "ApiKey has related resources and cannot be deleted",
            "$ref": "#/responses/Conflict"
          }
        }
      }
    },
    "/authentication-options": {
      "get": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Read current authentication options",
        "description": "Read current authentication options\n",
        "responses": {
          "200": {
            "description": "Current authentication options was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuthenticationOptions"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "put": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Change authentication options",
        "description": "Change options\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Authentication Options resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthenticationOptions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication Options were updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/AuthenticationOptions"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/authentication-tokens": {
      "get": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Retrieve a list of auth tokens",
        "description": "Retrieve a list of auth tokens\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of auth tokens was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuthenticationToken"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Login",
        "description": "Login a user (customer)\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "AuthenticationToken resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthenticationToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Login successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/AuthenticationToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/authentication-tokens/{token}": {
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "description": "The token identifier string",
          "type": "string",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Verify",
        "description": "Verify an authentication token\n",
        "responses": {
          "200": {
            "description": "Authentication Token was verified",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/AuthenticationToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Logout a user",
        "description": "Logout a user\n",
        "responses": {
          "204": {
            "description": "User was logged out",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/bank-accounts": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve a list of bank accounts",
        "description": "Retrieve a list of Bank Accounts\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Bank Accounts was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BankAccount"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Create a Bank Account",
        "description": "Create a Bank Account\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "BankAccount resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Bank Account was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/bank-accounts/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve a Bank Account",
        "description": "Retrieve a Bank Account with specified identifier string\n",
        "responses": {
          "200": {
            "description": "BankAccount was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Create a BankAccount with predefined ID",
        "description": "Create or update a BankAccount with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "BankAccount resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BankAccount was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "201": {
            "description": "BankAccount was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/bank-accounts/{id}/deactivation": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Deactivate a Bank Account",
        "description": "Deactivate a Bank Account\n",
        "responses": {
          "201": {
            "description": "Deactivated successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/BankAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/blacklists": {
      "get": {
        "tags": [
          "Blacklists"
        ],
        "summary": "Retrieve a list of blacklists",
        "description": "Retrieve a list of blacklists\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Blacklists was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Blacklist"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Blacklists"
        ],
        "summary": "Create a blacklist",
        "description": "Create a blacklist\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Blacklist resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Blacklist was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/blacklists/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Blacklists"
        ],
        "summary": "Retrieve a blacklist",
        "description": "Retrieve a blacklist with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Blacklist was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Blacklists"
        ],
        "summary": "Create a blacklist with predefined ID",
        "description": "Create a blacklist with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Blacklist resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Blacklist was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Blacklist"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "description": "Blacklist exist and cannot be updated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": [
          "Blacklists"
        ],
        "summary": "Delete a blacklist",
        "description": "Delete a blacklist with predefined identifier string\n",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "description": "Blacklist was deleted"
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/checkout-pages": {
      "get": {
        "tags": [
          "Checkout Pages"
        ],
        "summary": "Retrieve a list of checkout pages",
        "description": "Retrieve a list of checkout pages\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of checkout pages was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CheckoutPage"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Checkout Pages"
        ],
        "summary": "Create a Checkout Page",
        "description": "Create a Checkout Page\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Checkout Page resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Checkout Page was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/checkout-pages/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Checkout Pages"
        ],
        "summary": "Retrieve a Checkout Page",
        "description": "Retrieve a Checkout Page with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Checkout Page was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Checkout Pages"
        ],
        "summary": "Create or update a Checkout Page with predefined ID",
        "description": "Create or update a Checkout Page with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Checkout Page resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checkout Page was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          },
          "201": {
            "description": "Checkout Page was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CheckoutPage"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Checkout Pages"
        ],
        "summary": "Delete a Checkout Page",
        "description": "Delete a Checkout Page with predefined identifier string\n",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "description": "Checkout Page was deleted"
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Checkout page cannot be deleted"
          }
        }
      }
    },
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Retrieve a list of contacts",
        "description": "Retrieve a list of contacts\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Contacts was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contact"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create a contact",
        "description": "Create a contact\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Contact resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Contact was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/contacts/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Retrieve a contact",
        "description": "Retrieve a contact with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Contact was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create or update a contact with predefined ID",
        "description": "Create or update a contact with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Contact resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Contact was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Contact exists and cannot be updated"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/credentials": {
      "get": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Retrieve a list of credentials",
        "description": "Retrieve a list of credentials\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Credentials was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Credential"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Create a credential",
        "description": "Create a credential\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Credential resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/credentials/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Retrieve a credential",
        "description": "Retrieve a credential with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Create or update a credential with predefined ID",
        "description": "Create or update a credential with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Credential resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Credential was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "201": {
            "description": "Credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Credential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Delete a credential",
        "description": "Delete a credential with predefined identifier string\n",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "description": "Credential was deleted"
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/custom-events": {
      "get": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Retrieve a list of custom events",
        "description": "Retrieve a list of custom events\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of custom events was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomEvent"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Create a custom event",
        "description": "Create a custom event\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Custom event resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Custom event was accepted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/custom-events/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Retrieve a custom event",
        "description": "Retrieve a custom event with predefined identifier string\n",
        "responses": {
          "200": {
            "description": "Custom event was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Create or update a custom event with predefined ID",
        "description": "Create or update a custom event with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Custom event resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Custom event was accepted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "description": "Custom event can't be modified",
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Delete a custom event",
        "description": "Delete a custom event with predefined identifier string\n",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "description": "Custom event was deleted"
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Custom event has related rules and cannot be deleted",
            "$ref": "#/responses/Conflict"
          }
        }
      }
    },
    "/custom-fields/{resource}": {
      "parameters": [
        {
          "name": "resource",
          "in": "path",
          "description": "The resource type string",
          "type": "string",
          "required": true,
          "enum": [
            "customers",
            "payment-cards",
            "subscriptions",
            "payments",
            "websites",
            "contacts"
          ]
        }
      ],
      "get": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Retrieve Custom Fields",
        "description": "Retrieve a schema of Custom Fields for the given resource type\n",
        "responses": {
          "200": {
            "description": "A schema of Custom Fields was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "description": "The list of custom fields",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomField"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/custom-fields/{resource}/{name}": {
      "parameters": [
        {
          "name": "resource",
          "in": "path",
          "description": "The resource type string",
          "type": "string",
          "required": true,
          "enum": [
            "customers",
            "payment-cards",
            "subscriptions",
            "payments",
            "websites",
            "contacts"
          ]
        },
        {
          "name": "name",
          "in": "path",
          "description": "The custom field's identifier string",
          "type": "string",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Retrieve a Custom Field",
        "description": "Retrieve a schema of the given Custom Field for the given resource type\n",
        "responses": {
          "200": {
            "description": "A schema of the Custom Field was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Create or alter a Custom Field",
        "description": "Create or alter a schema of the given Custom Field for the given resource type.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Custom Fields schema of the given resource type",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Custom Field was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          },
          "201": {
            "description": "The Custom Fields was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "description": "The schema is in use: remove all the associated data in order to remove or alter the schema",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Delete a custom field",
        "description": "Delete a custom field by its name\n",
        "responses": {
          "204": {
            "description": "Custom field has been deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "The field is in use: remove all the associated data first",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/customers": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Retrieve a list of customers",
        "description": "Retrieve a list of customers\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionQuery"
          },
          {
            "$ref": "#/parameters/collectionSort"
          },
          {
            "$ref": "#/parameters/collectionFields"
          },
          {
            "$ref": "#/parameters/collectionExpand"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Customers was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Create a customer",
        "description": "Create a customer\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Customer resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Customer was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/customers/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Retrieve a customer",
        "description": "Retrieve a customer with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Customer was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "summary": "Create a customer with predefined ID",
        "description": "Create a customer with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Customer resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "201": {
            "description": "Customer was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/disputes": {
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Retrieve a list of disputes",
        "description": "Retrieve a list of disputes\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of disputes was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Dispute"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Disputes"
        ],
        "summary": "Create a dispute",
        "description": "Create a dispute\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Dispute resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Dispute was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/disputes/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Retrieve a dispute",
        "description": "Retrieve a dispute with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Dispute was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Disputes"
        ],
        "summary": "Create or update a Dispute with predefined ID",
        "description": "Create or update a Dispute with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Dispute resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dispute was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          },
          "201": {
            "description": "Dispute was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Dispute"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/email-credentials": {
      "get": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Retrieve a list of email credentials",
        "description": "Retrieve a list of email credentials\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of email credentials was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmailCredential"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Create email credential",
        "description": "Create email credential",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "EmailCredential resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailCredential"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Email credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/EmailCredential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/email-credentials/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Retrieve email credential",
        "description": "Retrieve email credential with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Email credential was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/EmailCredential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Create or update email credential with predefined ID",
        "description": "Create or update email credential with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "EmailCredential resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmailCredential"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email credential was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/EmailCredential"
            }
          },
          "201": {
            "description": "Email credential was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/EmailCredential"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Email Credentials"
        ],
        "summary": "Delete an email credential",
        "description": "Delete an email credential with predefined identifier string\n",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "description": "Email credential was deleted"
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/forgot-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Sends an email with a link containing a token to reset user password",
        "description": "Sends an email with a link containing a token to reset user password\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Email resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Email"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Email sent successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/gateway-accounts": {
      "get": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Retrieve a list of gateway accounts",
        "description": "Retrieve a list of gateway accounts\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Gateway Accounts was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GatewayAccount"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Create a Gateway Account",
        "description": "Create a Gateway Account\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Gateway Account resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Gateway Account was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/gateway-accounts/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Retrieve a Gateway Account",
        "description": "Retrieve a Gateway Account with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Gateway Account was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Create or update a Gateway Account with predefined ID",
        "description": "Create or update a GatewayAccount with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Gateway Account resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gateway Account was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          },
          "201": {
            "description": "Gateway Account was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/GatewayAccount"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Gateway Accounts"
        ],
        "summary": "Delete a Gateway Account",
        "description": "Delete a Gateway Account with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Gateway Account was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/histograms/transactions": {
      "get": {
        "tags": [
          "Histograms"
        ],
        "summary": "Get Transaction histogram report data",
        "description": "Get Transaction histogram report data.\n",
        "parameters": [
          {
            "name": "periodStart",
            "in": "query",
            "description": "Report start day",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "periodEnd",
            "in": "query",
            "description": "Report end day",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "aggregationField",
            "in": "query",
            "description": "Report aggregation field",
            "required": true,
            "type": "string",
            "enum": [
              "website",
              "currency",
              "bin",
              "rebillNumber",
              "transactionResult",
              "transactionType",
              "gatewayAccount",
              "leadsAffiliate",
              "leadsCampaign",
              "leadsContent",
              "leadsMedium",
              "leadsSalesAgent",
              "leadsSource",
              "leadsSubAffiliate",
              "leadsTerm"
            ]
          },
          {
            "name": "aggregationPeriod",
            "in": "query",
            "description": "Report aggregation period",
            "required": true,
            "type": "string",
            "enum": [
              "hour",
              "day",
              "month"
            ]
          },
          {
            "name": "metric",
            "in": "query",
            "description": "Report metric",
            "required": true,
            "type": "string",
            "enum": [
              "ApprovalThroughput",
              "AuthApprovalThroughput",
              "AvgSalesPrice",
              "Refunds",
              "RefundCount",
              "Sales",
              "SalesCount"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction report was retrieved successfully.",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/HistogramData"
            }
          }
        }
      }
    },
    "/invoices": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Retrieve a list of invoices",
        "description": "Retrieve a list of invoices\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of invoices was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Invoice"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Create an invoice",
        "description": "Create an invoice\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Invoice resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Invoice was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/invoices/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Retrieve an invoice",
        "description": "Retrieve an invoice with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Invoice was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Invoices"
        ],
        "summary": "Create or update an invoice with predefined ID",
        "description": "Create or update an invoice with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Invoice resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "201": {
            "description": "Invoice was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/invoices/{id}/abandon": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Abandon an invoice",
        "description": "Abandon an invoice with specified identifier string\n",
        "responses": {
          "201": {
            "description": "Invoice was abandoned successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/invoices/{id}/issue": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Issue an invoice",
        "description": "Issue an invoice with specified identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "InvoiceItem resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceIssue"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Invoice was abandoned successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/invoices/{id}/items": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Retrieve invoice items",
        "description": "Retrieve an invoice items with specified invoice identifier string\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice items were retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvoiceItem"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Create an invoice item",
        "description": "Create an invoice item\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "InvoiceItem resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvoiceItem"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "InvoiceItem was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/InvoiceItem"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/invoices/{id}/void": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Void an invoice",
        "description": "Void an invoice with specified identifier string\n",
        "responses": {
          "201": {
            "description": "Invoice was voided successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/layouts": {
      "get": {
        "tags": [
          "Layouts"
        ],
        "summary": "Retrieve a layout list",
        "description": "Retrieve a layout list\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Layout list was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Layout"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Layouts"
        ],
        "summary": "Create a layout",
        "description": "Create a layout\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Layout resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Layout was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/layouts/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Layouts"
        ],
        "summary": "Retrieve a layout",
        "description": "Retrieve a layout with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Layout was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Layouts"
        ],
        "summary": "Create or update a layout with predefined ID",
        "description": "Create or update a layout with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Layout resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Layout was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          },
          "201": {
            "description": "Layout was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Layout"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/lead-sources": {
      "get": {
        "tags": [
          "Lead Sources"
        ],
        "summary": "Retrieve a list of Lead Sources",
        "description": "Retrieve a list of Lead Sources\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of LeadSources was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LeadSource"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Lead Sources"
        ],
        "summary": "Create a LeadSource",
        "description": "Create a Lead Source\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Lead Source resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Lead Source was created",
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/lead-sources/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Lead Sources"
        ],
        "summary": "Retrieve a Lead Source",
        "description": "Retrieve a Lead Source with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Lead Source was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Lead Sources"
        ],
        "summary": "Create a Lead Source with predefined ID",
        "description": "Create a Lead Source with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Lead Source resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lead Source was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "201": {
            "description": "Lead Source was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/notes": {
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Retrieve a list of notes",
        "description": "Retrieve a list of notes\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Notes was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Note"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Notes"
        ],
        "summary": "Create a note",
        "description": "Create a note\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Note resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Note was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/notes/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Notes"
        ],
        "summary": "Retrieve a note",
        "description": "Retrieve a note with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Note was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Notes"
        ],
        "summary": "Create or update a note with predefined ID",
        "description": "Create or update a note with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Note resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Note"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Note was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "201": {
            "description": "Note was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Retrieve a list of organizations",
        "description": "Retrieve a list of organizations\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of organizations was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Organization"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create a organization",
        "description": "Create a organization\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Organization resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Organization was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/organizations/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Retrieve a organization",
        "description": "Retrieve a organization with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Organization was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Organizations"
        ],
        "summary": "Create or update a organization with predefined ID",
        "description": "Create or update a organization with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Organization resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "201": {
            "description": "Organization was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "Delete a organization",
        "description": "Delete a organization with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Organization was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Organization has related resources and cannot be deleted",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/password-tokens": {
      "get": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Retrieve a list of tokens",
        "description": "Retrieve a list of tokens\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Reset Password Tokens was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResetPasswordToken"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Create a Reset Password Token",
        "description": "Create a Reset Password Token\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "ResetPasswordToken resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPasswordToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Reset Password Token was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ResetPasswordToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/password-tokens/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Retrieve a Reset Password Token",
        "description": "Retrieve a Reset Password Token with specified identifier string\n",
        "responses": {
          "200": {
            "description": "ResetPasswordToken was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ResetPasswordToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer Authentication"
        ],
        "summary": "Delete a Reset Password Token",
        "description": "Delete a Reset Password Token with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "ResetPasswordToken was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "ResetPasswordToken has related resources and cannot be deleted"
          }
        }
      }
    },
    "/payment-cards": {
      "get": {
        "tags": [
          "Payment Cards"
        ],
        "summary": "Retrieve a list of Payment Cards",
        "description": "Retrieve a list of Payments Cards\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Payment Card was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentCard"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Payment Cards"
        ],
        "summary": "Create a Payment Card",
        "description": "Create a Payment Card\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "PaymentCard resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment Card was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/payment-cards/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Payment Cards"
        ],
        "summary": "Retrieve a Payment Card",
        "description": "Retrieve a Payment Card with specified identifier string\n",
        "responses": {
          "200": {
            "description": "PaymentCard was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Payment Cards"
        ],
        "summary": "Create a payment card with predefined ID",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Payment card",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment card was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "description": "Payment card exist and cannot be updated",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/payment-cards/{id}/authorization": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Payment Cards"
        ],
        "summary": "Authorize a Payment Card",
        "description": "Authorize a Payment Card\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Payment Card resource",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "websiteId",
                "currency"
              ],
              "properties": {
                "websiteId": {
                  "description": "The Website ID",
                  "type": "string"
                },
                "currency": {
                  "description": "Currency (three letter code)",
                  "type": "string"
                },
                "gatewayAccountId": {
                  "description": "The Gateway account ID",
                  "type": "string"
                },
                "amount": {
                  "description": "Amount",
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Authorization successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/payment-cards/{id}/deactivation": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Payment Cards"
        ],
        "summary": "Deactivate a Payment Card",
        "description": "Deactivate a Payment Card\n",
        "responses": {
          "201": {
            "description": "Authorization successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentCard"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/payments": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieve a payment list",
        "description": "Retrieve a payment list\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment list was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Payment"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Create a payment",
        "description": "Create a payment\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Payment resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment was processed",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Payment"
              }
            }
          },
          "202": {
            "description": "Payment was accepted",
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/payments/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieve a payment",
        "description": "Retrieve a payment with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Payment was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Payments"
        ],
        "summary": "Create a payment with predefined ID",
        "description": "Make a payment with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Payment resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Payment was processed",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Payment"
              }
            }
          },
          "202": {
            "description": "Payment was accepted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/plans": {
      "get": {
        "tags": [
          "Plans"
        ],
        "summary": "Retrieve a list of plans",
        "description": "Retrieve a list of plans\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Plans was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Plan"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Plans"
        ],
        "summary": "Create a plan",
        "description": "Create a plan\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Plan resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Plan was created",
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/plans/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Plans"
        ],
        "summary": "Retrieve a plan",
        "description": "Retrieve a plan with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Plan was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Plans"
        ],
        "summary": "Create or update a Plan with predefined ID",
        "description": "Create or update a Plan with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Plan resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "201": {
            "description": "Plan was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Plan"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Plans"
        ],
        "summary": "Delete a Plan",
        "description": "Delete a Plan with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Plan was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve a list of products",
        "description": "Retrieve a list of products\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of products was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create a Product",
        "description": "Create a Product\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Product resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Product was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/products/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieve a product",
        "description": "Retrieve a product with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Product was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Create a product with predefined ID",
        "description": "Create a product with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Product resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "201": {
            "description": "Product was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Product"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/queue/custom-events": {
      "get": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Retrieve a list of scheduled custom events",
        "description": "Retrieve a list of scheduled custom events\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of scheduled custom events was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomEvent"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/queue/custom-events/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Retrieve a scheduled custom event",
        "description": "Retrieve a scheduled custom event with predefined identifier string\n",
        "responses": {
          "200": {
            "description": "Scheduled custom event was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          },
          "303": {
            "description": "Custom event was successfully processed and moved out from queue",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/CustomEvent"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Custom Events"
        ],
        "summary": "Delete a scheduled custom event",
        "description": "Delete a scheduled custom event with predefined identifier string\n",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "description": "Scheduled custom event was deleted"
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/queue/payments": {
      "get": {
        "tags": [
          "Payments"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "summary": "Retrieve a scheduled payment list",
        "description": "Retrieve a scheduled payment list\n",
        "responses": {
          "200": {
            "description": "Successful retrieve the payments list that still waiting to be processed",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Payment"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/queue/payments/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieve a scheduled payment",
        "description": "Retrieve a payment with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Successful retrieve the payment that still waiting to be processed",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "303": {
            "description": "Payment was successfully processed and moved out from queue",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Payments"
        ],
        "summary": "Update pending payment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Payment resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Payment is already handled and cannot be updated"
          },
          "422": {
            "$ref": "#/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": [
          "Payments"
        ],
        "summary": "Delete a pending payment",
        "responses": {
          "204": {
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "description": "Payment was deleted"
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Payment is already handled and cannot be removed"
          }
        }
      }
    },
    "/queue/payments/{id}/cancel": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Cancel a scheduled payment",
        "description": "Cancel a scheduled payment with specified identifier string\n",
        "responses": {
          "201": {
            "description": "Successful cancel the payment",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Payment"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/reports/disputes": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Retrieve a disputes report",
        "description": "Retrieve a disputes report\n",
        "parameters": [
          {
            "name": "aggregationField",
            "in": "query",
            "description": "Report will be aggregated by this field",
            "required": true,
            "type": "string",
            "enum": [
              "website",
              "processor",
              "currency",
              "bin",
              "country",
              "rebillNumber",
              "dunningIndex",
              "gatewayAccount"
            ]
          },
          {
            "name": "periodMonth",
            "in": "query",
            "description": "Report month",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Report was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ReportDisputes"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/reports/dunning": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Retrieve a dunning report",
        "description": "Retrieve a dunning report\n",
        "parameters": [
          {
            "name": "periodStart",
            "in": "query",
            "description": "Report start date",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "periodEnd",
            "in": "query",
            "description": "Report end date",
            "required": true,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "Report was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ReportDunning"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/reports/retention-percentage": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Retrieve a retention percentage report",
        "description": "Retrieve a retention percentage report\n",
        "parameters": [
          {
            "name": "aggregationField",
            "in": "query",
            "description": "Report aggregation field",
            "required": true,
            "type": "string",
            "enum": [
              "day",
              "month",
              "quarter",
              "year"
            ]
          },
          {
            "name": "aggregationPeriod",
            "in": "query",
            "description": "Report aggregation period",
            "required": true,
            "type": "string",
            "enum": [
              "day",
              "month",
              "quarter",
              "year",
              "cycle"
            ]
          },
          {
            "name": "includeSwitchedSubscriptions",
            "in": "query",
            "description": "If to include switched subscriptions",
            "type": "string"
          },
          {
            "name": "periodStart",
            "in": "query",
            "description": "Report start date",
            "type": "string",
            "required": true
          },
          {
            "name": "periodEnd",
            "in": "query",
            "description": "Report end date",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Report was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/HistogramData"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/reports/retention-value": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Retrieve a retention value report",
        "description": "The retention value report shows the count of new customers\nper aggregation bucket and the corresponding per customer value over time.\n",
        "parameters": [
          {
            "name": "aggregationField",
            "in": "query",
            "description": "Report aggregation field",
            "required": true,
            "type": "string",
            "enum": [
              "day",
              "month",
              "quarter",
              "year",
              "leadsSource",
              "leadsMedium",
              "leadsCampaign",
              "leadsContent",
              "leadsTerm",
              "leadsAffiliate",
              "leadsSubAffiliate",
              "leadsSalesAgent"
            ]
          },
          {
            "name": "aggregationPeriod",
            "in": "query",
            "description": "Report aggregation period",
            "required": true,
            "type": "string",
            "enum": [
              "day",
              "month",
              "quarter",
              "year",
              "cycle"
            ]
          },
          {
            "name": "includeRefunds",
            "in": "query",
            "description": "If to include refunds",
            "type": "string"
          },
          {
            "name": "includeDisputes",
            "in": "query",
            "description": "If to include disputes",
            "type": "string"
          },
          {
            "name": "periodStart",
            "in": "query",
            "description": "Report start date",
            "type": "string",
            "required": true
          },
          {
            "name": "periodEnd",
            "in": "query",
            "description": "Report end date",
            "type": "string",
            "required": true
          },
          {
            "name": "leadSourceMode",
            "in": "query",
            "description": "Lead Source mode",
            "type": "string",
            "enum": [
              "last",
              "all"
            ]
          },
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Report was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/HistogramData"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/reports/statistics": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Retrieve a statistics report",
        "description": "Retrieve a statistics report\n",
        "responses": {
          "200": {
            "description": "Report was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ReportStatistics"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/reports/subscribers": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Retrieve a subscribers report",
        "description": "Retrieve a subscribers report\n",
        "parameters": [
          {
            "name": "websiteId",
            "in": "query",
            "description": "Filter by website ID",
            "type": "string"
          },
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Report was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ReportSubscribers"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/reports/transactions": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Retrieve a transactions report",
        "description": "Retrieve a transactions report\n",
        "parameters": [
          {
            "name": "periodStart",
            "in": "query",
            "description": "Report start day",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "periodEnd",
            "in": "query",
            "description": "Report end day",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "aggregationField",
            "in": "query",
            "description": "Report aggregation field",
            "required": true,
            "type": "string",
            "enum": [
              "website",
              "currency",
              "bin",
              "rebillNumber",
              "transactionResult",
              "transactionType",
              "gatewayAccount",
              "leadsAffiliate",
              "leadsCampaign",
              "leadsContent",
              "leadsMedium",
              "leadsSalesAgent",
              "leadsSource",
              "leadsSubAffiliate",
              "leadsTerm"
            ]
          },
          {
            "name": "metric",
            "in": "query",
            "description": "Report metric",
            "required": true,
            "type": "string",
            "enum": [
              "ApprovalThroughput",
              "AuthApprovalThroughput",
              "AvgSalesPrice",
              "Refunds",
              "RefundCount",
              "Sales",
              "SalesCount"
            ]
          },
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Report was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ReportTransactions"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/sessions": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Retrieve a list of sessions",
        "description": "Retrieve a list of sessions\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Sessions was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Session"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create a session",
        "description": "Create a session\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Sessions resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Session was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Session"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/sessions/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Retrieve a Session",
        "description": "Retrieve a Session with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Session was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Session"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Sessions"
        ],
        "summary": "Create or update a Session with predefined ID",
        "description": "Create or update a Session with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Session resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Session"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Session"
            }
          },
          "201": {
            "description": "Session was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Session"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "Delete a Session",
        "description": "Delete a Session with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Session was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Session has related resources and cannot be deleted"
          }
        }
      }
    },
    "/signin": {
      "post": {
        "tags": [
          "Users",
          "Sessions"
        ],
        "summary": "Create a session with email and password",
        "description": "Create a session with email and password\n",
        "security": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Signin resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Signin"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Session was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Session"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/signup": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates a new user and sends an email confirmation",
        "description": "Creates a new user and sends an email confirmation\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Signup resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Signup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Retrieve API current status",
        "description": "Retrieve API current status\n",
        "security": [],
        "responses": {
          "200": {
            "description": "Status was received",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Retrieve a list of subscriptions",
        "description": "Retrieve a list of subscriptions\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of subscriptions was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subscription"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Create a subscription",
        "description": "Create a subscription\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Subscription resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscription was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/subscriptions/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Retrieve a subscription",
        "description": "Retrieve a subscription with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Subscription was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Create or update a subscription with predefined ID",
        "description": "Create or update a subscription with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Subscription resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "201": {
            "description": "Subscription was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/subscriptions/{id}/cancel": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Cancel a subscription",
        "description": "Cancel a subscription\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Only policy",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionCancel"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscription was switched",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/subscriptions/{id}/switch": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Switch a subscription",
        "description": "Switch a subscription\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "SubscriptionSwitch resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionSwitch"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Subscription was switched",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/tax-categories": {
      "get": {
        "tags": [
          "Taxes"
        ],
        "summary": "Retrieve a list of tax categories",
        "description": "Retrieve a list of tax categories\n",
        "responses": {
          "200": {
            "description": "A list of tax categories was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaxCategory"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/tokens": {
      "get": {
        "tags": [
          "Payment Tokens"
        ],
        "summary": "Retrieve a list of tokens",
        "description": "Retrieve a list of tokens\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tokens was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentToken"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Payment Tokens"
        ],
        "summary": "Create a payment token",
        "description": "Create a token\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "PaymentToken resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          }
        ],
        "security": [
          {
            "RebAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Token was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/tokens/{token}": {
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "description": "The token identifier string",
          "type": "string",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Payment Tokens"
        ],
        "summary": "Retrieve a token",
        "description": "Retrieve a token with specified identifier string\n",
        "security": [
          {
            "RebAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/tokens/{token}/expiration": {
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "description": "The token identifier string",
          "type": "string",
          "required": true
        }
      ],
      "post": {
        "tags": [
          "Payment Tokens"
        ],
        "summary": "Expire a token",
        "description": "Expire a token\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "PaymentToken resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Token expiration successful",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/tracking/api": {
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a list of tracking API logs",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Tracking API logs was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ApiTracking"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/tracking/api/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a tracking API log with specified identifier string",
        "responses": {
          "200": {
            "description": "Tracking API log was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ApiTracking"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/tracking/subscriptions": {
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a list of tracking subscription logs",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Tracking subscription logs was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscriptionTracking"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/tracking/subscriptions/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a tracking subscription log with specified identifier string",
        "responses": {
          "200": {
            "description": "Tracking subscription log was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/SubscriptionTracking"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/tracking/website-webhooks": {
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a list of tracking webhook notifications",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Tracking webhook notifications was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WebsiteWebhookTracking"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/tracking/website-webhooks/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Tracking"
        ],
        "summary": "Retrieve a tracking webhook notification with specified identifier string",
        "responses": {
          "200": {
            "description": "Tracking webhook notification was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/WebsiteWebhookTracking"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieve a list of transactions",
        "description": "Retrieve a list of transactions\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          },
          {
            "$ref": "#/parameters/collectionFilter"
          },
          {
            "$ref": "#/parameters/collectionSort"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of transactions was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      }
    },
    "/transactions/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieve a Transaction",
        "description": "Retrieve a Transaction with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Transaction was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/transactions/{id}/refund": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Refund a Transaction",
        "description": "Refund a Transaction with specified identifier string.\nNote that the refund will be in the same currency as the original transaction.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionRefund"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Transaction was refunded successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve a list of users",
        "description": "Retrieve a list of users\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create an user",
        "description": "Create an user\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve user",
        "description": "Retrieve user with specified identifier string\n",
        "responses": {
          "200": {
            "description": "User was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Create or update user with predefined ID",
        "description": "Create or update user with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "201": {
            "description": "User was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "$ref": "#/responses/InvalidDataError"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user",
        "description": "Delete user with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "User was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "User has related resources and cannot be deleted",
            "$ref": "#/responses/Conflict"
          }
        }
      }
    },
    "/users/{id}/password": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Updates user's password with the specified newPassword",
        "description": "Updates user's password with the specified newPassword. And checks if currentPassword matches the actual one.\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "currentPassword and newPassword",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePassword"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Password updated successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "$ref": "#/responses/InvalidDataError"
          }
        }
      }
    },
    "/users/{id}/reset-password/{token}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        },
        {
          "name": "token",
          "in": "path",
          "description": "The token string",
          "type": "string",
          "required": true
        }
      ],
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset user password",
        "description": "Reset user password\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "ResetPassword resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPassword"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Password was reseted successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/users/{id}/totp-reset": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset (renew) totpSecret",
        "description": "Reset (renew) totpSecret\n",
        "responses": {
          "201": {
            "description": "totpSecret reset (renewed) successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/websites": {
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "Retrieve a list of websites",
        "description": "Retrieve a list of websites\n",
        "parameters": [
          {
            "$ref": "#/parameters/collectionLimit"
          },
          {
            "$ref": "#/parameters/collectionOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Websites was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              },
              "Pagination-Total": {
                "description": "Total items count",
                "type": "integer"
              },
              "Pagination-Limit": {
                "description": "Items per page limit",
                "type": "integer"
              },
              "Pagination-Offset": {
                "description": "Pagination offset",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Website"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Websites"
        ],
        "summary": "Create a website",
        "description": "Create a website\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Website resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Website"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Website was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Website"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    },
    "/websites/{id}": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "Retrieve a website",
        "description": "Retrieve a website with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Website was retrieved successfully",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Website"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Websites"
        ],
        "summary": "Create or update a website with predefined ID",
        "description": "Create or update a website with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Website resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Website"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Website was updated",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Website"
            }
          },
          "201": {
            "description": "Website was created",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Website"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Websites"
        ],
        "summary": "Delete a website",
        "description": "Delete a website with predefined identifier string\n",
        "responses": {
          "204": {
            "description": "Website was deleted",
            "headers": {
              "Rate-Limit-Limit": {
                "description": "The number of allowed requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Remaining": {
                "description": "The number of remaining requests in the current period",
                "type": "integer"
              },
              "Rate-Limit-Reset": {
                "description": "The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)\nwhen the current period will reset\n",
                "type": "string"
              }
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Website has related resources and cannot be deleted"
          }
        }
      }
    },
    "/websites/{id}/webhook": {
      "parameters": [
        {
          "$ref": "#/parameters/resourceId"
        }
      ],
      "get": {
        "tags": [
          "Websites"
        ],
        "summary": "Retrieve a webhook for website",
        "description": "Retrieve a webhook for website with specified identifier string\n",
        "responses": {
          "200": {
            "description": "Webhook was retrieved successfully",
            "schema": {
              "$ref": "#/definitions/WebsiteWebhook"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Websites"
        ],
        "summary": "Create or update a webhook for website with predefined ID",
        "description": "Create or update a webhook for website with predefined identifier string\n",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Webhook resource",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebsiteWebhook"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook was updated",
            "schema": {
              "$ref": "#/definitions/WebsiteWebhook"
            }
          },
          "401": {
            "$ref": "#/responses/AccessForbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "description": "Invalid data was sent",
            "schema": {
              "$ref": "#/definitions/InvalidError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ApiKey": {
      "type": "object",
      "description": "API secret Key.",
      "properties": {
        "id": {
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "description": {
          "description": "API key description",
          "type": "string"
        },
        "datetimeFormat": {
          "description": "Date time format",
          "type": "string",
          "default": "iso8601",
          "enum": [
            "mysql",
            "iso8601"
          ]
        },
        "apiUser": {
          "description": "API user name",
          "type": "string",
          "readOnly": true
        },
        "secretKey": {
          "description": "API secret key's value",
          "type": "string",
          "readOnly": true
        },
        "createdTime": {
          "description": "The API key created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "AuthenticationOptions": {
      "type": "object",
      "properties": {
        "passwordPattern": {
          "description": "Allowed password pattern",
          "type": "string"
        },
        "credentialTtl": {
          "description": "The default lifetime of the credential in seconds",
          "type": "integer"
        },
        "authTokenTtl": {
          "description": "The default lifetime of the auth-token in seconds",
          "type": "integer"
        },
        "resetTokenTtl": {
          "description": "The default lifetime of the reset-token in seconds",
          "type": "integer"
        }
      }
    },
    "AuthenticationToken": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "token": {
          "description": "The token identifier string",
          "type": "string",
          "readOnly": true
        },
        "username": {
          "description": "The token's username",
          "type": "string"
        },
        "password": {
          "description": "The token's password (write-only)",
          "type": "string",
          "format": "password"
        },
        "credentialId": {
          "description": "The credential's ID",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The token's customer ID",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "expiredTime": {
          "description": "Token's expired time",
          "type": "string",
          "format": "date-time"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "BankAccount": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The bank account identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The Customer's ID.",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "bankName": {
          "description": "Bank's name.",
          "type": "string"
        },
        "routingNumber": {
          "description": "Bank's Routing Number. Required if bank account is not created from Token. This field is write-only",
          "type": "string"
        },
        "accountNumber": {
          "description": "Bank's Account Number. Required if bank account is not created from Token. This field is write-only",
          "type": "string"
        },
        "accountType": {
          "description": "Banks's Account type. Required if bank account is not created from Token",
          "type": "string"
        },
        "token": {
          "description": "Bank Account Token. Use without any other fields",
          "type": "string"
        },
        "contactId": {
          "description": "The Contact ID. Required if bank account is not created from Token",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "status": {
          "description": "Bank Account status",
          "type": "string",
          "enum": [
            "active",
            "deactivated"
          ]
        },
        "createdTime": {
          "description": "Bank Account created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Bank Account updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 3,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/ContactLink"
            }
          ]
        }
      }
    },
    "Blacklist": {
      "type": "object",
      "required": [
        "type",
        "value"
      ],
      "properties": {
        "id": {
          "description": "The blacklist identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "type": {
          "description": "The blacklist type",
          "type": "string",
          "enum": [
            "payment-card-id",
            "customer-id",
            "email",
            "ip-address",
            "country",
            "fingerprint",
            "bin"
          ]
        },
        "value": {
          "description": "The blacklist value",
          "type": "string"
        },
        "ttl": {
          "description": "The blacklist time to live",
          "type": "integer",
          "minimum": 30
        },
        "expireTime": {
          "description": "The blacklist expire time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "createdTime": {
          "description": "The blacklist created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The blacklist updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "CheckoutPage": {
      "type": "object",
      "required": [
        "name",
        "planId",
        "websiteId",
        "uriPath"
      ],
      "properties": {
        "id": {
          "description": "Checkout page identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "planId": {
          "description": "Checkout page plan ID",
          "type": "string",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websiteId": {
          "description": "Checkout page website ID",
          "type": "string",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "uriPath": {
          "description": "Your own custom uri path for this Checkout Page. It will be appended to checkout url https://checkout.rebilly.com/website/<uriPath>",
          "type": "string"
        },
        "name": {
          "description": "Checkout page name",
          "type": "string"
        },
        "isActive": {
          "description": "If checkout page active",
          "type": "boolean"
        },
        "redirectUrl": {
          "description": "Checkout page url",
          "type": "string"
        },
        "redirectTimeout": {
          "description": "Checkout page redirect timeout",
          "type": "integer"
        },
        "allowCustomCustomerId": {
          "description": "If to enable your own customer ID in requests",
          "type": "boolean"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Contact": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The contact identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The contact customer ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "firstName": {
          "description": "The contact first name",
          "type": "string"
        },
        "lastName": {
          "description": "The contact last name",
          "type": "string"
        },
        "organization": {
          "description": "The contact organization",
          "type": "string"
        },
        "address": {
          "description": "The contact street address",
          "type": "string",
          "maxLength": 60
        },
        "address2": {
          "description": "The contact street address (second line)",
          "type": "string",
          "maxLength": 60
        },
        "city": {
          "description": "The contact city",
          "type": "string",
          "maxLength": 45
        },
        "region": {
          "description": "The contact region (state)",
          "type": "string",
          "maxLength": 45
        },
        "country": {
          "description": "The contact country ISO Alpha-2 code",
          "type": "string",
          "pattern": "^[A-Z]{2}$"
        },
        "postalCode": {
          "description": "The contact postal code",
          "type": "string",
          "maxLength": 10
        },
        "phoneNumber": {
          "description": "The contact phone number",
          "type": "string"
        },
        "createdTime": {
          "description": "The contact created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The contact updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 2,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ]
        }
      }
    },
    "Credential": {
      "type": "object",
      "required": [
        "username",
        "password",
        "customerId"
      ],
      "properties": {
        "id": {
          "description": "The credential identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "username": {
          "description": "Credential's username",
          "type": "string"
        },
        "password": {
          "description": "The credential's password",
          "type": "string",
          "format": "password"
        },
        "customerId": {
          "description": "The credential's customer ID",
          "type": "string"
        },
        "expiredTime": {
          "description": "The credential's expired time",
          "type": "string",
          "format": "date-time"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 2,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ]
        }
      }
    },
    "Condition": {
      "type": "object",
      "discriminator": "op",
      "properties": {
        "op": {
          "type": "string",
          "description": "The condition operation",
          "enum": [
            "and",
            "or",
            "not",
            "between",
            "equals",
            "in",
            "gt",
            "gte",
            "lt",
            "lte"
          ]
        }
      },
      "required": [
        "op"
      ]
    },
    "and": {
      "type": "object",
      "description": "Logical AND",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical"
        }
      ]
    },
    "between": {
      "type": "object",
      "description": "Between condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "min": {
              "type": "string"
            },
            "max": {
              "type": "string"
            }
          },
          "required": [
            "path",
            "min",
            "max"
          ]
        }
      ]
    },
    "compare": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "path",
        "value"
      ]
    },
    "equals": {
      "type": "object",
      "description": "Equals condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ]
    },
    "gt": {
      "type": "object",
      "description": "Greater than condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ]
    },
    "gte": {
      "type": "object",
      "description": "Greater than or equals condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ]
    },
    "in": {
      "type": "object",
      "description": "In condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "values": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "path",
            "values"
          ]
        }
      ]
    },
    "logical-not": {
      "type": "object",
      "properties": {
        "condition": {
          "$ref": "#/definitions/Condition"
        }
      },
      "required": [
        "condition"
      ],
      "example": {
        "operation": "not",
        "condition": {
          "operation": "equals",
          "path": "/name",
          "value": "John Dou"
        }
      }
    },
    "logical": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "minItems": 2,
          "items": {
            "$ref": "#/definitions/Condition"
          }
        }
      },
      "required": [
        "conditions"
      ]
    },
    "lt": {
      "type": "object",
      "description": "Less than condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ]
    },
    "lte": {
      "type": "object",
      "description": "Less than or equals condition",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/compare"
        }
      ]
    },
    "not": {
      "type": "object",
      "description": "Logical NOT",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical-not"
        }
      ]
    },
    "or": {
      "type": "object",
      "description": "Logical OR",
      "allOf": [
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/logical"
        }
      ]
    },
    "Customer": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The customer identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "email": {
          "description": "The customer email",
          "type": "string",
          "format": "email",
          "maxLength": 100
        },
        "firstName": {
          "description": "The customer first name",
          "type": "string"
        },
        "lastName": {
          "description": "The customer last name",
          "type": "string"
        },
        "ipAddress": {
          "description": "The customer IP",
          "type": "string",
          "format": "ipv4"
        },
        "defaultPaymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "createdTime": {
          "description": "The customer created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The customer updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 3,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/NotesLink"
            },
            {
              "$ref": "#/definitions/DefaultPaymentInstrumentLink"
            }
          ]
        }
      }
    },
    "CustomEvent": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The custom event identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "eventType": {
          "$ref": "#/definitions/CustomEventType"
        },
        "title": {
          "description": "The custom event title",
          "type": "string"
        },
        "description": {
          "description": "The custom event description",
          "type": "string"
        },
        "chronology": {
          "type": "string",
          "description": "The arrangement of events in the order of their occurrence",
          "enum": [
            "before",
            "after"
          ]
        },
        "scheduleInstruction": {
          "$ref": "#/definitions/ScheduleMethod"
        },
        "createdTime": {
          "$ref": "#/definitions/ServerTimestamp"
        }
      },
      "required": [
        "eventType",
        "title",
        "chronology",
        "scheduleInstruction"
      ]
    },
    "CustomEventType": {
      "type": "string",
      "description": "Rebilly custom event type",
      "readOnly": true,
      "enum": [
        "subscription-ended",
        "subscription-trial-ended",
        "payment-card-expired",
        "invoice-past-due"
      ]
    },
    "CustomField": {
      "description": "A separate Custom Field schema",
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "description": "The name of the custom field",
          "type": "string"
        },
        "type": {
          "description": "Type value    | Description\n------------- | -------------\narray         | An array of strings up to 255 characters, maximum size is 1000 elements\nboolean       | true or false\ndate          | String of format \"full-date\" (YYYY-MM-DD) from RFC-3339 (full-date)\ndatetime      | String of format \"date-time\" (YYYY-MM-DDTHH:MM:SSZ) from RFC-3339 (date-time)\ninteger       | Cardinal value of -2^31..2^31-1\nnumber        | Float value. It can take cardinal values also which are interpreted as float\nstring        | Regular string up to 255 characters\nmonetary      | A map of 3-letters currency code and amount, e.g. {\"currency\": \"EUR\", \"amount\": 25.30}\n",
          "type": "string",
          "enum": [
            "array",
            "boolean",
            "datetime",
            "integer",
            "number",
            "string",
            "monetary"
          ]
        },
        "description": {
          "description": "The custom field description",
          "type": "string"
        },
        "additionalSchema": {
          "description": "Additional parameters which can be added according to type:\nParameter Name | Types         | Description\n-------------- | ------------- | -------------\nallowedValues  | string, array | List of allowed values\n"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Dispute": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The dispute identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The dispute's customer ID",
          "type": "string",
          "readOnly": true
        },
        "transactionId": {
          "description": "The dispute's transaction ID",
          "type": "string"
        },
        "currency": {
          "description": "The dispute currency ISO Alpha code",
          "type": "string"
        },
        "amount": {
          "description": "The dispute amount",
          "type": "number",
          "format": "double"
        },
        "acquirerReferenceNumber": {
          "description": "The dispute's acquirer reference number",
          "type": "string"
        },
        "reasonCode": {
          "description": "The dispute's reason code",
          "type": "string",
          "enum": [
            1000,
            12,
            2,
            30,
            31,
            35,
            37,
            40,
            41,
            42,
            46,
            47,
            49,
            50,
            53,
            54,
            55,
            57,
            59,
            60,
            62,
            7,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            79,
            8,
            80,
            81,
            82,
            83,
            85,
            86,
            93,
            0,
            63,
            "A01",
            "A02",
            "A08",
            "F10",
            "F14",
            "F22",
            "F24",
            "F29",
            "C02",
            "C04",
            "C05",
            "C08",
            "C14",
            "C18",
            "C28",
            "C31",
            "C32",
            "M10",
            "M49",
            "P01",
            "P03",
            "P04",
            "P05",
            "P07",
            "P08",
            "P22",
            "P23",
            "R03",
            "R13",
            "M01",
            "FR1",
            "FR4",
            "FR6",
            "AL",
            "AP",
            "AW",
            "CA",
            "CD",
            "CR",
            "DA",
            "DP",
            "DP1",
            "EX",
            "IC",
            "IN",
            "IS",
            "LP",
            "N",
            "NA",
            "NC",
            "P",
            "RG",
            "RM",
            "RN1",
            "RN2",
            "SV",
            "TF",
            "TNM",
            "UA01",
            "UA02",
            "UA32",
            "UA99",
            "UA03",
            "UA10",
            "UA11",
            "UA12",
            "UA18",
            "UA20",
            "UA21",
            "UA22",
            "UA23",
            "UA28",
            "UA30",
            "UA31",
            "UA38"
          ]
        },
        "category": {
          "description": "The dispute's category",
          "type": "string",
          "readOnly": true,
          "enum": [
            "fraud",
            "unrecognized",
            "product-not-received",
            "product-unacceptable",
            "product-not-refunded",
            "duplicate",
            "subscription-canceled",
            "uncategorized"
          ]
        },
        "type": {
          "description": "The dispute's type",
          "type": "string",
          "enum": [
            "information-request",
            "first-chargeback",
            "second-chargeback",
            "arbitration"
          ]
        },
        "status": {
          "description": "The dispute's status",
          "type": "string",
          "enum": [
            "response-needed",
            "under-review",
            "forfeited",
            "won",
            "lost"
          ]
        },
        "postedTime": {
          "description": "Dispute posted time",
          "type": "string",
          "format": "date-time"
        },
        "deadlineTime": {
          "description": "Dispute deadline time",
          "type": "string",
          "format": "date-time"
        },
        "rawResponse": {
          "description": "Dispute raw response from gateway",
          "type": "string",
          "readOnly": true
        },
        "evidence": {
          "allOf": [
            {
              "$ref": "#/definitions/DisputeEvidence"
            }
          ]
        },
        "evidenceSubmissionTime": {
          "description": "Dispute evidence submission time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "resolvedTime": {
          "description": "Dispute resolved time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "createdTime": {
          "description": "Dispute created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Dispute updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "DisputeEvidence": {
      "type": "object",
      "properties": {
        "policy": {
          "description": "The id of a file upload with the policy materials (may include the cancellation policy, refund policy, and terms of use).",
          "type": "string"
        },
        "accessLogs": {
          "description": "The id of a file upload with the access logs showing the customer activity.",
          "type": "string"
        },
        "customerCommunication": {
          "description": "The id of a file upload showing communication with the customer (for example emails).",
          "type": "string"
        },
        "customerSignature": {
          "description": "The id of a file upload showing the signed contract or signed delivery receipt.",
          "type": "string"
        },
        "deliveryProof": {
          "description": "The id of a file upload showing the proof of delivery.",
          "type": "string"
        },
        "explanation": {
          "description": "An explanation relevant to the category of dispute.",
          "type": "string"
        },
        "additionalFile": {
          "description": "Any additional evidence as a file upload id.",
          "type": "string"
        }
      }
    },
    "AmountAdjustment": {
      "type": "object",
      "discriminator": "amountPolicy",
      "properties": {
        "amountPolicy": {
          "type": "string",
          "enum": [
            "none",
            "partial",
            "discount"
          ]
        }
      },
      "required": [
        "amountPolicy"
      ]
    },
    "Dunning": {
      "type": "object",
      "properties": {
        "attempts": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "object",
            "properties": {
              "scheduleInstruction": {
                "$ref": "#/definitions/ScheduleMethod"
              },
              "paymentInstruction": {
                "$ref": "#/definitions/AmountAdjustment"
              }
            },
            "required": [
              "scheduleInstruction",
              "paymentInstruction"
            ]
          }
        },
        "afterAttemptPolicy": {
          "description": "The policy on the attempt finishes",
          "type": "string",
          "enum": [
            "none",
            "change-renewal-time"
          ]
        },
        "afterDunningEndPolicy": {
          "description": "The policy on the dunning ends",
          "type": "string",
          "enum": [
            "none",
            "cancel-subscription"
          ]
        }
      },
      "required": [
        "attempts",
        "afterAttemptPolicy",
        "afterDunningEndPolicy"
      ]
    },
    "discount": {
      "allOf": [
        {
          "$ref": "#/definitions/AmountAdjustment"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "description": "The payment amount discount",
              "type": "number",
              "format": "float"
            },
            "type": {
              "description": "The payment amount discount type",
              "type": "string",
              "enum": [
                "percent",
                "fixed"
              ]
            }
          },
          "required": [
            "value",
            "type"
          ]
        }
      ]
    },
    "none": {
      "allOf": [
        {
          "$ref": "#/definitions/AmountAdjustment"
        }
      ]
    },
    "partial": {
      "allOf": [
        {
          "$ref": "#/definitions/AmountAdjustment"
        },
        {
          "type": "object",
          "properties": {
            "value": {
              "description": "The payment amount",
              "type": "number",
              "format": "float"
            },
            "type": {
              "description": "The payment amount type",
              "type": "string",
              "enum": [
                "percent",
                "fixed"
              ]
            }
          },
          "required": [
            "value",
            "type"
          ]
        }
      ]
    },
    "Email": {
      "type": "object",
      "required": [
        "email"
      ],
      "properties": {
        "email": {
          "description": "Email",
          "type": "string",
          "format": "email"
        }
      }
    },
    "EmailCredential": {
      "type": "object",
      "required": [
        "senderName",
        "senderEmail",
        "host",
        "port",
        "username",
        "password"
      ],
      "properties": {
        "id": {
          "description": "Credential's identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "senderName": {
          "description": "Credential's sender name",
          "type": "string"
        },
        "senderEmail": {
          "description": "Credential's sender email address",
          "type": "string",
          "format": "email"
        },
        "host": {
          "description": "Credential's host",
          "type": "string"
        },
        "port": {
          "description": "Credential's port",
          "type": "integer",
          "minimum": 0,
          "maximum": 65535
        },
        "username": {
          "description": "Credential's username",
          "type": "string"
        },
        "password": {
          "description": "Credential's password",
          "type": "string",
          "format": "password"
        },
        "authenticationMethod": {
          "description": "Credential's authentication method",
          "type": "string",
          "enum": [
            "none",
            "plain",
            "login",
            "cram-md5"
          ]
        },
        "encryptionMethod": {
          "description": "Credential's encryption method",
          "type": "string",
          "enum": [
            "none",
            "tls",
            "ssl"
          ]
        },
        "createdTime": {
          "description": "Credential's created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Credential's updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "minimum": 100,
          "maximum": 600
        },
        "error": {
          "type": "string"
        }
      }
    },
    "GatewayAccount": {
      "type": "object",
      "required": [
        "gatewayName",
        "acquirerName",
        "merchantCategoryCode",
        "websites",
        "acceptedCurrencies",
        "organizationId"
      ],
      "discriminator": "gatewayName",
      "properties": {
        "id": {
          "description": "The gateway identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "gatewayName": {
          "description": "The gateway name",
          "type": "string",
          "enum": [
            "A1 Gateway",
            "AuthorizeNet",
            "Beanstream",
            "BraintreePayments",
            "Cashflows",
            "Chase",
            "ChinaUnionPay",
            "Credorax",
            "Datacash",
            "Dengi",
            "FundSend",
            "eMerchantPay",
            "Forte",
            "GlobalCollect",
            "GlobalOne",
            "iCheque",
            "Ilixium",
            "Merchant Warehouse",
            "Moneris",
            "NMI",
            "OchaPay",
            "Optimal",
            "Panda Gateway",
            "PayPal",
            "PayR",
            "Payvision",
            "Plugnpay",
            "Realex",
            "RealTime",
            "RebillyProcessor",
            "Redsys",
            "Sagepay",
            "Stripe",
            "USAePay",
            "VantivLitle",
            "vegaaH",
            "Walpay",
            "Wirecard",
            "Worldpay"
          ]
        },
        "status": {
          "description": "The gateway's status",
          "readOnly": true,
          "type": "string",
          "enum": [
            "active",
            "inactive",
            "pending"
          ]
        },
        "acquirerName": {
          "description": "Acquirer name",
          "type": "string",
          "enum": [
            "AIB",
            "B+S",
            "Bank of America",
            "Bank of Moscow",
            "Bank of Rebilly",
            "Bank One",
            "Beanstream",
            "BMO Harris Bank",
            "Borgun",
            "BraintreePayments",
            "Catalunya Caixa",
            "Chase",
            "ChinaUnionPay",
            "CIM",
            "Credorax",
            "Elavon",
            "EMS",
            "Fifth Third Bank",
            "First Data Buypass",
            "First Data Nashville",
            "First Data North",
            "First Data Omaha",
            "Forte",
            "FundSend",
            "GlobalCollect",
            "Global East",
            "Heartland",
            "HSBC",
            "iCheque",
            "Ilixium",
            "Masapay",
            "Merrick",
            "Mission Valley Bank",
            "Moneris",
            "NATWEST",
            "NMI",
            "Ochapay",
            "Other",
            "Panda Bank",
            "PayPal",
            "PayR",
            "Privatbank",
            "RBC",
            "RBS WorldPay",
            "RealTime",
            "RebillyProcessor",
            "State Bank of Mauritius",
            "Stripe",
            "TBI",
            "TrustPay",
            "TSYS",
            "Vantiv",
            "VoicePay",
            "Wells Fargo",
            "Wing Hang Bank",
            "Wirecard",
            "WorldPay"
          ]
        },
        "merchantCategoryCode": {
          "description": "The gateway's merchant category code",
          "type": "integer",
          "minimum": 742,
          "maximum": 9950
        },
        "dccMarkup": {
          "description": "Dynamic currency conversion markup in basis points",
          "type": "integer",
          "minimum": 1,
          "maximum": 10000
        },
        "descriptor": {
          "description": "The gateway's desciptor",
          "type": "string"
        },
        "city": {
          "description": "The gateway's city field",
          "type": "string"
        },
        "organizationId": {
          "description": "Organization ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websites": {
          "description": "Websites IDs",
          "type": "array",
          "items": {
            "description": "Website ID",
            "allOf": [
              {
                "$ref": "#/definitions/ResourceId"
              }
            ]
          }
        },
        "monthlyLimit": {
          "description": "Monthly Limit",
          "type": "integer",
          "format": "double",
          "minimum": 0
        },
        "threeDSecure": {
          "description": "True, if Gateway Account allows 3DSecure",
          "type": "boolean"
        },
        "threeDSecureType": {
          "description": "Type of 3DSecure",
          "type": "string",
          "enum": [
            "integrated",
            "external"
          ]
        },
        "dynamicDescriptor": {
          "description": "True, if Gateway Account allows dynamic descriptor",
          "type": "boolean"
        },
        "acceptedCurrencies": {
          "description": "Accepted currencies (array of the currency three letter code)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "method": {
          "description": "Payment Method",
          "$ref": "#/definitions/Method"
        },
        "paymentCardSchemes": {
          "description": "Accepted payment card brands",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Visa",
              "MasterCard",
              "American Express",
              "Discover",
              "Maestro",
              "Solo",
              "Electron",
              "JCB",
              "Voyager",
              "Diners Club",
              "Switch",
              "Laser",
              "China Unionpay"
            ]
          }
        },
        "downtimeStart": {
          "description": "Gateway downtime start",
          "type": "string",
          "format": "date-time"
        },
        "downtimeEnd": {
          "description": "Gateway downtime end",
          "type": "string",
          "format": "date-time"
        },
        "createdTime": {
          "description": "Gateway Account created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Gateway Account updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 2,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/OnBoardingUrlLink"
            }
          ]
        }
      }
    },
    "A1": {
      "description": "A1 Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "description": "A1 Gateway credentials object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "description": "A1 Gateway account ID"
                },
                "password": {
                  "type": "string",
                  "description": "A1 Gateway password",
                  "format": "password"
                }
              },
              "required": [
                "accountId",
                "password"
              ]
            }
          }
        }
      ]
    },
    "AuthorizeNet": {
      "description": "AuthorizeNet Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "apiLoginId": {
                  "type": "string",
                  "description": "AuthorizeNet Gateway api login ID"
                },
                "transactionKey": {
                  "description": "AuthorizeNet Gateway Transaction Key",
                  "type": "string",
                  "format": "password"
                }
              },
              "required": [
                "apiLoginId",
                "transactionKey"
              ]
            }
          }
        }
      ]
    },
    "Beanstream": {
      "description": "Beanstream Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Beanstream Gateway merchant ID"
                },
                "apiPasscode": {
                  "type": "string",
                  "description": "Beanstream Gateway API Passcode",
                  "format": "password"
                }
              },
              "required": [
                "merchantId",
                "apiPasscode"
              ]
            }
          }
        }
      ]
    },
    "BraintreePayments": {
      "description": "BraintreePayments Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "publicKey": {
                  "type": "string",
                  "description": "BraintreePayments Public Key"
                },
                "privateKey": {
                  "type": "string",
                  "description": "BraintreePayments Private Key",
                  "format": "password"
                },
                "merchantId": {
                  "type": "string",
                  "description": "BraintreePayments merchant ID",
                  "format": "password"
                },
                "merchantAccountId": {
                  "type": "string",
                  "description": "BraintreePayments merchant account ID",
                  "format": "password"
                }
              },
              "required": [
                "publicKey",
                "privateKey",
                "merchantId",
                "merchantAccountId"
              ]
            }
          }
        }
      ]
    },
    "Cashflows": {
      "description": "Cashflows Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "authId": {
                  "type": "string",
                  "description": "Cashflows Gateway auth ID"
                },
                "authPassword": {
                  "type": "string",
                  "description": "Cashflows Gateway auth password",
                  "format": "password"
                }
              },
              "required": [
                "authPassword",
                "authId"
              ]
            }
          }
        }
      ]
    },
    "Chase": {
      "description": "Chase Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "Chase Gateway username"
                },
                "password": {
                  "type": "string",
                  "description": "Chase Gateway password",
                  "format": "password"
                },
                "merchantId": {
                  "type": "string",
                  "description": "Chase Gateway merchant ID"
                },
                "bin": {
                  "type": "string",
                  "description": "Chase Gateway bin",
                  "format": "password"
                },
                "terminalId": {
                  "type": "string",
                  "description": "Chase Gateway terminal ID"
                }
              },
              "required": [
                "username",
                "password",
                "merchantId",
                "bin",
                "terminalId"
              ]
            }
          }
        }
      ]
    },
    "ChinaUnionPay": {
      "description": "China Union Pay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "description": "China Union Pay Gateway account ID"
                },
                "partyId": {
                  "type": "string",
                  "description": "China Union Pay Gateway party ID"
                },
                "goods": {
                  "type": "string",
                  "description": "China Union Pay Gateway goods"
                },
                "md5key": {
                  "type": "string",
                  "description": "China Union Pay Gateway md5key",
                  "format": "password"
                },
                "mobilePay": {
                  "type": "string",
                  "description": "China Union Pay Gateway mobile pay param"
                }
              },
              "required": [
                "accountId",
                "partyId",
                "goods",
                "md5key",
                "mobilePay"
              ]
            }
          }
        }
      ]
    },
    "Credorax": {
      "description": "Credorax Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Credorax Gateway merchant ID"
                },
                "merchantMd5Signature": {
                  "type": "string",
                  "description": "Credorax Gateway md5 signature",
                  "format": "password"
                }
              },
              "required": [
                "merchantId",
                "merchantMd5Signature"
              ]
            }
          }
        }
      ]
    },
    "Datacash": {
      "description": "Datacash Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "client": {
                  "type": "string",
                  "description": "Datacash Gateway client"
                },
                "password": {
                  "type": "string",
                  "description": "Datacash Gateway password",
                  "format": "password"
                }
              },
              "required": [
                "client",
                "password"
              ]
            }
          }
        }
      ]
    },
    "Dengi": {
      "description": "Dengi Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "string",
                  "description": "Dengi Gateway project ID"
                },
                "publicKey": {
                  "type": "string",
                  "description": "Dengi Gateway public key",
                  "format": "password"
                },
                "refundKey": {
                  "type": "string",
                  "description": "Dengi Gateway refund key",
                  "format": "password"
                }
              },
              "required": [
                "projectId",
                "publicKey",
                "refundKey"
              ]
            }
          }
        }
      ]
    },
    "EMerchantPay": {
      "description": "EMerchantPay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "EMerchantPay Gateway client ID"
                },
                "apiKey": {
                  "type": "string",
                  "description": "EMerchantPay Gateway api key",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "apiKey"
              ]
            }
          }
        }
      ]
    },
    "Forte": {
      "description": "Forte Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "accountId": {
                  "type": "string",
                  "description": "Forte Gateway account ID"
                },
                "locationId": {
                  "type": "string",
                  "description": "Forte Gateway location id"
                },
                "apiAccessId": {
                  "type": "string",
                  "description": "Forte Gateway api access id",
                  "format": "password"
                },
                "apiSecretKey": {
                  "type": "string",
                  "description": "Forte Gateway api secret key",
                  "format": "password"
                }
              },
              "required": [
                "accountId",
                "locationId",
                "apiAccessId",
                "apiSecretKey"
              ]
            }
          }
        }
      ]
    },
    "FundSend": {
      "description": "FundSend Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "FundSend Gateway client ID"
                },
                "secretWord": {
                  "type": "string",
                  "description": "FundSend Gateway secret word",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ]
            }
          }
        }
      ]
    },
    "GlobalCollect": {
      "description": "GlobalCollect Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "GlobalCollect Gateway merchant ID"
                },
                "apiKeyId": {
                  "type": "string",
                  "description": "GlobalCollect Gateway api key id"
                },
                "apiSecretKey": {
                  "type": "string",
                  "description": "GlobalCollect Gateway api secret key",
                  "format": "password"
                }
              },
              "required": [
                "merchantId",
                "apiKeyId",
                "apiSecretKey"
              ]
            }
          }
        }
      ]
    },
    "GlobalOne": {
      "description": "GlobalOne Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "terminalId": {
                  "type": "string",
                  "description": "GlobalOne Gateway terminal ID"
                },
                "sharedSecret": {
                  "type": "string",
                  "description": "GlobalOne Gateway shared secret",
                  "format": "password"
                }
              },
              "required": [
                "terminalId",
                "sharedSecret"
              ]
            }
          }
        }
      ]
    },
    "iCheque": {
      "description": "iCheque Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "iCheque Gateway client ID"
                },
                "secretWord": {
                  "type": "string",
                  "description": "iCheque Gateway secret word",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ]
            }
          }
        }
      ]
    },
    "Ilixium": {
      "description": "Ilixium Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Ilixium Gateway merchant ID"
                },
                "accountId": {
                  "type": "string",
                  "description": "Ilixium Gateway account ID"
                },
                "digestPassword": {
                  "type": "string",
                  "description": "Ilixium Gateway digest password",
                  "format": "password"
                }
              },
              "required": [
                "merchantId",
                "accountId",
                "digestPassword"
              ]
            }
          }
        }
      ]
    },
    "MerchantWarehouse": {
      "description": "MerchantWarehouse Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantSiteId": {
                  "type": "string",
                  "description": "MerchantWarehouse Gateway merchant site ID"
                },
                "merchantName": {
                  "type": "string",
                  "description": "MerchantWarehouse Gateway merchant name"
                },
                "merchantKey": {
                  "type": "string",
                  "description": "MerchantWarehouse Gateway merchant key",
                  "format": "password"
                }
              },
              "required": [
                "merchantSiteId",
                "merchantName",
                "merchantKey"
              ]
            }
          }
        }
      ]
    },
    "Moneris": {
      "description": "Moneris Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "apiToken": {
                  "type": "string",
                  "description": "Moneris Gateway api token",
                  "format": "password"
                },
                "storeId": {
                  "type": "string",
                  "description": "Moneris Gateway store ID"
                }
              },
              "required": [
                "storeId",
                "apiToken"
              ]
            }
          }
        }
      ]
    },
    "NMI": {
      "description": "NMI Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "NMI Gateway api token"
                },
                "password": {
                  "type": "string",
                  "description": "NMI Gateway store ID",
                  "format": "password"
                }
              },
              "required": [
                "username",
                "password"
              ]
            }
          }
        }
      ]
    },
    "Ochapay": {
      "description": "Ochapay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "apiUsername": {
                  "type": "string",
                  "description": "Ochapay Gateway username"
                },
                "apiPassword": {
                  "type": "string",
                  "description": "Ochapay Gateway api password",
                  "format": "password"
                },
                "secretWord": {
                  "type": "string",
                  "description": "Ochapay Gateway secret word",
                  "format": "password"
                }
              },
              "required": [
                "apiUsername",
                "apiPassword",
                "secretWord"
              ]
            }
          }
        }
      ]
    },
    "Optimal": {
      "description": "Optimal Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "storeId": {
                  "type": "string",
                  "description": "Optimal Gateway store ID"
                },
                "storePwd": {
                  "type": "string",
                  "description": "Optimal Gateway store password",
                  "format": "password"
                },
                "accountNum": {
                  "type": "string",
                  "description": "Optimal Gateway account number"
                }
              },
              "required": [
                "storeId",
                "storePwd",
                "accountNum"
              ]
            }
          }
        }
      ]
    },
    "PandaGateway": {
      "description": "Panda Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantCode": {
                  "type": "string",
                  "description": "Panda Gateway merchant code"
                },
                "apiCode": {
                  "type": "string",
                  "description": "Panda Gateway api code"
                },
                "signKey": {
                  "type": "string",
                  "description": "Panda Gateway sign key",
                  "format": "password"
                }
              },
              "required": [
                "merchantCode",
                "apiCode",
                "signKey"
              ]
            }
          }
        }
      ]
    },
    "PayPal": {
      "description": "PayPal Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantIdInPayPal": {
                  "type": "string",
                  "description": "PayPal Gateway merchant id"
                },
                "redirectUrl": {
                  "type": "string",
                  "description": "PayPal Gateway redirect url",
                  "format": "url"
                }
              },
              "required": [
                "merchantIdInPayPal",
                "redirectUrl"
              ]
            }
          }
        }
      ]
    },
    "PayR": {
      "description": "PayR Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "PayR Gateway client ID"
                },
                "secretWord": {
                  "type": "string",
                  "description": "PayR Gateway secret word",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ]
            }
          }
        }
      ]
    },
    "Payvision": {
      "description": "Payvision Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "memberId": {
                  "type": "string",
                  "description": "Payvision Gateway member id"
                },
                "avs": {
                  "type": "string",
                  "description": "Payvision Gateway avs"
                },
                "delay": {
                  "type": "integer",
                  "description": "Payvision Gateway delay"
                },
                "memberGuid": {
                  "type": "string",
                  "description": "Payvision Gateway member guid",
                  "format": "password"
                }
              },
              "required": [
                "memberId",
                "avs",
                "delay",
                "memberGuid"
              ]
            }
          }
        }
      ]
    },
    "Plugnpay": {
      "description": "Plugnpay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "publisher-name": {
                  "type": "string",
                  "description": "Plugnpay Gateway member id"
                },
                "publisher-password": {
                  "type": "string",
                  "description": "Plugnpay Gateway avs",
                  "format": "password"
                }
              },
              "required": [
                "publisher-name",
                "publisher-password"
              ]
            }
          }
        }
      ]
    },
    "Realex": {
      "description": "Realex Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantId": {
                  "type": "string",
                  "description": "Realex Gateway merchant id"
                },
                "secretKey": {
                  "type": "string",
                  "description": "Realex Gateway secret key",
                  "format": "password"
                },
                "rebatePassword": {
                  "type": "string",
                  "description": "Realex Gateway rebate password",
                  "format": "password"
                },
                "account": {
                  "type": "string",
                  "description": "Realex Gateway account"
                }
              },
              "required": [
                "merchantId",
                "secretKey",
                "rebatePassword",
                "account"
              ]
            }
          }
        }
      ]
    },
    "RealTime": {
      "description": "RealTime Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "RealTime Gateway client ID"
                },
                "secretWord": {
                  "type": "string",
                  "description": "RealTime Gateway secret word",
                  "format": "password"
                }
              },
              "required": [
                "clientId",
                "secretWord"
              ]
            }
          }
        }
      ]
    },
    "RebillyProcessor": {
      "description": "RebillyProcessor Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        }
      ]
    },
    "Redsys": {
      "description": "Redsys Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantCode": {
                  "type": "string",
                  "description": "Redsys Gateway merchant code",
                  "format": "password"
                },
                "secretCode": {
                  "type": "string",
                  "description": "Redsys Gateway secret code",
                  "format": "password"
                }
              },
              "required": [
                "merchantCode",
                "secretCode"
              ]
            }
          }
        }
      ]
    },
    "Sagepay": {
      "description": "Sagepay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "M_ID": {
                  "type": "string",
                  "description": "Sagepay Gateway merchant ID"
                },
                "M_KEY": {
                  "type": "string",
                  "description": "Sagepay Gateway merchant key",
                  "format": "password"
                }
              },
              "required": [
                "M_ID",
                "M_KEY"
              ]
            }
          }
        }
      ]
    },
    "Stripe": {
      "description": "Stripe Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "redirectUrl": {
                  "type": "string",
                  "description": "Stripe Gateway redirect url",
                  "format": "url"
                }
              },
              "required": [
                "redirectUrl"
              ]
            }
          }
        }
      ]
    },
    "USAePay": {
      "description": "USAePay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "sourceKey": {
                  "type": "string",
                  "description": "USAePay Gateway source key",
                  "format": "password"
                },
                "pin": {
                  "type": "string",
                  "description": "USAePay Gateway pin",
                  "format": "password"
                }
              },
              "required": [
                "sourceKey",
                "pin"
              ]
            }
          }
        }
      ]
    },
    "VantivLitle": {
      "description": "VantivLitle Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "VantivLitle Gateway username",
                  "format": "password"
                },
                "password": {
                  "type": "string",
                  "description": "VantivLitle Gateway password",
                  "format": "password"
                },
                "merchantId": {
                  "type": "string",
                  "description": "VantivLitle Gateway merchant ID"
                }
              },
              "required": [
                "username",
                "password",
                "merchantId"
              ]
            }
          }
        }
      ]
    },
    "vegaaH": {
      "description": "vegaaH Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "terminalId": {
                  "type": "string",
                  "description": "vegaaH Gateway terminal ID"
                },
                "password": {
                  "type": "string",
                  "description": "vegaaH Gateway password",
                  "format": "password"
                }
              },
              "required": [
                "terminalId",
                "password"
              ]
            }
          }
        }
      ]
    },
    "Walpay": {
      "description": "Walpay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantName": {
                  "type": "string",
                  "description": "Walpay Gateway merchant name"
                },
                "merchantPin": {
                  "type": "string",
                  "description": "Walpay Gateway merchant pin",
                  "format": "password"
                }
              },
              "required": [
                "merchantName",
                "merchantPin"
              ]
            }
          }
        }
      ]
    },
    "Wirecard": {
      "description": "Wirecard Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantUsername": {
                  "type": "string",
                  "description": "Wirecard Gateway merchant username"
                },
                "merchantPassword": {
                  "type": "string",
                  "description": "Wirecard Gateway merchant password",
                  "format": "password"
                },
                "businessCaseSignature": {
                  "type": "string",
                  "description": "Wirecard Gateway merchant business case signature",
                  "format": "password"
                },
                "delay": {
                  "type": "integer",
                  "description": "Wirecard Gateway delay"
                }
              },
              "required": [
                "merchantUsername",
                "merchantPassword",
                "businessCaseSignature",
                "delay"
              ]
            }
          }
        }
      ]
    },
    "Worldpay": {
      "description": "Worldpay Gateway config",
      "allOf": [
        {
          "$ref": "#/definitions/GatewayAccount"
        },
        {
          "type": "object",
          "required": [
            "gatewayConfig"
          ],
          "properties": {
            "gatewayConfig": {
              "type": "object",
              "properties": {
                "merchantCode": {
                  "type": "string",
                  "description": "Worldpay Gateway merchant code",
                  "format": "password"
                },
                "merchantPassword": {
                  "type": "string",
                  "description": "Worldpay Gateway merchant password",
                  "format": "password"
                }
              },
              "required": [
                "merchantCode",
                "merchantPassword"
              ]
            }
          }
        }
      ]
    },
    "HistogramData": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "Contains date-time and value",
            "readOnly": true,
            "properties": {
              "date": {
                "type": "string",
                "description": "Entry date-time"
              },
              "value": {
                "type": "number",
                "description": "Entry value"
              }
            }
          }
        }
      }
    },
    "InvalidError": {
      "allOf": [
        {
          "$ref": "#/definitions/Error"
        },
        {
          "type": "object",
          "properties": {
            "details": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "Invoice": {
      "type": "object",
      "required": [
        "customerId",
        "websiteId",
        "currency"
      ],
      "properties": {
        "id": {
          "description": "The invoice identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The customer's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websiteId": {
          "description": "The website's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "currency": {
          "description": "The currency three letter code",
          "type": "string"
        },
        "amount": {
          "description": "The Invoice's amount",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "billingContactId": {
          "description": "Invoice's billing contact ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "deliveryContactId": {
          "description": "Invoice's delivery contact ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "items": {
          "type": "array",
          "description": "Invoice items array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "abandonedTime": {
          "description": "Invoice abandoned time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "voidedTime": {
          "description": "Invoice voided time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "closedTime": {
          "description": "Invoice closed time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "dueTime": {
          "description": "Invoice due time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "issuedTime": {
          "description": "Invoice issued time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "createdTime": {
          "description": "Invoice created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 5,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/BillingContactLink"
            },
            {
              "$ref": "#/definitions/DeliveryContactLink"
            }
          ]
        }
      }
    },
    "InvoiceIssue": {
      "type": "object",
      "properties": {
        "issuedTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "InvoiceItem": {
      "type": "object",
      "required": [
        "type",
        "unitPrice"
      ],
      "properties": {
        "id": {
          "description": "The website identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "type": {
          "description": "Invoice item's type",
          "type": "string",
          "enum": [
            "debit",
            "credit"
          ]
        },
        "unitPrice": {
          "description": "Invoice item's price",
          "type": "number",
          "format": "double"
        },
        "quantity": {
          "description": "Invoice item's quantity",
          "type": "integer"
        },
        "description": {
          "description": "Invoice item's description",
          "type": "string"
        },
        "periodStartTime": {
          "description": "Start time",
          "type": "string",
          "format": "date-time"
        },
        "periodEndTime": {
          "description": "End time",
          "type": "string",
          "format": "date-time"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 2,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/SubscriptionLink"
            }
          ]
        }
      }
    },
    "Layout": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "description": "The layout identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "name": {
          "description": "The name of the layout string",
          "type": "string"
        },
        "items": {
          "description": "The array of layout items (planId and starred)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LayoutItem"
          }
        },
        "createdBy": {
          "description": "The process that created this layout",
          "type": "string",
          "readOnly": true
        },
        "updatedBy": {
          "description": "The process that updated this layout",
          "type": "string",
          "readOnly": true
        },
        "createdTime": {
          "description": "Layout created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Layout updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/ItemsLink"
            }
          ]
        }
      }
    },
    "LayoutItem": {
      "type": "object",
      "properties": {
        "planId": {
          "description": "The plan identifier string",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "starred": {
          "description": "Boolean if the plan should be starred (special callout presentation)",
          "type": "boolean"
        },
        "order": {
          "description": "Item's order in Layout",
          "type": "integer",
          "readOnly": true
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "LeadSource": {
      "type": "object",
      "required": [
        "customerId"
      ],
      "properties": {
        "id": {
          "description": "The lead source identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "Customer ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "medium": {
          "description": "Lead Source's medium (eg search, display)",
          "type": "string"
        },
        "source": {
          "description": "Lead Source's source (eg google, yahoo)",
          "type": "string"
        },
        "campaign": {
          "description": "Lead Source's campaign (eg go-big-123)",
          "type": "string"
        },
        "term": {
          "description": "Lead Source's term (eg salt shakers)",
          "type": "string"
        },
        "content": {
          "description": "Lead Source's content (eg smiley faces)",
          "type": "string"
        },
        "affiliate": {
          "description": "Lead Source's affiliate (eg 123, Bob Smith)",
          "type": "string"
        },
        "subAffiliate": {
          "description": "Lead Source's sub-affiliate also called a sub-id or click id in some circles (eg 123456)",
          "type": "string"
        },
        "salesAgent": {
          "description": "Lead Source's sales agent (eg James Bond)",
          "type": "string"
        },
        "clickId": {
          "description": "Lead Source's click id (may come from an ad server)",
          "type": "string"
        },
        "path": {
          "description": "Lead Source's path uri (eg www.example.com/some/landing/path)",
          "type": "string"
        },
        "ipAddress": {
          "description": "Customer's IP Address",
          "type": "string"
        },
        "currency": {
          "description": "Currency (three letter ISO 4217 alpha code) (eg USD, EUR)",
          "type": "string"
        },
        "amount": {
          "description": "The amount that the lead cost",
          "type": "number",
          "format": "double"
        },
        "createdTime": {
          "description": "LeadSource created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "LeadSource updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 2,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            }
          ]
        }
      }
    },
    "ApprovalUrlLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "approval_url"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "BankAccountLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "bankAccount"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "BillingContactLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "billingContact"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "ContactLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "contact"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "CustomerLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "customer"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "DefaultPaymentInstrumentLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "defaultPaymentInstrument"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "DeliveryContactLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "deliveryContact"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "ItemsLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "items"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "NewLink": {
      "type": "object",
      "properties": {
        "href": {
          "description": "The link URL",
          "type": "string"
        }
      },
      "required": [
        "href"
      ]
    },
    "NotesLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "notes"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "OnBoardingUrlLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "onBoardingUrl"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "PaymentCardLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "paymentCard"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "PaymentLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "payment"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "PlanLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "plan"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "ProcessorAccountLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "processorAccount"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "SelfLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "self"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "SubscriptionLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "subscription"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "TransactionLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "transaction"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "WebsiteLink": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/NewLink"
        }
      ],
      "properties": {
        "rel": {
          "description": "The link type",
          "type": "string",
          "enum": [
            "website"
          ]
        }
      },
      "required": [
        "rel"
      ]
    },
    "Method": {
      "type": "string",
      "description": "The payment method",
      "enum": [
        "ach",
        "cash",
        "china-unionpay",
        "payment-card",
        "paypal"
      ]
    },
    "Note": {
      "type": "object",
      "required": [
        "content",
        "relatedType",
        "relatedId"
      ],
      "properties": {
        "id": {
          "description": "The note identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "createdBy": {
          "description": "The note's creator",
          "type": "string",
          "readOnly": true
        },
        "content": {
          "description": "The note's name",
          "type": "string"
        },
        "archived": {
          "description": "Is the note archived (excluded from List method)",
          "type": "boolean"
        },
        "relatedType": {
          "description": "The note's related resource type",
          "type": "string",
          "enum": [
            "customer",
            "payment-card",
            "payment-gateway",
            "subscription",
            "transaction"
          ]
        },
        "relatedId": {
          "description": "The note's related resource ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "createdTime": {
          "description": "Note created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Note updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "archivedTime": {
          "description": "Note archived time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Organization": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "description": "The organization identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "createdTime": {
          "description": "The organization created time",
          "$ref": "#/definitions/ServerTimestamp"
        },
        "updatedTime": {
          "description": "The organization updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "name": {
          "description": "The organization name",
          "type": "string",
          "maxLength": 60
        },
        "address": {
          "description": "The organization street address",
          "type": "string",
          "maxLength": 60
        },
        "address2": {
          "description": "The organization street address",
          "type": "string",
          "maxLength": 60
        },
        "city": {
          "description": "The organization city",
          "type": "string",
          "maxLength": 45
        },
        "region": {
          "description": "The organization region (state)",
          "type": "string",
          "maxLength": 45
        },
        "country": {
          "description": "The organization country ISO Alpha-2 code",
          "type": "string",
          "pattern": "^[A-Z]{2}$"
        },
        "postalCode": {
          "description": "The organization postal code",
          "type": "string",
          "maxLength": 10
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Payment": {
      "type": "object",
      "required": [
        "websiteId",
        "customerId",
        "currency",
        "amount"
      ],
      "properties": {
        "id": {
          "description": "The payment identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websiteId": {
          "description": "The website identifier string",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The customer identifier string",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "currency": {
          "description": "The payment currency ISO Alpha code",
          "type": "string"
        },
        "amount": {
          "description": "The payment amount",
          "type": "integer",
          "format": "double"
        },
        "scheduledTime": {
          "description": "The time the payment is scheduled for collection",
          "type": "string",
          "format": "date-time"
        },
        "invoiceIds": {
          "description": "The array of invoice identifiers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceId"
          }
        },
        "description": {
          "description": "The payment description",
          "type": "string",
          "maxLength": 255
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "declineInstructions": {
          "type": "object",
          "description": "Dunning instructions object for payment declines",
          "properties": {
            "dunning": {
              "$ref": "#/definitions/Dunning"
            },
            "dunningIndex": {
              "readOnly": true,
              "description": "The position in the sequence of dunning",
              "type": "integer"
            }
          }
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "createdBy": {
          "description": "The process that created this payment",
          "type": "string"
        },
        "updatedBy": {
          "description": "The process that updated this payment",
          "type": "string"
        },
        "status": {
          "description": "Payment status",
          "type": "string",
          "readOnly": true,
          "enum": [
            "scheduled",
            "queued",
            "in-progress",
            "incomplete",
            "waiting-gateway",
            "suspended",
            "completed"
          ]
        },
        "result": {
          "description": "Payment result",
          "type": "string",
          "readOnly": true,
          "enum": [
            "approved",
            "declined",
            "canceled",
            "unknown"
          ]
        },
        "createdTime": {
          "description": "Payment created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Payment updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 4,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/TransactionLink"
            },
            {
              "$ref": "#/definitions/ApprovalUrlLink"
            }
          ]
        }
      }
    },
    "PaymentCard": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The card identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "The Customer's ID. Required if card is creating not from Token",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "pan": {
          "description": "The card PAN (Primary Account Number). Required if card is creating not from Token",
          "type": "string"
        },
        "bin": {
          "description": "The card's bin (the PAN's first 6 digits)",
          "type": "string",
          "readOnly": true
        },
        "last4": {
          "description": "The PAN's last 4 digits",
          "type": "string",
          "readOnly": true
        },
        "expYear": {
          "description": "Card's expiry year. Required if card is creating not from Token",
          "type": "integer"
        },
        "expMonth": {
          "description": "Card's expiry month. Required if card is creating not from Token",
          "type": "integer"
        },
        "cvv": {
          "description": "Card's cvv (card verification value). Required if card is creating not from Token",
          "type": "string"
        },
        "billingContactId": {
          "description": "The Billing Contact ID. Required if card is creating not from Token",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "token": {
          "description": "PaymentCardToken. Use without any other fields",
          "type": "string"
        },
        "status": {
          "description": "Payment Card status",
          "type": "string",
          "readOnly": true,
          "enum": [
            "active",
            "expired",
            "inactive",
            "deactivated",
            "pending"
          ]
        },
        "createdTime": {
          "description": "Card created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Card updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 3,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/BillingContactLink"
            }
          ]
        }
      }
    },
    "PaymentInstrument": {
      "type": "object",
      "required": [
        "method"
      ],
      "discriminator": "method",
      "properties": {
        "method": {
          "description": "The payment method",
          "type": "string",
          "enum": [
            "ach",
            "cash",
            "payment-card",
            "paypal"
          ]
        }
      }
    },
    "ach": {
      "description": "ACH payment instrument object",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "type": "object",
          "required": [
            "bankAccountId"
          ],
          "properties": {
            "bankAccountId": {
              "description": "The bank account identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            },
            "gatewayAccountId": {
              "description": "The payment gateway identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            }
          }
        }
      ]
    },
    "cash": {
      "description": "Cash payment instrument object",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "type": "object",
          "properties": {
            "receivedBy": {
              "description": "The receiver's name",
              "type": "string"
            }
          }
        }
      ]
    },
    "payment-card": {
      "description": "Payment card payment instrument object",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "type": "object",
          "required": [
            "paymentCardId"
          ],
          "properties": {
            "paymentCardId": {
              "description": "The payment card identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            },
            "gatewayAccountId": {
              "description": "The payment gateway identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            }
          }
        }
      ]
    },
    "paypal": {
      "description": "PayPal payment instrument object",
      "allOf": [
        {
          "$ref": "#/definitions/PaymentInstrument"
        },
        {
          "type": "object",
          "required": [
            "payPalAccountId"
          ],
          "properties": {
            "payPalAccountId": {
              "description": "The PayPal account identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            },
            "gatewayAccountId": {
              "description": "The payment gateway identifier string",
              "allOf": [
                {
                  "$ref": "#/definitions/ResourceId"
                }
              ]
            }
          }
        }
      ]
    },
    "PaymentToken": {
      "type": "object",
      "required": [
        "method",
        "paymentInstrument",
        "firstName",
        "lastName"
      ],
      "properties": {
        "id": {
          "description": "The token identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "method": {
          "description": "Payment Method",
          "$ref": "#/definitions/Method"
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentTokenInstrument"
        },
        "firstName": {
          "description": "First name on payment card",
          "type": "string"
        },
        "lastName": {
          "description": "Last name on payment card",
          "type": "string"
        },
        "address": {
          "description": "Customer's billing address 1",
          "type": "string"
        },
        "address2": {
          "description": "Customer's billing address 2",
          "type": "string"
        },
        "city": {
          "description": "Billing address city",
          "type": "string"
        },
        "region": {
          "description": "Billing region",
          "type": "string"
        },
        "country": {
          "description": "Billing country - Two letter code",
          "type": "string"
        },
        "phoneNumber": {
          "description": "Phone number",
          "type": "string"
        },
        "postalCode": {
          "description": "Billing postal code",
          "type": "string"
        },
        "fingerprint": {
          "description": "Device fingerprint hash",
          "type": "string"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "PaymentTokenInstrument": {
      "type": "object",
      "description": "Payment Token instrument object",
      "properties": {
        "pan": {
          "description": "The card PAN (Primary Account Number)",
          "type": "string"
        },
        "expMonth": {
          "description": "Card's expiry month",
          "type": "integer"
        },
        "expYear": {
          "description": "Card's expiry year",
          "type": "integer"
        },
        "cvv": {
          "description": "The CVV/CVC of the payment card",
          "type": "string"
        },
        "routingNumber": {
          "description": "Routing Number",
          "type": "integer"
        },
        "accountNumber": {
          "description": "AccountNumber",
          "type": "integer"
        },
        "accountType": {
          "description": "Account Type",
          "type": "string"
        },
        "bankName": {
          "description": "Bank name",
          "type": "string"
        }
      }
    },
    "Plan": {
      "type": "object",
      "required": [
        "name",
        "currency"
      ],
      "properties": {
        "id": {
          "description": "The website identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "name": {
          "description": "The plan name",
          "type": "string"
        },
        "currency": {
          "description": "Currency (three letter ISO 4217 code)",
          "type": "string"
        },
        "currencySign": {
          "description": "Currency sign",
          "type": "string"
        },
        "isActive": {
          "description": "If the plan is not active, customers cannot subscribe to the plan (default to true)",
          "type": "boolean"
        },
        "description": {
          "description": "The plan description",
          "type": "string"
        },
        "richDescription": {
          "description": "The plan rich description - supports HTML",
          "type": "string"
        },
        "recurringAmount": {
          "description": "The amount that recurs according to the schedule",
          "type": "number",
          "format": "double"
        },
        "recurringPeriodUnit": {
          "description": "The unit of time",
          "type": "string",
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ]
        },
        "recurringPeriodLength": {
          "description": "The length of time (used with the recurringPeriodUnit)",
          "type": "integer"
        },
        "trialAmount": {
          "description": "The amount of a trial - 0 is a valid value (for free)",
          "type": "number",
          "format": "double"
        },
        "trialPeriodUnit": {
          "description": "The unit of time",
          "type": "string",
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ]
        },
        "trialPeriodLength": {
          "description": "The length of time (used with the trialPeriodUnit)",
          "type": "integer"
        },
        "setupAmount": {
          "description": "The amount of a trial - 0 is a valid value (for free)",
          "type": "number",
          "format": "double"
        },
        "expireTime": {
          "description": "Time when the plan is not longer valid",
          "type": "string",
          "format": "date-time"
        },
        "contractTermUnit": {
          "description": "The unit of time",
          "type": "string",
          "enum": [
            "day",
            "week",
            "month",
            "year"
          ]
        },
        "contractTermLength": {
          "description": "The length that corresponds with the contractTermUnit",
          "type": "integer"
        },
        "recurringPeriodLimit": {
          "description": "The number of times a subscription will rebill until the contract is over",
          "type": "integer"
        },
        "minQuantity": {
          "description": "Minimum quantity per order, defaults to 1",
          "type": "integer"
        },
        "maxQuantity": {
          "description": "Maximum quantity per order (NULL if no maximum)",
          "type": "integer"
        },
        "createdTime": {
          "description": "Plan created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Plan updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Product": {
      "type": "object",
      "description": "Your product includes digital goods, services, and physical goods.\nProducts appear on invoice line items.  If you set a tax category identifier,\ntaxes will be calculated upon invoice generation.\n",
      "example": "{\n  \"id\": \"stringid\",\n  \"name\": \"Widget\",\n  \"description\": \"Fantastic widget\",\n  \"taxCategoryId\": null,\n  \"customFields\": [],\n  \"createdTime\": \"2015-08-27 13:45:12\",\n  \"updatedTime\": \"2015-08-27 13:45:12\",\n  \"_links\": [\n      {\n        \"rel\": \"self\",\n        \"href\": \"https://api.rebilly.com/v2.1/products/stringid\"\n      }\n  ]\n}\n",
      "properties": {
        "id": {
          "description": "The product identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "name": {
          "description": "The product name",
          "type": "string",
          "maxLength": 255
        },
        "description": {
          "description": "The product description",
          "type": "string",
          "maxLength": 512
        },
        "taxCategoryId": {
          "description": "The product's tax category identifier string",
          "type": "string",
          "enum": [
            99999,
            20010,
            40030,
            51020,
            51010,
            31000,
            30070
          ]
        },
        "customFields": {
          "description": "Any custom object that may be stored with product (see custom fields)",
          "type": "string"
        },
        "createdTime": {
          "description": "The product created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The product updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "ReportDisputes": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "aggregationFieldValue": {
            "description": "Selected aggregation field value (defined by query). It can be, for example, websiteId or country. You define it in aggregationField param in query.",
            "type": "string"
          },
          "disputesVisa": {
            "description": "Disputes count on Visa",
            "type": "integer"
          },
          "countPercentVisa": {
            "description": "Disputes count / Transaction count",
            "type": "number",
            "format": "double"
          },
          "valuePercentVisa": {
            "description": "Disputes count / Value of settlement transactions",
            "type": "number",
            "format": "double"
          },
          "disputesMastercard": {
            "description": "Disputes count on Mastercard",
            "type": "integer"
          },
          "countPercentMastercard": {
            "description": "Disputes count / Transaction count",
            "type": "number",
            "format": "double"
          },
          "valuePercentMastercard": {
            "description": "Disputes count / Value of settlement transactions",
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "ReportDunning": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "object",
            "properties": {
              "retryNumber": {
                "description": "Retry attempts number",
                "type": "integer"
              },
              "attempts": {
                "description": "Attepmts count",
                "type": "integer"
              },
              "successfulTransactions": {
                "description": "Successful transactons count",
                "type": "integer"
              },
              "successRate": {
                "description": "Successful transactions ratio",
                "type": "number",
                "format": "double"
              }
            }
          }
        }
      }
    },
    "ReportStatistics": {
      "type": "object",
      "properties": {
        "revenue": {
          "description": "Revenue in last 24 hours",
          "type": "number",
          "format": "double"
        },
        "revenueGrowthPercentage": {
          "description": "Revenue growth (in percents) in last 24 hours (against previous 24 hours)",
          "type": "number",
          "format": "double"
        },
        "customers": {
          "description": "New customers count in last 24 hours",
          "type": "integer"
        },
        "customersGrowthPercentage": {
          "description": "Customers count growth (in percents) in last 24 hours (against previous 24 hours)",
          "type": "number",
          "format": "double"
        },
        "cancels": {
          "description": "Cancels count in last 24 hours",
          "type": "integer"
        },
        "cancelsGrowthPercentage": {
          "description": "Cancels count growth (in percents) in last 24 hours (against previous 24 hours)",
          "type": "number",
          "format": "double"
        },
        "refunds": {
          "description": "Refunds count",
          "type": "integer"
        },
        "refundsGrowthPercentage": {
          "description": "Refunds count growth (in percents) in last 24 hours (against previous 24 hours)",
          "type": "number",
          "format": "double"
        }
      }
    },
    "ReportSubscribers": {
      "type": "object",
      "properties": {
        "totalPastDue": {
          "description": "Total Past Due count",
          "type": "integer"
        },
        "totalOnTrial": {
          "description": "Total on trial count",
          "type": "integer"
        },
        "totalCancelled": {
          "description": "Total cancelled count",
          "type": "integer"
        },
        "totalActive": {
          "description": "Total active count",
          "type": "integer"
        },
        "data": {
          "description": "Report data",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "plan": {
                "description": "Plan Name",
                "type": "string"
              },
              "trial": {
                "description": "On trial count",
                "type": "integer"
              },
              "active": {
                "description": "Active count",
                "type": "integer"
              },
              "pastDue": {
                "description": "Past Due count",
                "type": "integer"
              },
              "cancelled": {
                "description": "Cancelled count",
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "ReportTransactions": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "object",
            "properties": {
              "aggregationFieldValue": {
                "description": "Selected aggregation field value",
                "type": "string"
              },
              "authApprovedThroughput": {
                "description": "Successful transactions count",
                "type": "integer"
              },
              "approvedThroughput": {
                "description": "Successful transactons percentage",
                "type": "integer"
              },
              "salesCount": {
                "description": "Sales count",
                "type": "integer"
              },
              "salesValue": {
                "description": "Sales value",
                "type": "number",
                "format": "double"
              },
              "salesAverage": {
                "description": "Sales average value",
                "type": "number",
                "format": "double"
              },
              "refundsCount": {
                "description": "Refunds count",
                "type": "integer"
              },
              "refundsValue": {
                "description": "Refunds value",
                "type": "number",
                "format": "double"
              },
              "amount": {
                "description": "Amount",
                "type": "number",
                "format": "double"
              },
              "count": {
                "description": "Transactions count",
                "type": "number",
                "format": "double"
              }
            }
          }
        }
      }
    },
    "ResetPassword": {
      "type": "object",
      "required": [
        "newPassword"
      ],
      "properties": {
        "newPassword": {
          "description": "New password",
          "type": "string",
          "format": "password"
        }
      }
    },
    "ResetPasswordToken": {
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "token": {
          "description": "The token's identifier string",
          "type": "string",
          "readOnly": true
        },
        "username": {
          "description": "The token's username",
          "type": "string"
        },
        "password": {
          "description": "Token's password (only for POST)",
          "type": "string",
          "format": "password"
        },
        "credential": {
          "description": "Token's credential ID",
          "type": "string"
        },
        "expiredTime": {
          "description": "Password expired time",
          "type": "string",
          "format": "date-time"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "ResourceCustomFields": {
      "description": "\"Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}\"`.\nThe format must follow the saved format (see Custom Fields section for the formats).\n",
      "type": "object"
    },
    "ResourceId": {
      "type": "string",
      "description": "The resource ID. Defaults to UUID v4",
      "maxLength": 50,
      "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
    },
    "DayOfWeek": {
      "type": "string",
      "enum": [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ]
    },
    "auto": {
      "description": "Rebilly will choose the best time to schedule the attempt",
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleMethod"
        }
      ]
    },
    "date-interval": {
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleMethod"
        },
        {
          "type": "object",
          "properties": {
            "duration": {
              "type": "integer",
              "minimum": 1
            },
            "unit": {
              "$ref": "#/definitions/TimeUnit"
            }
          },
          "required": [
            "duration",
            "unit"
          ]
        }
      ]
    },
    "day-of-month": {
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleMethod"
        },
        {
          "type": "object",
          "properties": {
            "day": {
              "type": "integer",
              "minimum": 1,
              "maximum": 31,
              "description": "The day of the month when event will be scheduled.\nBe aware if the month has less days,\nthe last day of the month will be selected.\n"
            },
            "time": {
              "$ref": "#/definitions/Time"
            }
          },
          "required": [
            "day"
          ]
        }
      ]
    },
    "day-of-week": {
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleMethod"
        },
        {
          "type": "object",
          "properties": {
            "day": {
              "$ref": "#/definitions/DayOfWeek"
            },
            "week": {
              "type": "string",
              "default": "next",
              "enum": [
                "next",
                "first-in-month",
                "last-in-month"
              ]
            },
            "time": {
              "$ref": "#/definitions/Time"
            }
          },
          "required": [
            "day"
          ]
        }
      ]
    },
    "immediately": {
      "allOf": [
        {
          "$ref": "#/definitions/ScheduleMethod"
        }
      ]
    },
    "ScheduleMethod": {
      "type": "object",
      "description": "The calculation instruction of scheduled time",
      "discriminator": "method",
      "properties": {
        "method": {
          "type": "string",
          "enum": [
            "auto",
            "immediately",
            "date-interval",
            "day-of-month",
            "day-of-week"
          ]
        }
      },
      "required": [
        "method"
      ]
    },
    "Time": {
      "type": "string",
      "format": "date-time",
      "pattern": "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](Z(\\+|\\-)([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])?$"
    },
    "TimeUnit": {
      "type": "string",
      "enum": [
        "second",
        "seconds",
        "minute",
        "minutes",
        "hour",
        "hours",
        "day",
        "days",
        "month",
        "months",
        "year",
        "years"
      ]
    },
    "ServerTimestamp": {
      "type": "string",
      "description": "Read-only timestamp, automatically assigned on back-end.",
      "format": "date-time",
      "readOnly": true
    },
    "Session": {
      "type": "object",
      "required": [
        "permissions"
      ],
      "properties": {
        "id": {
          "description": "The session identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "token": {
          "description": "The session's token used for authentication",
          "type": "string"
        },
        "permissions": {
          "description": "The session's permissions. See the format in example",
          "allOf": [
            {
              "$ref": "#/definitions/UserPermissions"
            }
          ]
        },
        "userId": {
          "description": "The user identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "createdTime": {
          "description": "Session created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Session updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "expiredTime": {
          "description": "Session expired time. Defaults to one hour",
          "type": "string",
          "format": "date-time"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Signin": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "description": "Email",
          "type": "string"
        },
        "password": {
          "description": "Password",
          "type": "string",
          "format": "password"
        },
        "expiredTime": {
          "description": "Session expired time. Defaults to one hour",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Signup": {
      "type": "object",
      "required": [
        "email",
        "company",
        "firstName",
        "lastName",
        "businessPhone",
        "password",
        "website"
      ],
      "properties": {
        "email": {
          "description": "The user email",
          "type": "string",
          "format": "email",
          "maxLength": 100
        },
        "company": {
          "description": "The user's company name",
          "type": "string"
        },
        "firstName": {
          "description": "The user first name",
          "type": "string"
        },
        "lastName": {
          "description": "The user last name",
          "type": "string"
        },
        "businessPhone": {
          "description": "The user business phone number",
          "type": "string"
        },
        "password": {
          "description": "The user password",
          "type": "string",
          "format": "password"
        },
        "website": {
          "description": "The user's website address",
          "type": "string"
        },
        "currencies": {
          "description": "An array of currencies codes",
          "type": "array",
          "default": [
            "USD"
          ],
          "items": {
            "description": "3 letters ISO 4217 currency code",
            "type": "string"
          }
        },
        "merchantCategoryCode": {
          "description": "An array of merchant cateogries codes. Defaults to \"Computer Software Stores\"",
          "type": "array",
          "default": [
            5734
          ],
          "items": {
            "description": "Merchant category code",
            "type": "integer"
          }
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "status": {
          "description": "The API status. If everything is ok - value is 'ok'",
          "type": "string",
          "readOnly": true,
          "enum": [
            "ok"
          ]
        },
        "time": {
          "description": "Current time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        }
      }
    },
    "Subscription": {
      "type": "object",
      "required": [
        "customerId",
        "planId",
        "websiteId"
      ],
      "properties": {
        "id": {
          "description": "The Subscription identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "Unique id for each customer",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "planId": {
          "description": "Unique id for each plan",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websiteId": {
          "description": "Unique id for each website",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "initialInvoiceId": {
          "description": "Unique id for the initial invoice",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "deliveryContactId": {
          "description": "Unique id for each delivery contact",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "billingContactId": {
          "description": "Unique id for each billing contact",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "status": {
          "description": "Subscription status",
          "type": "string",
          "readOnly": true
        },
        "quantity": {
          "description": "Quantity for each subscription. Default value to 1",
          "type": "integer"
        },
        "autopay": {
          "description": "Autopay determines if a payment attempt will be automatic",
          "type": "boolean",
          "default": true
        },
        "startTime": {
          "description": "Subscription start time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "activationTime": {
          "description": "Subscription activation time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "endTime": {
          "description": "Subscription end time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "renewalTime": {
          "description": "Subscription renewal time",
          "type": "string",
          "format": "date-time"
        },
        "canceledTime": {
          "description": "Subscription canceled time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "createdTime": {
          "description": "Subscription created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Subscription updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 6,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/PlanLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/BillingContactLink"
            },
            {
              "$ref": "#/definitions/DeliveryContactLink"
            }
          ]
        }
      }
    },
    "SubscriptionCancel": {
      "type": "object",
      "required": [
        "policy"
      ],
      "properties": {
        "policy": {
          "description": "Cancel policy",
          "type": "string",
          "enum": [
            "at-next-renewal",
            "now-with-prorata-credit",
            "now"
          ]
        }
      }
    },
    "SubscriptionSwitch": {
      "type": "object",
      "required": [
        "planId",
        "policy"
      ],
      "properties": {
        "planId": {
          "description": "The plan identifier string",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "policy": {
          "description": "Switch policy",
          "type": "string",
          "enum": [
            "at-next-renewal",
            "now-with-prorata-credit",
            "now"
          ]
        },
        "websiteId": {
          "description": "The website's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "quantity": {
          "description": "Quantity for each subscription. Default value to 1",
          "type": "integer"
        }
      }
    },
    "TaxCategory": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The tax category identifier string",
          "type": "string",
          "readOnly": true,
          "maxLength": 50,
          "enum": [
            99999,
            20010,
            40030,
            51020,
            51010,
            31000,
            30070
          ]
        },
        "description": {
          "description": "The tax category description",
          "type": "string",
          "maxLength": 512
        },
        "taxProvider": {
          "description": "The tax category maps to a provider",
          "type": "string",
          "enum": [
            "tax-jar"
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "ThreeDSecure": {
      "type": "object",
      "required": [
        "enrolled",
        "enrollmentEci",
        "customerId",
        "gatewayAccountId",
        "paymentCardId",
        "websiteId",
        "currency",
        "amount"
      ],
      "properties": {
        "id": {
          "description": "The ThreeDSecure entry identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "customerId": {
          "description": "Related customer ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "gatewayAccountId": {
          "description": "Related gateway account ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "paymentCardId": {
          "description": "Related payment card ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websiteId": {
          "description": "Related Website ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "enrolled": {
          "description": "Is the cardholder enrolled in 3DSecure",
          "type": "string",
          "enum": [
            "Y",
            "N",
            "U"
          ]
        },
        "enrollmentEci": {
          "description": "The ThreeDSecure entry enrollment eci",
          "type": "string"
        },
        "eci": {
          "description": "The ThreeDSecure entry electronic commerce indicator",
          "type": "integer"
        },
        "cavv": {
          "description": "The ThreeDSecure entry cardholder authentication verification value",
          "type": "string"
        },
        "xid": {
          "description": "The ThreeDSecure entry transaction Id",
          "type": "string"
        },
        "payerAuthResponseStatus": {
          "description": "The ThreeDSecure entry Auth Response Status",
          "type": "string",
          "enum": [
            "Y",
            "N",
            "U",
            "A"
          ]
        },
        "signatureVerification": {
          "description": "If signature was verified",
          "type": "string",
          "enum": [
            "Y",
            "N"
          ]
        },
        "amount": {
          "description": "Transaction amount",
          "type": "number",
          "format": "double"
        },
        "currency": {
          "description": "The currency three letter code",
          "type": "string"
        },
        "createdTime": {
          "description": "The ThreeDSecure entry created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "ApiTracking": {
      "type": "object",
      "description": "Tracking API Requests.",
      "readOnly": true,
      "properties": {
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "status": {
          "type": "integer",
          "description": "HTTP response code"
        },
        "url": {
          "type": "string",
          "description": "API request address"
        },
        "method": {
          "type": "string",
          "description": "HTTP method",
          "enum": [
            "HEAD",
            "GET",
            "POST",
            "PUT",
            "DELETE"
          ]
        },
        "ipAddress": {
          "type": "string",
          "description": "Client IP address",
          "format": "ipv4"
        },
        "request": {
          "type": "string",
          "description": "Request JSON-string"
        },
        "response": {
          "type": "string",
          "description": "Response JSON-string"
        },
        "duration": {
          "type": "integer",
          "description": "Request duration in milliseconds"
        },
        "createdTime": {
          "description": "The log created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "SubscriptionTracking": {
      "type": "object",
      "description": "Tracking subscription log",
      "readOnly": true,
      "properties": {
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "subscriptionId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "invoiceItemId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "result": {
          "type": "string",
          "description": "Subscription's result",
          "enum": [
            "created",
            "postponed",
            "stopped",
            "error"
          ]
        },
        "message": {
          "type": "string",
          "description": "It contains the transaction number and renewal time"
        },
        "createdTime": {
          "description": "The log created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "WebsiteWebhookTracking": {
      "type": "object",
      "description": "Webhook Tracking Requests.",
      "readOnly": true,
      "properties": {
        "id": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "websiteId": {
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "eventName": {
          "type": "string",
          "description": "Event name for which webhook was called"
        },
        "status": {
          "type": "string",
          "description": "Event's status",
          "enum": [
            "fail",
            "success"
          ]
        },
        "response": {
          "type": "integer",
          "description": "HTTP code response"
        },
        "pushData": {
          "type": "string",
          "description": "Event's data information JSON-string"
        },
        "sentTime": {
          "description": "Sent time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "nextSendTime": {
          "description": "Next send time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "createdTime": {
          "description": "The log created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The transaction identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "type": {
          "description": "Transaction type",
          "type": "string",
          "readOnly": true,
          "enum": [
            "authorize",
            "capture",
            "credit",
            "refund",
            "sale",
            "void"
          ]
        },
        "result": {
          "description": "Transaction result",
          "type": "string",
          "readOnly": true,
          "enum": [
            "approved",
            "connection-error",
            "declined",
            "never-sent",
            "pending",
            "pending-processor",
            "timeout",
            "unknown"
          ]
        },
        "amount": {
          "description": "The transactions's amount",
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "currency": {
          "description": "The transactions's currency",
          "type": "string",
          "readOnly": true
        },
        "parentTransactionId": {
          "description": "The transactions's parent ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "rebillNumber": {
          "description": "The transactions's rebill number",
          "type": "integer",
          "readOnly": true
        },
        "gatewayAccountId": {
          "description": "The transactions's Gateway Account ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "gatewayTransactionId": {
          "description": "The gateway's transaction ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "gatewayResponse": {
          "description": "The transactions's processor response",
          "type": "string",
          "readOnly": true
        },
        "gatewayResponseCode": {
          "description": "The gateway's response code",
          "type": "string",
          "readOnly": true
        },
        "gatewayResponseMessage": {
          "description": "The gateway's response message",
          "type": "string",
          "readOnly": true
        },
        "websiteId": {
          "description": "Website's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "customerId": {
          "description": "Customer's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "paymentCardId": {
          "description": "Payment Card's ID",
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ],
          "readOnly": true
        },
        "method": {
          "description": "Payment Method",
          "$ref": "#/definitions/Method"
        },
        "gatewayName": {
          "description": "Payment Gateway name, available only when method is 'payment_card', else null",
          "type": "string",
          "readOnly": true
        },
        "acquirerName": {
          "description": "Acquirer name, available only when method is 'payment_card', else null",
          "type": "string",
          "readOnly": true
        },
        "createdTime": {
          "description": "Transaction created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Transaction updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 6,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/ProcessorAccountLink"
            },
            {
              "$ref": "#/definitions/CustomerLink"
            },
            {
              "$ref": "#/definitions/WebsiteLink"
            },
            {
              "$ref": "#/definitions/PaymentCardLink"
            },
            {
              "$ref": "#/definitions/PaymentLink"
            }
          ]
        }
      }
    },
    "TransactionRefund": {
      "type": "object",
      "required": [
        "amount"
      ],
      "properties": {
        "amount": {
          "description": "Refund amount",
          "type": "number",
          "format": "double"
        }
      }
    },
    "UpdatePassword": {
      "type": "object",
      "properties": {
        "currentPassword": {
          "description": "Current user's password - used when requesting password change",
          "type": "string",
          "format": "password"
        },
        "newPassword": {
          "description": "New user's password - used when requesting password change",
          "type": "string",
          "format": "password"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "email",
        "firstName",
        "lastName"
      ],
      "properties": {
        "id": {
          "description": "The user identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "email": {
          "description": "The user email",
          "type": "string",
          "format": "email",
          "maxLength": 100
        },
        "firstName": {
          "description": "User's first name",
          "type": "string"
        },
        "lastName": {
          "description": "User's last name",
          "type": "string"
        },
        "businessPhone": {
          "description": "The user business phone number",
          "type": "string"
        },
        "mobilePhone": {
          "description": "The user mobile phone number",
          "type": "string"
        },
        "password": {
          "description": "User's password. If not provided, password reset email will be sent",
          "type": "string",
          "format": "password"
        },
        "permissions": {
          "description": "The user's permissions. See the format in example",
          "allOf": [
            {
              "$ref": "#/definitions/UserPermissions"
            }
          ]
        },
        "createdTime": {
          "description": "The user created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "The user updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "loginTime": {
          "description": "The user last login time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "reportingCurrency": {
          "description": "The user's ISO Alpha-3 code used for reports",
          "type": "string"
        },
        "availableCurrencies": {
          "type": "array",
          "description": "An array of reporting currencies enabled for the merchant",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "totpRequired": {
          "description": "The user setting of two-factor authentification",
          "type": "boolean"
        },
        "totpSecret": {
          "description": "The user TOTP key for authentification app (if TOTP enabled)",
          "type": "string"
        },
        "totpUrl": {
          "description": "The user link to QR-code for TOTP authentification app (if TOTP enabled)",
          "type": "string",
          "format": "url"
        },
        "status": {
          "description": "The user status",
          "type": "string",
          "enum": [
            "active",
            "inactive",
            "pending-confirmation"
          ],
          "readOnly": true
        },
        "country": {
          "description": "The user country setting - two letter code",
          "type": "string"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 1,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            }
          ]
        }
      }
    },
    "UserPermissions": {
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "resourceName": {
            "type": "string",
            "enum": [
              "3dsecure",
              "api-keys",
              "api-tracking",
              "authentication-options",
              "authentication-tokens",
              "bank-accounts",
              "blacklists",
              "checkout-pages",
              "contacts",
              "credentials",
              "custom-events",
              "custom-fields",
              "customers",
              "disputes",
              "email-credentials",
              "events",
              "gateway-accounts",
              "invoices",
              "layouts",
              "lead-sources",
              "notes",
              "oct-batch",
              "organizations",
              "password-tokens",
              "payments",
              "payment-cards",
              "paypal-accounts",
              "plans",
              "reports",
              "reset-sandbox",
              "rulesets",
              "sessions",
              "subscriptions",
              "subscription-tracking",
              "tokens",
              "transactions",
              "users",
              "webhook",
              "webhook-tracking",
              "websites"
            ]
          },
          "methods": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "HEAD",
                "GET",
                "POST",
                "PUT",
                "DELETE"
              ]
            }
          },
          "resourceIds": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ResourceId"
            }
          }
        }
      },
      "example": [
        {
          "resourceName": "plans",
          "methods": [
            "GET",
            "POST",
            "PUT",
            "HEAD",
            "DELETE"
          ]
        },
        {
          "resourceName": "invoices",
          "methods": [
            "GET",
            "HEAD"
          ],
          "resourceIds": [
            "4f6cf35x-2c4y-483z-a0a9-158621f77a21",
            "1586f35x-4f6c-483z-a0a9-2c4y21f77a21"
          ]
        },
        {
          "resourceName": null,
          "methods": null,
          "resourceIds": null
        }
      ]
    },
    "Website": {
      "type": "object",
      "required": [
        "name",
        "url",
        "servicePhone",
        "serviceEmail"
      ],
      "properties": {
        "id": {
          "description": "The website identifier string",
          "readOnly": true,
          "allOf": [
            {
              "$ref": "#/definitions/ResourceId"
            }
          ]
        },
        "name": {
          "description": "The website's name",
          "type": "string"
        },
        "url": {
          "description": "The website's domain address",
          "type": "string"
        },
        "servicePhone": {
          "description": "The website's customer service phone number",
          "type": "string"
        },
        "serviceEmail": {
          "description": "The website's customer service email address",
          "type": "string",
          "format": "email"
        },
        "checkoutPageUri": {
          "description": "Your own custom URI for this Checkout Page",
          "type": "string"
        },
        "createdTime": {
          "description": "Website created time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "updatedTime": {
          "description": "Website updated time",
          "allOf": [
            {
              "$ref": "#/definitions/ServerTimestamp"
            }
          ]
        },
        "customFields": {
          "$ref": "#/definitions/ResourceCustomFields"
        },
        "_links": {
          "type": "array",
          "description": "The links related to resource",
          "readOnly": true,
          "minItems": 1,
          "maxItems": 2,
          "items": [
            {
              "$ref": "#/definitions/SelfLink"
            },
            {
              "$ref": "#/definitions/NotesLink"
            }
          ]
        }
      }
    },
    "WebsiteWebhook": {
      "type": "object",
      "required": [
        "webHookUrl",
        "webHookUsername",
        "webHookPassword"
      ],
      "properties": {
        "webHookUrl": {
          "description": "Webhook Url",
          "type": "string"
        },
        "webHookUsername": {
          "description": "Webhook HTTP Authentication Username",
          "type": "string"
        },
        "webHookPassword": {
          "description": "Webhook HTTP Authentication Password. An empty string will be returned in the response",
          "type": "string"
        }
      }
    }
  }
}
